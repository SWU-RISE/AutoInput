Two integer a,b (0<=a,b<=10)

 The input contains blocks of 2 lines. The first line contains the number of sticks parts after cutting, there are at most 64 sticks. The second line contains the lengths of those parts separated by the space. The last line of the file contains zero.

 The input file consists of several blocks. Each block has a number 0 < n <= 200 in the first line. The next line contains a sequence of n numbers pairwise distinct and each greater than zero and less or equal than n. Next lines contain integer number k and one message of ascii characters separated by one space. The lines are ended with eol, this eol does not belong to the message. The block ends with the separate line with the number 0. After the last block there is in separate line the number 0. 

 The input file is divided into blocks. The first line in each block contains three integers: passenger capacity n of the train, the number of the city B station and the number of ticket orders from all stations. The next lines contain the ticket orders. Each ticket order consists of three integers: starting station, destination station, number of passengers. In one block there can be maximum 22 orders. The number of the city B station will be at most 7. The block where all three numbers in the first line are equal to zero denotes the end of the input file. 

 Your program is to read from standard input. The first line contains two integers R and C, respectively the number of rows and columns in your rice paddy, 1 <= R,C <= 5000. The second line contains the single integer N, the number of flattened rice plants, 3 <= N <= 5000. Each of the remaining N lines contains two integers, the row number (1 <= row number <= R) and the column number (1 <= column number <= C) of a flattened rice plant, separated by one blank. Each flattened plant is only listed once.

 The input consists of T test cases. The number of test cases (T ) is given in the first line of the input file. Each test case is written in a line and corresponds to an initial date. The three integers in a line, YYYY MM DD, represent the date of the DD-th day of MM-th month in the year of YYYY. Remember that initial dates are randomly chosen from the interval between January 1, 1900 and November 4, 2001. 

 The input file consists of separate lines containing k. The last line in the input file contains 0. You can suppose that 0 < k < 14. 

 You will be given a number of games in the input. The first line of input contains a positive integer giving the number of games to follow. The initial arrangement of the balls of each game is given one row at a time, from top to bottom. Each row contains 15 characters, each of which is one of "R", "G", or "B", specifying the colors of the balls in the row from left to right. A blank line precedes each game. 

 Input file consists of several blocks. Each block describes one town. Each line in the block contains three integers x; y; z, where x > 0 and y > 0 are the numbers of junctions which are connected by the street number z. The end of the block is marked by the line containing x = y = 0. At the end of the input file there is an empty block, x = y = 0. 

 You are to write a program to read a data set of 5-digit zip codes, one per line, until end of input. Your program should count the number of 5-digit bundles, 3-digit bundles, and first class letters. You should include as many letters as possible in 5-digit bundles first, then as many as possible in 3-digit bundles, with as few bundles of 10 to 15 letters as possible. For example, if there are 31 letters with the same zip code, they must be combined into exactly three 5-digit bundles.  Not all zip codes in the data set will be valid. A valid zip code consists of exactly 5 digits (0-9), all of which cannot be 0. Non-numeric characters are not allowed. At the end of your output, print the invalid zip codes found. (Duplicates need only be printed once.)

 Input contains several complete or partial games. A game is described by a single line with a single name, not to exceed 12 characters, and sequence of numbers, one for each ball thrown indicating the number of pins still standing after that throw,ended with -1. According to the rules, there are from 11 to 21 throws in a game; no input line will show throws beyond the last throw of the game. The number of games described in a file is not predetermined, so you'll have to detect the end of the input file.  

 The first line of input is an integer n (n > 0) specifying the number of cases to follow. Each case consists of three lines of input, one for each weighing. Sally has identified each of the coins with the letters A--L. Information on a weighing will be given by two strings of letters and then one of the words ``up'', ``down'', or ``even''. The first string of letters will represent the coins on the left balance; the second string, the coins on the right balance. (Sally will always place the same number of coins on the right balance as on the left balance.) The word in the third position will tell whether the right side of the balance goes up, down, or remains even. 

 Input is a sequence of commands. The command keywords BACK, FORWARD, VISIT, and QUIT are all in uppercase. URLs have no whitespace and have at most 70 characters. You may assume that no problem instance requires more than 100 elements in each stack at any time. The end of input is indicated by the QUIT command. 

 You will be given a number of cases in the input. Each case starts with a line containing n. This is followed by a line containing h. Next, there is a line of n integers specifying fi (1 <= i <=n), then a line of n integers di (1 <=i <=n), and finally, a line of n - 1 integers ti (1 <=i <=n - 1). Input is terminated by a case in which n = 0. 

 Write a program that accepts as input a series of groups of records from standard input. Each record in a group contains a collection of zeroes and ones representing a binary code for a different symbol. Each group is followed by a single separator record containing a single 9; the separator records are not part of the group. Each group is independent of other groups; the codes in one group are not related to codes in any other group (that is, each group is to be processed independently). 

 The first line of input file contains three positive integers 2<=K<= 30, 2<=S<=10000, 0<= M <=20 where M is the number of experiments Vasya has already conducted. The next M lines contain K numbers each, one line per experiment.  

 Each line in the input file describes one collection of marbles to be divided. The lines contain six non-negative integers n1 , . . . , n6 , where ni is the number of marbles of value i. So, the example from above would be described by the input-line "1 0 1 2 0 0". The maximum total number of marbles will be 20000.  The last line of the input file will be "0 0 0 0 0 0"; do not process this line. 

 The first line of the input file contains two integers N and K, separated by spaces, where N is the number of coins (2<=N<=1000 ) and K is the number of weightings fulfilled (1<=K<=100). The following 2K lines describe all weightings. Two consecutive lines describe each weighting. The first of them starts with a number Pi (1<=Pi<=N/2), representing the number of coins placed in the left and in the right pans, followed by Pi identifiers of coins placed in the left pan and Pi identifiers of coins placed in the right pan. All numbers are separated by spaces. The second line contains one of the following characters: '<', '>', or '='. It represents the result of the weighting:  '<' means that the weight of coins in the left pan is less than the weight of coins in the right pan,  '>' means that the weight of coins in the left pan is greater than the weight of coins in the right pan,  '=' means that the weight of coins in the left pan is equal to the weight of coins in the right pan.  

 Input consists of one problem instance. The first line contains a single positive integer n indicating the number of criminals using the hideout. The maximum value for n will be 20. The next line contains the n user ID's, separated by single spaces. Next will be the log entries in chronological order. Each entry in the log has the form type arg , where type is either E, L or M: E indicates that criminal arg has entered the hideout; L indicates criminal arg has left the hideout; M indicates a message was intercepted from user ID arg. A line containing only the letter Q indicates the end of the log. Note that not all user ID's may be present in the log but each criminal name will be guaranteed to be in the log at least once. At the start of the log, the hideout is presumed to be empty. All names and user ID's consist of only lowercase letters and have length at most 20. Note: The line containing only the user ID's may contain more than 80 characters. 

 Write a program that reads a series of data sets representing a computer file structure. A data set ends with a line containing a single *, and the end of valid data is denoted by a line containing a single #. The data set contains a series of file and directory names. (The root directory is assumed to be the starting point.) The end of a directory is denoted by a ']' Directory names begin with a lower case 'd' and file names begin with a lower case 'f' File names may or may not have an extension (such as fmyfile.dat or fmyfile). File and directory names may not contain spaces. 

 You will receive a description of a configuration of the 8 puzzle. The description is just a list of the tiles in their initial positions, with the rows listed from top to bottom, and the tiles listed from left to right within a row, where the tiles are represented by numbers 1 to 8, plus 'x'. For example, this puzzle    1  2  3  x  4  6  7  5  8  is described by this list:    1 2 3 x 4 6 7 5 8 

 The input file contains several jury selection rounds. Each round starts with a line containing two integers n and m. n is the number of candidates and m the number of jury members.  These values will satisfy 1<=n<=200, 1<=m<=20 and of course m<=n. The following n lines contain the two integers pi and di for i = 1,...,n. A blank line separates each round from the next.  The file ends with a round that has n = m = 0. 

 The input file contains a description of the two contests, which are separated by an empty line. Each description starts with a line containing the single integer N (1 <= N <= 100) that indicates how many lines of the contest result table follow. Each line of the contest result table consists of one or more team identifiers separated by spaces.  Every team identifier occurs at most once in the description of each contest.  

 The input file contains several test cases, in which the actual year has to be calculated. The description of each case starts with a line containing an integer n (1 <= n <= 20), the number of computers. Then, there is one line containing three integers yi,ai,bi for each computer (0 <= ai <= yi < bi < 10000). yi is the year the computer displays, bi is the year in which the bug happens (i. e. the first year which can't be displayed by this computer) and ai is the year that the computer displays instead of bi .  The input is terminated by a test case with n = 0. It should not be processed. 

 Each data set will be 3 lines. Each line will consist of four blocks, each 4 letters long. All letters will be in upper case. Blocks will be separated by "white space". Data sets will be separated by blank lines.

 Pairs of unequal, positive numbers, with each pair on a single line, that are claimed scores from a game of gizilch. 

 Input consists of information for one or more images. Each image starts with the width, in pixels, of each image line. This is followed by the RLE pairs, one pair per line. A line with 0 0 indicates the end of the data for that image. An image width of 0 indicates there are no more images to process. The first image in the example input encodes the 5x7 input image above.  

 A sequence of non-negative integers, each having at most 80 digits, followed by the terminating value -1. There are no extra leading zeros. 

 The first line of the input file contains the numbers k, h and N, separated by spaces. k and h are real constants. N (3 <= N <= 100) is the number of vertices of the fence. Then N lines follow, every line contains two real numbers Xi and Yi, separated by a space.

 The input will consist of one or more lines. The first line contains three real numbers and a non-negative integer. The real numbers are V S, R, and C, in that order. The integer, n, is the number of test cases. The following n lines of the input will have one real number per line. Each of these numbers is the angular frequency,  w.  

 Input will start with a set of less than 1000 die throws which you must use for all games, starting each new game with the first player "throwing" the first number in the set, the next player "throwing" the second number, and so on. This set of die throws will simply be a list of random numbers between 1 and 6, separated by single spaces, with not more than 80 characters on each line. It will be terminated by the number 0. After this set of die throws, there will be one or more game sets. Each game set is in three parts. The first part is a line containing a single number giving the number of players in the game. This will be more than 1 and less than 6. Then the board is described, in two parts. The first part lists the ladders and the chutes on the board, each ladder or chute being defined on a single line. Each is given by two numbers, from 1 to 99,separated by one or more spaces. The first number gives the start square, and the second number gives the end square; so it is a ladder if the first number is less than the second number, and a chute if the order is the other way. The chute/ladder definitions are terminated by a line containing two 0's. The second part of the board description gives the lose-a-turn/extra-turn squares, if there are any. These are single numbers, one per line, defining the squares. If the number is negative, its positive counterpart is a lose-a-turn square; if positive, it represents an extra-turn square. (For example, -16 means that square 16 on the board is a lose-a-turn square, while a 25 means that players landing on square 25 must immediately roll again.) The end of this set of descriptions, and of the game description, is given by a single 0. The end of all the game descriptions is given by a game with the number of players equal to 0.

 The input consists of T test cases. The number of test cases ) (T is given in the first line of the input file. Each test case begins with a line containing an integer N , 1 <= N <= 200, that represents the number of tables to move.  Each of the following N lines contains two positive integers s and t, representing that a table is to move from room number s to room number t each room number appears at most once in the N lines). From the 3 + N -rd  line, the remaining test cases are listed in the same manner as above. 

 The input file consists of several lines specifying orders. Each line specifies one order. Orders are described by six integers separated by one space representing successively the number of packets of individual size from the smallest size 1*1 to the biggest size 6*6. The end of the input file is indicated by the line containing six zeros. 

 The input file contains a single integer N (5<=N<=1000 ).

 The input is a list of RGB colors, one color per line, specified as three integers from 0 to 255 delimited by a single space. The first sixteen colors form the target set of colors to which the remaining colors will be mapped. The input is terminated by a line containing three -1 values.

 The input consists of T test cases. The number of test cases (T) is given in the first line of the input file. Each test case consists of three lines that contain three polynomials f(x), g(x), and h(x), one per line. Each polynomial is represented as described above. 

 Input consists of multiple cases. Each case consists of a positive integer m (<= 11) on a line followed by m lines giving the entries of an ASM. Each line gives a row of the ASM with entries separated by a single space. The end of input is indicated by a line containing m = 0.

 The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by the input data for each test case. Each test case starts with a line containing a single integer n (1 ≤ n ≤ 100), the number of devices in the communication system, followed by n lines in the following format: the i-th line (1 ≤ i ≤ n) starts with mi (1 ≤ mi ≤ 100), the number of manufacturers for the i-th device, followed by mi pairs of positive integers in the same line, each indicating the bandwidth and the price of the device respectively, corresponding to a manufacturer.

 The first line of the input file contains two integers N and K separated by a space(1 <= K < N <= 10000).Then K lines follow, each of them describes one file. The description of the i-th file starts with the integer Si that represents the number of clusters in the i-th file (1 <= Si < N). Then Si integers follow separated by spaces, which indicate the cluster numbers of this file on the disk in the natural order.  All cluster numbers in the input file are different and there is always at least one free cluster on the disk.  

 Write a program which will determine whether or not numbers are cyclic. The input file is a list of integers from 2 to 60 digits in length. (Note that preceding zeros should not be removed, they are considered part of the number and count in determining n. Thus, "01"is a two-digit number, distinct from "1" which is a one-digit number.)

 输入只包括一行5个整数x，y，m，n，L，其中x≠y < 2000000000，0 < m、n < 2000000000，0 < L < 2100000000。

 You will be given a number of games in the input. The first line of input is a positive integer indicating the number of games to follow. Each game starts with an integer 6 <= m <= 18 indicating the number of moves that have been made in the game. The next m lines indicate the moves made by the two players in order, each of the form i j (with i < j) indicating that the line between i and j is filled in that move. You may assume that all given moves are legal. 

 The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by one line for each test case. The line for a test case contains the single integer i (1 ≤ i ≤ 2147483647)

 The first line of the input contains two integers N and M, separated by a space ( 2 <= N <= 100 ,0 <= M <=100 ). The second line contains N pairs of integers X1, Y1, ..., XN, YN, separated by spaces, that represent Bob's route. The third line contains M pairs of integers X1',Y1',...,XM',YM', separated by spaces, that represent interesting places.  All points in the input file are different and their coordinates are integers not greater than 1000 by the absolute value.  

 Circuits in the input will obey the following guidelines:  1. The maximum size of the circuit picture is 100 by 100 characters.  2. A path always travels in a straight line unless altered by a junction. At a junction, the path can and will make a ninety degree turn. Two junctions will not be horizontally or vertically adjacent.  3. No paths will be "broken" That is, every path character is guaranteed to be adjacent on both sides to either another path character of the same type, a junction, a gate input, a gate output, a logic input, or the logic output.  4. Circuit paths do not cross or intersect other paths.  5. Gate inputs always approach horizontally from the left as shown above. Gate outputs always leave horizontally to the right as shown above.  6. Inversions may only appear immediately adjacent to a gate input or output, and will always be preceded (in the case of an input) or followed (in the case of an output) by at least one dash as shown above.  The end of a logic diagram in the input is indicated by line containing only a single asterisk in the first column. Following this are several lines which indicate the state of the inputs in the logic diagram. Each of these lines is a string of twenty-six "0"(zero) or "1"characters, with the first position representing the state of input A, the second position representing the state of input B, etc. Note that input values which are not actually used in the circuit may simply be ignored. The list of input states is terminated by a line containing only a single asterisk character in the first column.  Following the asterisk which terminates the list of input states is another circuit diagram followed by a list of input states, which is then followed by another circuit diagram and list of input states, and so on until the end of the file. The file will always contain at least one circuit and one set of inputs for that circuit.

 输入第一行是两个整数M，N（1 <= N <= 100），依次表示地位等级差距限制和物品的总数。接下来按照编号从小到大依次给出了N个物品的描述。每个物品的描述开头是三个非负整数P、L、X（X < N），依次表示该物品的价格、主人的地位等级和替代品总数。接下来X行每行包括两个整数T和V，分别表示替代品的编号和"优惠价格"。

 The first line of the input contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case is an integer n (1 <= n <= 20), and the second line is the P-sequence of a well-formed string. It contains n positive integers, separated with blanks, representing the P-sequence.

 In the first line of the input there is written one integer n, 1 <= n <= 1000. In the second line there are written n integers o1,o2,...,on (each of them is either 0 or 1) separated by single spaces. If oi=1, then the i−th ring is put on the bar, and if oi=0, then the i−th ring is taken off the bar.

 The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by input data for each test case. Each test case consist of a single line containing an integer s, the side of the cake, followed by an integer n (1 ≤ n ≤ 16), the number of cake pieces, followed by n integers (in the range 1..10) specifying the side of each piece.

 The first part of the input file contains all words from the dictionary. Each word occupies its own line. This part is finished by the single character '#' on a separate line. All words are different. There will be at most 10000 words in the dictionary.  The next part of the file contains all words that are to be checked. Each word occupies its own line. This part is also finished by the single character '#' on a separate line. There will be at most 50 words that are to be checked.  All words in the input file (words from the dictionary and words to be checked) consist only of small alphabetic characters and each one contains 15 characters at most.  

 The input will consist of several lines of exactly 256 hex characters. Each line is the contents of memory, beginning with address 00 and ending with address FF. The end of the input is indicated by a memory state that has a stop instruction (an "8") at address 00. The input programs will never "fall of the end of memory" that is, you will never execute an instruction that is located between addresses F0 and FF, inclusive.

 The input consists of T test cases. The number of test cases ) (T is given in the first line of the input file. Each of the next T lines gives a test case. A test case consists of an integer, representing the sum of m and n, and a sequence of m+n 0s and 1s, representing an initial sequence. A 0 denotes a white disk and a 1 denotes a black disk. The sum of m and n is at least 10 and does not exceed 30. There is a space between numbers. 

 input contains several pairs of positive integers. Each pair is on a line by itself, beginning in the first column and with a space between the two numbers. The first number of a pair is the number of gaining stocks for the day, and the second number is the number of losing stocks for the day. The total number of stocks never exceeds 5000. 

 The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by the input data for each test case. The first line of each test case consists of three integers W, H, and n (1 ≤ W, H ≤ 100). W is the width, and H is the height of the grid in terms of the number of grid points. n is the number of pieces on each board. The second line of each test case contains a sequence of n pairs of integers xi , yi, giving the coordinates of the pieces on the first board (0 ≤ xi < W and 0 ≤ yi < H). The third line of the test case describes the coordinates of the pieces on the second board in the same format.

 ?The first line of the input file contains the values N, K, and T, separated by spaces. (1 <= N <= 100 ,1 <= K <= 100 ,0 <= T <= 30000 )  ?The second line of the input file contains the moments of time when gangsters come to the restaurant T1, T2, ..., TN, separated by spaces. ( 0 <= Ti <= T for i = 1, 2, ..., N)  ?The third line of the input file contains the values of the prosperity of gangsters P1, P2, ..., PN, separated by spaces. ( 0 <= Pi <= 300 for i = 1, 2, ..., N)  ?The forth line of the input file contains the values of the stoutness of gangsters S1, S2, ..., SN, separated by spaces. ( 1 <= Si <= K for i = 1, 2, ..., N)  All values in the input file are integers.  

 The input consists of an N * N array of integers. The input begins with a single positive integer N on a line by itself, indicating the size of the square two-dimensional array. This is followed by N^2 integers separated by whitespace (spaces and newlines). These are the N^2 integers of the array, presented in row-major order. That is, all numbers in the first row, left to right, then all numbers in the second row, left to right, etc. N may be as large as 100. The numbers in the array will be in the range [-127,127].

 The first line of the input file contains two integer numb ers N and K, separated by a space. N (1 = N = 10000) is the number of cables in the stock, and K (1 = K = 10000) is the number of requested pieces. The first line is followed by N lines with one number per line, that specify the length of each cable in the stock in meters. All cables are at least 1 meter and at most 100 kilometers in length. All lengths in the input file are written with a centimeter precision, with exactly two digits after a decimal point.

 The first line of the input contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. In the first line of each test case there is an integer n (1 <= n <= 10), that indicates the number of the wheel vertices. In each of the next n lines, there is a pair of numbers which are x and y coordinates of the initial position of a vertex. After this, there is a single line containing the initial x and y coordinates of the center of gravity of the wheel. You can assume that the center of gravity is inside or on the boundary of the polygon (note that the given center of gravity is not necessarily computable from wheel's geometric shape). Next lines of the test data will describe the shape of the hill. The surface of the hill is approximated with a series of line segments with decreasing slopes ending with a horizontal line segment. For each segment, there is a line containing length and slope of a segment (both of them are real numbers). The lines are ordered in decreasing slope (The last line of this part of the input has slope zero). You can assume that the last (horizontal) line is long enough that the wheel would not pass its end. In the last line of the test case, there is a line containing the x and y coordinates of the right end-point of the first segment. All coordinates and slopes are real numbers.

 The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by input data for each test case describing one EE3 product. The first line of each test case is an integer n (1 ≤ n ≤ 100) which is the number of unit 4D cubes used in the product. Next, there are n lines, each describing one unit cube and contains 9 nonnegative integer numbers.  The first number, a positive integer, is the unique identifier of a cube and the remaining 8 numbers give the identities of neighbors of the cube listed in the following order:  ?the first two numbers are identifiers of the cubes glued to the opposing sides of the given cube along the x1 axis as seen looking in the direction of the x1 axis;  ?the next two numbers as above but for the x2 axis;  ?the next two numbers as above but for the x3 axis;  ?the next two numbers as above but for the x4 axis;  If a cube does not have a neighbor glued to one of its faces we use 0 instead of a cube identifier.  The problem is that the employees of ACM may produce inconsistent descriptions of EE3 products. There are two sources of such inconsistencies:  ?A consistent description must be symmetric, i.e. if cube x is glued to cube y at some face then cube y must be glued to cube x at the corresponding face along the same axis. The following description is inconsistent:  3 0 0 1 0 0 0 0 0  1 0 0 3 0 0 0 0 0  ?Any description must describe a single solid, i.e. there must be only one component in the product. Thus the following is inconsistent:  1 2 0 0 0 0 0 0 0  2 0 1 0 0 0 0 0 0  3 0 0 4 0 0 0 0 0  4 0 0 0 3 0 0 0 0

 The first line of the input file contains the number K (1 <= K <= 100) of input data sets. K lines follow, each of them describes one input data set.  Each of the following K lines contains two integers N and C (1 <= N <= 20), separated by a space. N is the number of planks in the fence, C is the catalogue number of the fence.  You may assume, that the total number of cute little wooden fences with 20 planks fits into a 64-bit signed integer variable (long long in C/C++, int64 in FreePascal). You may also assume that the input is correct, in particular that C is at least 1 and it doesnæŠ° exceed the number of cute fences with N planks.

 This problem requires that you implement Ohaver's encoding algorithm. The input will consist of several messages encoded with Ohaver's algorithm. The first line of the input is an integer n that specifies the number of test cases. The following n lines contain one message per line. Each message will use only the twenty-six capital letters, underscores, commas, periods, and question marks. Messages will not exceed 100 characters in length.

 The input consists of T test cases. The number of test cases (T) is given in the first line of the input file. Each test case consists of two lines: The first line has an integer n , 1 <= n <= 5000 , that represents the number of wooden sticks in the test case, and the second line contains 2n positive integers l1 , w1 , l2 , w2 ,..., ln , wn , each of magnitude at most 10000 , where li and wi are the length and weight of the i th wooden stick, respectively. The 2n integers are delimited by one or more spaces. 

 The first line of the input contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains two integers m and n, which are the number of rows and columns of the grid respectively (1 <= m, n <= 100). Next, there are m lines, each containing n integers which are either 0 or 1, indicating whether the corresponding cell of the grid is empty (0) or occupied by an obstacle (1). After description of the field, there is a sequence of lines, each corresponding to a chase trip of Tom (in order). Each line contains two positive integers which together specify the range of steps Tom has taken (inclusive), followed by a single upper-case character indicating the direction of the chase trip, which is one of the four cases of R (for right), L (for left), U (for up), and D (for down). (Note that these directions are relative to the field and are not directions to which Tom turns). This part of the test case is terminated by a line containing exactly two zeros.



 The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by the input data for each test case. Each test case is given in three consecutive lines. In the first line there is a positive integer k (1 ≤ k ≤ 64). In the second line of a test data there is a string of length k, composed only of letters n, and p, describing the Fun number system for that test data, where each n (p) indicates that the bit in that position is a negabit (posibit).  The third line of each test data contains an integer N (-2^63 ≤ N < 2^63), the number to be represented in the Funk number  system by your program.

 The first line of the input file consists of a single integer D (1 <= D <= 5), denoting the number of silicon plates. D blocks follow, each describing one silicon plate. The first line of each block contains three integers N (1 <= N <= 150), M (1 <= M <= 10), K (0 <= K <= MN) separated by single spaces. N is the length of the plate, M is its height and K is the number of bad squares in the plate. The following K lines contain a list of bad squares. Each line consists of two integers x and y (1 <= x <= N, 1 <= y <= M) ?coordinates of one bad square (the upper left square has coordinates [1, 1], the bottom right is [N,M]).

 The input contains a sequence of data sets, each specifying a dimension and three shadow patterns. The first line of a data set contains a positive integer 1 <= n <= 20 that specifies the dimensions of the input patterns. The remainder of the data set consists of 3n lines, each containing a string of n "X" and "-" characters. Each group of n lines represents a pattern. Where an "X" appears a shadow should be cast by the final solid, and where a "-" appears, light should pass through. For this problem, the input patterns may be assumed to have at least one "X" along each edge of the pattern. The input is terminated by a line containing a single zero in place of a valid dimension.  

 The input will consist of one case. The first line will be an integer n (0 <= n <= 30) specifying number of interior walls, followed by n lines containing integer endpoints of each wall x1 y1 x2 y2 . The 4 enclosing walls of the pyramid have fixed endpoints at (0,0); (0,100); (100,100) and (100,0) and are not included in the list of walls. The interior walls always span from one exterior wall to another exterior wall and are arranged such that no more than two walls intersect at any point. You may assume that no two given walls coincide. After the listing of the interior walls there will be one final line containing the floating point coordinates of the treasure in the treasure room (guaranteed not to lie on a wall). 

 The input consists of T test cases. The number of test cases ) (T is given in the first line of the input file. Each test case consists of two lines: each line contains an integer, the length of a gene, followed by a gene sequence. The length of each gene sequence is at least one and does not exceed 100. 

 You read both input and output of the original problem from the standard input;it has each output just after each case's input of the original problem.  Note that the output of original does not have formatting problems, i.e.,   The number of lines in the output file is correct and is as supposed to be.   There are no leading or trailing white space characters in output lines.   Wall specifications are correct, meaning that the four numbers correctly specify a possible wall within the boundary of the maze.

 The input will consist of a set of pairs of values for R and n. The R value will occupy columns 1 through 6, and the n value will be in columns 8 and 9.

 The input will consist of one case. The first line of the input specifies the number of telephone numbers in the directory (up to 100,000) as a positive integer alone on the line. The remaining lines list the telephone numbers in the directory, with each number alone on a line. Each telephone number consists of a string composed of decimal digits, uppercase letters (excluding Q and Z) and hyphens. Exactly seven of the characters in the string will be digits or letters.  

 The input consists of one or more test cases, followed by a line containing the number 0.00 that signals the end of the input. Each test case is a single line containing a positive floating-point number c whose value is at least 0.01 and at most 5.20; c will contain exactly three digits.

 输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000,000。

 The input will be twelve lines. Each line will contain the closing balance of his bank account for a particular month. Each number will be positive and displayed to the penny. No dollar sign will be included. 

 The first line of input will be a positive integer indicating how many data sets will be included (N). Each of the next N lines will contain the X and Y Cartesian coordinates of the land Fred is considering. These will be floating point numbers measured in miles. The Y coordinate will be non-negative. (0,0) will not be given.

 You will be given a number of cases. The input for each case consists of one line of four integers p, e, i, and d. The values p, e, and i are the number of days from the beginning of the current year at which the physical, emotional, and intellectual cycles peak, respectively. The value d is the given date and may be smaller than any of p, e, or i. All values are non-negative and at most 365, and you may assume that a triple peak will occur within 21252 days of the given date. The end of input is indicated by a line in which p = e = i = d = -1. 

 The first line contains two integers: a positive integer n (0 < n <= 50) giving the length of the strings; and a positive integer m (0 < m <= 100) giving the number of strings. These are followed by m lines, each containing a string of length n.

 The date in Haab is given in the following format:  NumberOfTheDay. Month Year   The first line of the input file contains the number of the input dates in the file. The next n lines contain n dates in the Haab calendar format, each in separate line. The year is smaller then 5000.  

 The input for your program will be pairs of positive integer sequences, consisting of two lines, alternating until end-of-file. The first sequence are the available values of stamps, while the second sequence is a series of customer requests. For example:   1 2 3 0 ; three different stamp types  7 4 0 ; two customers  1 1 0 ; a new set of stamps (two of the same type)  6 2 3 0 ; three customers   Note: the comments in this example are *not* part of the data file; data files contain only integers. 

 The input file contains the descriptions of n >= 0 visits of different agents. The first line of the description of each visit consists of agent's one character code C, C = A, . . ., Z, and the time when the agent enters the headquarters. The time is in the format HH:MM:SS (hours, minutes, seconds). The next lines (there will be at least one) contain the room number, and the length of time intended to stay in the room, time is in seconds. Each room is in a separate line. The list of rooms is sorted according to the increasing room number. The list of rooms ends by the line containing 0. The list of the descriptions of visits ends by the line containing the character dot. 

 The input file contains several blocks each describing one pipe component. Each block starts with the number of bent points 2 <= n <= 20 on separate line. Each of the next n lines contains a pair of real values xi, yi separated by space. The last block is denoted with n = 0. 

 The input for this program consists of several tableaus of cards. The tableaus are listed in the input file one card per line, with a single blank line between tableaus. The end of the input is marked by the end of the file. Each card in a tableau is specified by four consecutive characters on the input line. The first identifies the type of symbol on the card, and will be either a "D", "O", or "S", for Diamond, Oval, or Squiggle, respectively. The second character will be the digit 1, 2, or 3, identifying the number of symbols on the card. The third identifes the color and will be an "R", "G", or "P" for Red, Green, or Purple, respectively. The final character identifes the shading and will be an "O", "F", or "S" for Outlined, Filled, or Striped. All characters will be in uppercase.

 The first line of the input contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The data for each test case consists of a pair of programs. Each program is written as a sequence of consecutive lines, each line containing exactly one command. Programs end with a line containing only the word END. You may assume that no variable in any program is named 'END'. There is no blank line between programs of one test case. There are at least one and at most 25 lines in each program. Total number of variables in two programs is no more than 10.

 The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. Each test case consists of a single line, containing s (1 <= s <= 25), the length of the hexagon's side, followed by n, the number of triangle types (1 <= n <= 10), followed by n integers representing the length of each triangle type's side (between 1 and 25, inclusive).

 The first part of the input file is a dictionary of English words common to all test cases. The first line of the file is d (1 <= d <= 50000); the number of words in the dictionary, followed by d lines each containing a word in the dictionary. The words in the dictionary are sorted in alphabetical order and all are in uppercase. Each word has at most 20 characters, but you can assume that sum of the length of all words in the dictionary is no more than 350,000. The next line contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. Each test case, which is preceded by a single blank line, consists of multiple lines in the input file forming the encrypted text. Each line has a string containing only uppercase letters and blank. You may assume that no line break is occurred in the middle of a word and there may be arbitrary number of blank characters at the end of each line. Maximum length of input lines is 80. 

 To describe positions, we assume the coordinates are expressed as (x, y) and the origin lies in the top-left of all pipes and links. (Note that y coordinates are increased downwards). All coordinates are integer numbers between 0 and 100, inclusive.  The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case is p (1 <= p <= 20), the number of pipes, followed by p lines, each describing a pipe. Each pipe description line consists of three numbers. The first two are (x, y) coordinates of the upper-left corner of the pipe and the third number is the height of the pipe (at least 1 cm and at most 20 cm). Note that diameter of each pipe is 1 cm.   After input data describing the pipes, there is a line containing a single integer l, which is the number of links (0 <= l <= 50). After it, there are l lines describing links. Each link description contains 3 integers. The first two are (x, y) coordinates of the left end-point of the link and the third is the length of the link (at least 1 cm and at most 20 cm). It is assumed that the width of the link is zero.   The last line for each test case contains two numbers. The first is the number of target pipe (starting from one, with the order appeared in test data). The second line is the desired y for the level of water in the target pipe (note that the specified level may be out of the pipe at all).   You can assume the following about the input:  . The water enters into the first pipe.  . No link crosses a pipe.  . No two links have the same y coordinates.  . No two pipes have the same upper-left x coordinates.  . Both endpoints of each link are connected to pipes.  

 The first line of the input contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains N (1 <= N <= 150) and M (1 <= M <= 50) followed by N lines, each for one student. The format of these lines is Ri, Mi, K, Fi1, â€¦, FiK in this order. In this line, that is for student i, Ri is his/her region number, Mi is his/her score in the entrance exam, K is the number of FDUs in his/her priority list (0 <= K <= M), and his/her priority list containing the FDU numbers in order of interest. Then there are M lines, one for each FDU. Each line contains Ri, and Ci in that order, which respectively is region number of Fi (the ith FDU) and the capacity of Fi. Note that region numbers are arbitrary integers.  

 The school records include information about these student friendships, represented as lists of numbers. If there are 29 students, then they are represented by the numbers 1 to 29. The record for a single student includes, first, his/her student identification number (1 to 29, in this example), then the number of his/her acquaintances, then a list of them in no particular order. So, for example, this record  17 4 5 2 14 22   indicates that student 17 knows 4 students: 5, 2, and so on. The records for all the students in the incoming class are represented as the list of numbers that results from concatenating all the student records together. Spaces and line breaks are irrelevent in this format. Thus, this   1 1 2 2 1 1   is a whole database, indicating that there are only two students in the incoming class, and they know each other; and this   1 2 3 4  2 2 3 4  3 2 1 2  4 2 1 2   indicates that 1 doesn't know 2, and 3 doesn't know 4, but all other pairs know each other.   The database has been checked for consistency, so that if A knows B, then B knows A.  

 The file contains the sequence of commands. White spaces can occur freely in the input. The input data terminate with an end of file.

 The input consists of T test cases. The number of test cases (T ) is given in the first line of the input file.  Each test case consists of two lines: The first line contains a natural number n , not greater than 5, which implies you are given a (complete or incomplete) n*n grid as input, and the second line begins with a nonnegative integer k , the number of matchsticks that are missing from the complete n*n grid, followed by  k numbers specifying the matchsticks. Note that if k is equal to zero, then the input grid is a complete n*n grid; otherwise, the input grid is an incomplete n*n grid such that the specified k matchsticks are missing from the complete n*n grid. 

 You will be given a number of cases in the input. The first line of input consists of a positive integer indicating the number of test cases to follow. Each test case starts with a line containing n, followed by the quadtree encoding of the test image and the quadtree encoding of the secret image to be decoded. Each quadtree encoding starts with a line containing a positive integer m indicating the number of leaf nodes in the tree. The next m lines are of the form:  k intensity  which specifies that the node numbered k is a leaf node with the specified intensity as the associated leaf value. Nodes not specified are either internal nodes or absent in the quadtree. You may assume that all intensities are between 0 and 255, inclusively. You may also assume that each quadtree encoding is a valid output obtained from the encoding lgorithm described above. 

 The input will consist of one case. The first line contains a single positive integer n (1 <= n <= 100) indicating the number of receptacles in the room. The next n lines list the receptacle types found in the room. Each receptacle type consists of a string of at most 24 alphanumeric characters. The next line contains a single positive integer m (1 <= m <= 100) indicating the number of devices you would like to plug in. Each of the next m lines lists the name of a device followed by the type of plug it uses (which is identical to the type of receptacle it requires). A device name is a string of at most 24 alphanumeric  characters. No two devices will have exactly the same name. The plug type is separated from the device name by a space. The next line contains a single positive integer k (1 <= k <= 100) indicating the number of different varieties of adapters that are available. Each of the next k lines describes a variety of adapter, giving the type of receptacle provided by the adapter, followed by a space, followed by the type of plug. 

 输入的第一行表示区域的行数R和列数C(1 <= R,C <= 100)。下面是R行，每行有C个整数，代表高度h，0<=h<=10000。

 In the first line of input there is one integer n, 3 <= n <= 50000. This is the number of intervals. In the (i+1)âˆ’st line, 1 <= i <= n, there is a description of the interval [ai; bi] in the form of two integers ai and bi separated by a single space, which are respectively the beginning and the end of the interval,1 <= ai <= bi <= 1000000.

 两个整数N和M(N <= 15 , M <= 100000000)。

 The input consists of M test cases. The first line of the input contains a positive integer M, the number of test cases you are to solve. After the first line,input data for M cases follow. The first line of each test case contains a positive integer N (>=3), the number of vertices. Each of the following N lines is of the form:    i  x  i  y  i  d  i  a1  a2  a3  .....  a  di  "i" is the vertex number, xi and yi are the coordinate (xi, yi) of the vertex i, and di is the degree of the vertex i. The following { ai } are the adjacent vertices of the vertex i. The last line gives k, the size of proper regions that you have to count.  Note that M, the number of cases in input is less than 10. N, the number of vertices of a given farmland graph is less than 200. All vertices are located on grid points of the 1000 x 1000 lattice grid. 

 The input contains a text consisting of several paragraphs. Each paragraph is preceded by a line containing a single integer n, the desired width of the paragraph (1 <= n <= 80).   Paragraphs consist of one or more lines which contain one or more words each. Words consist of characters with ASCII codes between 33 and 126, inclusive, and are separated by spaces (possibly more than one). No word will be longer than the desired width of the paragraph. The total length of all words of one paragraph will not be more than 10000 characters.   Each paragraph is terminated by exactly one blank line. There is no limit on the number of paragraphs in the input file.   The input file will be terminated by a paragraph description starting with n=0. This paragraph should not be processed.   

 Input consists of multiple problem instances. Each instance starts with a line containing two positive integers n and m. the first value indicated the number of objects to sort, where 2 <= n <= 26. The objects to be sorted will be the first n characters of the uppercase alphabet. The second value m indicates the number of relations of the form A < B which will be given in this problem instance. Next will be m lines, each containing one such relation consisting of three characters: an uppercase letter, the character "<" and a second uppercase letter. No letter will be outside the range of the first n letters of the alphabet. Values of n = m = 0 indicate end of input.

 Input consists of multiple problem instances. Each instance consists of a single integer n, where 1 <= n <= 500,000,000. A value of n = 0 terminates input. (Note that this means you will never have to output the empty tree.)

 Input consists of multiple problem instances. Each instance consists of a specification of a space station. We assume that each space station can fit into an n x m x k grid (1 <= n, m, k <= 60), where each grid cube may or may not contain an ACM. We number the grid cubes 0, 1, 2, ..., kmn-1 as shown in the diagram below. Each space station specification then consists of the following: the first line contains four positive integers n m k l, where n, m and k are as described above and l is the number of ACM's in the station. This is followed by a set of lines which specify the l grid locations of the ACM's. Each of these lines contain 10 integers (except possibly the last). Each space station is fully connected (i.e., an astronaut can move from one ACM to any other ACM in the station without leaving the station). Values of n = m = k = l = 0 terminate input.     

 Input consists of a single problem instance consisting of a description of the highway system, followed by a set of sign locations. The highway system is defined as a set of intersections (some of which are also city locations) and a set of roads connecting the intersections. The first line of a problem instance contains three positive integers n m k: n specifies the number of intersections (numbered 0, 1, 2, ..., n-1), m indicates the number of roads between connections, and k indicated the number of intersections which are also cities. Following this are m lines of the form i1 i2 d, which specifies a two-way road between intersections i1 and i2 of distance d. The next k lines are of the form i name, which specifies that intersection i is a city called name. After this is a line with a single positive integer s indicating the number of signs to place on the highway. The remaining s lines are of the form i1 i2 d indicating that a sign is to be placed on the road going from i1 to i2 a distance d from i1 (d will always be non-zero and less than the distance from i1 to i2). For all problem instances, the length of name will be <= 18 characters, and 5 <= n <= 30. All distances will be non-zero and to the nearest hundredth mile.

 The input consists of a number of instances. The first line of each instance contains the integers R and T separated by a space. This is followed by R lines containing two integers separated by a space, indicating the row and column of the initial positions of the R robots. You may assume that each robot initially occupies a cell which is not (15, 15) and the locations of the robots are distinct. The next T lines give the list of teleport destinations available. Each line is given by the row and column of the destination cell, separated by a space. The input is terminated by a case with R = T = 0.

 Each equation to deal with occupies one line in the input. Each line begins with a positive integer (less than 2 30) followed by an equality sign =. (For your convenience, the Dreisamwuste inhabitants used equations with trivial left sides only.) This is followed by up to 12 positive integers forming the right side of the equation. (The product of these numbers will be less than 2 30.) There might be some parentheses around groups of one or more numbers. There will be no line containing more than 80 characters. There is no other limit for the amount of the parentheses in the equation. There will always be at least one space or parenthesis between two numbers, otherwise the occurrence of white space is unrestricted.   The line containing only the number 0 terminates the input, it should not be processed. 

 The input contains descriptions of several different game situations. The first line of each description contains two integers w and h (1 <= w,h <= 75), the width and the height of the board. The next h lines describe the contents of the board; each of these lines contains exactly w characters: a "X" if there is a game piece at this location, and a space if there is no game piece.   Each description is followed by several lines containing four integers x1, y1, x2, y2 each satisfying 1 <= x1,x2 <= w, 1 <= y1,y2 <= h. These are the coordinates of two game pieces. (The upper left corner has the coordinates (1, 1).) These two game pieces will always be different. The list of pairs of game pieces for a board will be terminated by a line containing "0 0 0 0".   The entire input is terminated by a test case starting with w=h=0. This test case should not be procesed. 

 Input consists of information for one or more independent transmitter problems. Each problem begins with one line containing the (x,y) coordinates of the transmitter followed by the broadcast radius, r. The next line contains the number of points N on the grid, followed by N sets of (x,y) coordinates, one set per line. The end of the input is signalled by a line with a negative radius; the (x,y) values will be present but indeterminate. Figures 1 and 2 represent the data in the first two example data sets below, though they are on different scales. Figures 1a and 2 show transmitter rotations that result in maximal coverage. 

 The input contains several lines, one for each number to be displayed. Each line contains two integers s, n (1 <= s <= 10, 0 <= n <= 99 999 999), where n is the number to be displayed and s is the size in which it shall be displayed.   The input file will be terminated by a line containing two zeros. This line should not be processed. 

 The input contains several maze descriptions. Each description begins with one line containing two integers w and h (1 <= w,h <= 75), the width and the height of the maze. The next h lines represent the maze itself, and contain w characters each; all these characters will be either "/" or "\".   The input is terminated by a test case beginning with w = h = 0. This case should not be processed. 

 The input contains the description of several robberies. The first line of each description consists of three numbers W, H, t (1 <= W,H,t <= 100) where W is the width, H the height of the city and t is the time during which the city is locked.   The next contains a single integer n (0 <= n <= 100), the number of messages the inspector received. The next n lines (one for each of the messages) consist of five integers ti, Li, Ti, Ri, Bi each. The integer ti is the time at which the observation has been made (1 <= ti <= t), and Li, Ti, Ri, Bi are the left, top, right and bottom respectively of the (rectangular) area which has been observed. (1 <= Li <= Ri <= W, 1 <= Ti <= Bi <= H; the point (1, 1) is the upper left hand corner, and (W, H) is the lower right hand corner of the city.) The messages mean that the robber was not in the given rectangle at time ti.   The input is terminated by a test case starting with W = H = t = 0. This case should not be processed. 

 The input contains the description of several S-trees with associated VVAs which you have to process. Each description begins with a line containing a single integer n, 1 <= n <= 7, the depth of the S-tree. This is followed by a line describing the variable ordering of the S-tree. The format of that line is xi1 xi2 ...xin. (There will be exactly n different space-separated strings). So, for n = 3 and the variable ordering x3, x1, x2, this line would look as follows:  x3 x1 x2   In the next line the distribution of 0's and 1's over the terminal nodes is given. There will be exactly 2^n characters (each of which can be 0 or 1), followed by the new-line character. The characters are given in the order in which they appear in the S-tree, the first character corresponds to the leftmost terminal node of the S-tree, the last one to its rightmost terminal node.   The next line contains a single integer m, the number of VVAs, followed by m lines describing them. Each of the m lines contains exactly n characters (each of which can be 0 or 1), followed by a new-line character. Regardless of the variable ordering of the S-tree, the first character always describes the value of x1, the second character describes the value of x2, and so on. So, the line   110   corresponds to the VVA ( x1 = 1, x2 = 1, x3 = 0).   The input is terminated by a test case starting with n = 0. This test case should not be processed. 

 Input consists of information for one or more encrypted messages. Each problem begins with one line containing k1, k2, and k3 followed by a line containing the encrypted message. The end of the input is signalled by a line with all key values of 0.

 The first line of input contains one integer, which is the total number of preorder traversals describing window structures. This line is followed by one line for each preorder traversal. Each preorder traversal will contain appropriate dividers '|' and '-' and from 1 to 26 uppercase letters.

 The input consists of one or more documents, followed by a line containing only '**' that signals the end of the input. Documents are implictly numbered starting with 1. Each document consists of one or more lines of text followed by a line containing only '*'. Each line of text will be at most 79 characters long, not counting end-of-line characters. For document i, output the line 'DOCUMENT i' followed by the sorted index using the exact output format shown in the examples.

 The input consists of one or more test cases, followed by a line containing '0 0 0' (three zeros) that signals the end of the input. Each test case begins with a line containing three positive integers n, r, and c, separated by a space: n is the number of symbols in the font, r is the number of rows in each grid, and c is the number of columns in each grid. The next r lines contain the image of each symbol, using the exact format shown in the examples: a dot '.' represents an empty part of the grid, a lowercase 'o' represents a pixel, and adjacent grids are separated by a space. The total width of each line will be at most 79 characters (not counting end-of-line characters), and r will be at most 10. The test cases are implicitly numbered starting with 1.

 The input will contain one or more grids. Each grid is preceded by a line containing the number of rows and columns in the grid and the row and column of the mouse click. All numbers are in the range 1-20. The rows of the grid follow, starting on the next line, consisting of '.' and 'X' characters.   The end of the input is indicated by a line containing four zeros. The numbers on any one line are separated by blanks. The grid rows contain no blanks.  

 Line 1:  # of work tables, integer (henceforth referred to as N). N < 50   Lines 2...N+1  For each table:  ?a list of chemicals dumped into the stream at that table, followed by  ?a list of chemicals that, if they appeared at that table, would be harmlessly neutralized by the reactions at that table, allowing no further trace of that chemical to flow downstream (we will assume that the rate of work at each table can be adjusted as necessary to guarantee total neutralization of whatever amount of these chemicals arrive from upstream).   Each of these lists is given as a series of upper-case alphabetic characters. The only exception is that a special list, consisting of a single '.' character, will be used to denote an empty list. The two lists are separated from one other by one or more blanks. The same chemical will never appear in both lists.   Lines N+2...?  These lines provide a description of the pipeworks. Each line contains a pair of integers in the range 1...N, separated by one or more blanks:  I J  meaning that the table number I is upstream of table number J--anything dumped into the stream at table I or that arrives in the stream at table I and is not neutralized can then be counted on to arrive at table J.   No (I,J) pair will be listed more than once, but the pairs may occur in any order. I and J will never be the same number.   The end of input is signaled by a pair of zeros:  0 0   Note that if a table only receives water directly from the stream entering the building, that table will never occur in the second position of a pair. Similarly, any table that discharges only into the stream leaving the building will never occur in the first position of a pair.  

 For simplicity, all persons are assigned a unique integer identifier from 1 to N.   The first line in the input file contains a single integer number N (2 <= N <= 100) - the total number of persons to divide into teams, followed by N lines - one line per person in ascending order of their identifiers. Each line contains the list of distinct numbers Aij (1 <= Aij <= N, Aij != i) separated by spaces. The list represents identifiers of persons that ith person knows. The list is terminated by 0.

 The first line of the input file contains two integer numbers N and L separated by a space. N (3 <= N <= 1000) is the number of vertices in the King's castle, and L (1 <= L <= 1000) is the minimal number of feet that King allows for the wall to come close to the castle.   Next N lines describe coordinates of castle's vertices in a clockwise order. Each line contains two integer numbers Xi and Yi separated by a space (-10000 <= Xi, Yi <= 10000) that represent the coordinates of ith vertex. All vertices are different and the sides of the castle do not intersect anywhere except for vertices.

 The first line of the input file represents a chemical formula that is to be tested as the left side of the equation. The second line of the input file contains a single integer number N (1 <= N <= 10), which is the number of right sides of the equation that are to be tested. Each one of the following N lines represents one such formula.

 The input consists of 3 sections: survey description, survey results, and cross table descriptions.   The first line of the input contains the name of the survey, which is at most 100 characters long. Subsequent lines describe all the questions in the survey. On the first line of every question there is a 3-character question code (capital letters and digits only) followed by a space, and followed by the question name, which is at most 80 characters long. Each subsequent line for a question describes one possible answer on the question and starts with a space, followed by a single-character code for the answer (capital letter, digit, or character '.', '*', or '@'), followed by a space and followed by an answer description, which is at most 40 characters long. The list of questions is terminated by the line with a single character '#'. All answer codes are unique within the question, and all question codes are unique within the input file. There are at least 2 and at most 10 possible answers per question and at least 2 and at most 100 questions.   Next lines in the input file describe survey results. Every line contains a character per question (in the order they appear in the input file) that gives the answer code for the corresponding question. The characters follow one another without any delimiters. This section is terminated by the line with a single character '#'. There is at least one line with answers in the section and at most 10000 answers in total (the number of lines times the number of questions).   Next lines in the input describe cross tables that are to be created. Each cross table description occupies one line. That line contains the code for the first question, followed by a space, followed by the different code for the second question, followed by a space, and followed by the cross table name, which is at most 100 characters long. This section is terminated by the line with a single character '#'. There are at most 100 cross table descriptions in the input file.   The input has no trailing spaces on any line. All names do not start or end with a space, but may contain spaces.  

 Input will consist of a series of lines each containing a string representing a code. The entire file will be terminated by a line consisting of a single #. 

 The first line of the input file contains four integer numbers XN, YN, XT, and YT, separated by spaces. They are, correspondingly, width and height of the niche, and width and height of the old tome in inches (1 <= XN, YN, XT, YT <= 1000).   The second line of the input file contains a single integer number N (1 <= N <= 100) that represents the number of the shelves. Then N lines follow. Each line represents a single shelf along with its two supporting pegs, and contains five integer numbers yi, xi, li, x1i, x2i, separated by spaces, where:   ?yi (0 < yi < YN) - the height of the ith shelf above the bottom of the niche in inches.  ?xi (0 <= xi < XN) - the distance between the left end of the ith shelf and the left edge of the niche in inches.  ?li (0 < li <= XN - xi) - the length of the ith shelf in inches.  ?x1i (0 <= x1i <= li/2) - the distance between the left end of the ith shelf and its leftmost supporting peg in inches.  ?x2i (li/2 <= x2i <= li; x1i < x2i) - the distance between the left end of the ith shelf and its rightmost supporting peg in inches.   All shelves are situated on different heights and are properly supported by their pegs. The problem is guaranteed to have a solution for the input data.  

 The input file consists of a single integer N (10 <= N <= 10^9).

 Input consist several case,First line of the each case is an integer N ( 1 < N < 700 ),then follow N pairs of integers. Each pair of integers is separated by one blank and ended by a new-line character. The input ended by N=0.

 The input consists of a set of documents separated by single lines containing only ten dashes, "---------" No line will be longer than 250 characters. No document will be longer than 100 lines. The first document is the search string. The input terminates with two lines of ten dashes in a row.   The input documents will use the full ASCII character set. You must parse each document into a set of terms.   Terms are separated by whitespace in the input document. Comparisons between terms are case-insensitive. Punctuation is removed from terms prior to comparisons, e.g. "don't" becomes "dont" The resulting terms should contain only the characters {[a-z],[0-9]}. A term in the input consisting only of punctuation should be ignored. You may assume the search string and each document will have at least one valid term. 

 Input to this program consists of three parts:   1. The first line will contain a single integer denoting the number of days to be simulated.   2. The second line will contain the DNA rule D as 16 integer values, ordered from D[0] to D[15], separated from one another by one or more blanks. Each integer will be in the range -3...3, inclusive.   3. The remaining twenty lines of input will describe the initial population density in the culture dish. Each line describes one row of squares in the culture dish, and will contain 20 integers in the range 0?, separated from one another by 1 or more blanks

 All input will be positive integers.   The first line of input will indicate the number of data sets.   The first line of each data set will contain 4 integers separated by white-space. In order they are the minimum cost, maximum cost, number of potential features (N) and number of potential customers (M). N and M will be no larger than 20.   The next N lines (one for each feature) indicate the cost of each feature.   The next M lines will contain the following (one line for each customer):  Number of required features Feature number (for each required feature) Total Sales for that customer.  For instance, if a given customer wanted 3 features, number 1,2 and 5 and would provide sales of 50, the line would read: "3 1 2 5 50"   The next data set, if more remain, will begin on the next line. 

 Line 1: X Y  X is the number of columns in the map, Y is the number of rows. Each is a positive integer less than 20.   Line 2-(Y+1):  Each line contains exactly X symbols indicating the contents of that square on the map. The symbols are:  X: building, non-entrance/exit  .: (period) street  {A-O}: letter indicating exit/entrance. Each letter may occur at most once.   Lines (Y+2)-?:  Each line indicates a pedestrian route and specifies a source, destination, and pedestrian load. Source and destination will each be a letter {A-O} with no spaces in between. The load factor will be a nonnegative integer, separated from the destination by whitespace. Source and destination will never be equal. At most 25 routes will be given. There will be a valid path in the map for each requested route.   The file will terminate with the line:  XX 0 

 Your program will input data for different sets of stockbrokers. Each set starts with a line with the number of stockbrokers. Following this is a line for each stockbroker which contains the number of people who they have contact with, who these people are, and the time taken for them to pass the message to each person. The format of each stockbroker line is as follows: The line starts with the number of contacts (n), followed by n pairs of integers, one pair for each contact. Each pair lists first a number referring to the contact (e.g. a '1' means person number one in the set), followed by the time in minutes taken to pass a message to that person. There are no special punctuation symbols or spacing rules.   Each person is numbered 1 through to the number of stockbrokers. The time taken to pass the message on will be between 1 and 10 minutes (inclusive), and the number of contacts will range between 0 and one less than the number of stockbrokers. The number of stockbrokers will range from 1 to 100. The input is terminated by a set of stockbrokers containing 0 (zero) people.   

 The input consists of a number of sentences consisting only of characters p through z and N, C, D, E, and I. Each sentence is ended by a new-line character. The collection of sentences is terminated by the end-of-file character. If necessary, you may assume that each sentence has at most 256 characters and at least 1 character. 

 Input consist multiple case,each case consists of multiple lines. The first line will be an integer n (1 < n < 13) giving the number of straws on the table. Each of the next n lines contain 4 positive integers,x1,y1,x2 and y2, giving the coordinates, (x1,y1),(x2,y2) of the endpoints of a single straw. All coordinates will be less than 100. (Note that the straws will be of varying lengths.) The first straw entered will be known as straw #1, the second as straw #2, and so on. The remaining lines of the current case(except for the final line) will each contain two positive integers, a and b, both between 1 and n, inclusive. You are to determine if straw a can be connected to straw b. When a = 0 = b, the current case is terminated.   When n=0,the input is terminated.   There will be no illegal input and there are no zero-length straws.  

 Each input block contains the height, h (h<=30) on the first line and the width w (w<=30) on the second. A picture of the stacked frames is then given as h strings with w characters each.  Your input may contain multiple blocks of the format described above, without any blank lines in between. All blocks in the input must be processed sequentially.

 The input consists of a number of maps of repeater networks. Each map begins with a line containing the number of repeaters. This is between 1 and 26, and the repeaters are referred to by consecutive upper-case letters of the alphabet starting with A. For example, ten repeaters would have the names A,B,C,...,I and J. A network with zero repeaters indicates the end of input.   Following the number of repeaters is a list of adjacency relationships. Each line has the form:   A:BCDH   which indicates that the repeaters B, C, D and H are adjacent to the repeater A. The first line describes those adjacent to repeater A, the second those adjacent to B, and so on for all of the repeaters. If a repeater is not adjacent to any other, its line has the form   A:   The repeaters are listed in alphabetical order.   Note that the adjacency is a symmetric relationship; if A is adjacent to B, then B is necessarily adjacent to A. Also, since the repeaters lie in a plane, the graph formed by connecting adjacent repeaters does not have any line segments that cross.  

 All guests enter through room 0, the entrance to your facility. Your program accepts a sequence of lines containing integers. The first line consists of two integers: the number of rooms, and the room in which the ET is being held (out of his own free will, of course).   The rest of the input is a sequence of lines consisting of only two integers, specifying where the airlock-doors are located. The first number on these lines specifies the source room, and the second the destination room. Remember: you can pass only from the source room to the destination room.

 The input to your program will consist of octal numbers, one per line, to be converted. Each input number has the form 0.d1d2d3 ... dk, where the di are octal digits (0..7). There is no limit on k.

 The first line of the input file contains the number of test cases in the file. Each test case that follows consists of two lines. The first line of each case contains two integer numbers x and y specifying the starting point of the path. The second line contains a string of variable length. Every letter in the string symbolizes a move of length one along the grid. Only the letters 'W' ("west"), 'E' ("east"), 'N' ("north"), 'S' ("south"), and '.' ("end of path", no move) appear in the string. The end-of-path character ( '.') is immediately followed by the end of the line. 

 The input file contains one random program described as above with one or more random procedures, and one or more requests. The requests are following the program. Each request is a line with one string, which is the name of the requested procedure. The request list ends with a line containing "REQUEST_END" (there is no procedure with a name as "REQUEST_END")

 The input file contains the descriptions of several star maps. Each map starts with a line containing a single integer n, specifying the number of stars in the map (1 <= n < 1000). The following n lines contain three integers each, namely the x- and y-coordinates and the brightness of every star. The larger the value, the brighter the star shines.   The next line contains a single integer m, the number of constellations to follow (1 <= m < 50). Each constellation description starts with a line containing an integer si, the number of stars in constellation i, and a string Ni, the name of the constellation. (Ni will consist of no more than 40 characters and contain no blanks.) The following si lines then contain the coordinates of the constellation, again as x/y-pairs.   A blank line separates the star map from the next map. The input file ends with an empty map (having n = 0), which should not be processed.   N.B.: Since all star coordinates are integer numbers, you can easily rule out any rotated or scaled constellation whose points do not fall on integer coordinates. 

 The first line of the input file contains an integer n which indicates the number of test cases. Each test case consists of three lines containing three integers each. Each of these three line contains the numbers for a single primary direction. From these numbers the set of pieces is generated. 

 The input file contains descriptions of several domino systems. The first line of each description contains two integers: the number n of key dominoes (1 <= n < 500) and the number m of rows between them. The key dominoes are numbered from 1 to n. There is at most one row between any pair of key dominoes and the domino graph is connected, i.e. there is at least one way to get from a domino to any other domino by following a series of domino rows.   The following m lines each contain three integers a, b, and l, stating that there is a row between key dominoes a and b that takes l seconds to fall down from end to end.   Each system is started by tipping over key domino number 1.   The file ends with an empty system (with n = m = 0), which should not be processed. 

 The input file contains several test cases. Each case begins with a line containing an integer n (the number of hooks, 1 <= n < 500) and a real r (the length of the pendulum's string). The following n lines each contain two integers specifying the x- and y-coordinate of the corresponding hook.   The file ends with a case having r = 0, which should not be processed. 

 The input file contains several villa descriptions. Each villa starts with a line containing three integers r, d, and s. r is the number of rooms in the villa, which will be at most 10. d is the number of doors/connections between the rooms and s is the number of light switches in the villa. The rooms are numbered from 1 to r; room number 1 is the hallway, room number r is the bedroom.   This line is followed by d lines containing two integers i and j each, specifying that room i is connected to room j by a door. Then follow s lines containing two integers k and l each, indicating that there is a light switch in room k that controls the light in room l.   A blank line separates the villa description from the next one. The input file ends with a villa having r = d = s = 0, which should not be processed. 

 The input file contains several game situations. Every test case starts with a line containing two integers h and w. These define width and height of the game rectangle, where 2 <= w, h <= 16.   Each of the next h lines contains a string of w characters. Each of these characters is either `x', `o' or `.', depending on the state of the corresponding square.   A blank line separates each game from the next. The input file ends with a game having w = 0 and h = 0. This game should not be processed.

 The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs.   The input consists of integers and defines the configuration of the house. The first line has three integers separated by blanks: the first integer defines the number of rooms, the second the initial room of the cat (the cat's ``home"), and the third integer defines the initial room of the mouse (the mouse's ``home"). Next there are zero or more lines, each with two positive integers separated by a blank. These lines are followed by a line with two -1's separated by a blank. The pairs of positive integers define the cat doors. The pair A B represents the presence of a cat door from room A to room B . Finally there are zero or more lines, each with two positive integers separated by a blank. These pairs of integers define the mouse doors. Here, the pair A B represents the presence of a mouse door from room A to room B . Also end with -1,-1.   The number of rooms is at least one and at most 100. All rooms are numbered consecutively starting at 1. You may assume that all positive integers in the input are legal room numbers.  

 There will be multiple input instances, each instance consists of two positive integers on a line. The first integer represents the numerator of the fraction and the second represents the denominator. In this problem, the numerator will always be less than the denominator and the denominator will be less than 1000. Input terminates when numerator and denominator are both zero. 

 The input file contains at most 100 brackets (characters '(', ')', '[' and ']') that are situated on a single line without any other characters among them.

 The input file consists of a sequence of positive integers, one integer per line. Each integer will have at most 8 digits. The input is terminated by a line containing the number 0.

 The input consists of several test cases. Each test case is given by exactly one line describing one position.  Each line will start with a number n (1 <= n <= 20), the number of integers which are still available. The remainder of this line contains the list of these numbers a1;...;an(2 <= ai <= 20).  The positions described in this way will always be positions which can really occur in the actual Number Game. For example, if 3 is not in the list of allowed numbers, 6 is not in the list, either.  At the end of the input, there will be a line containing only a zero (instead of n); this line should not be processed.

 The input file consists of several blocks of lines. Each block describes one network. In the first line of each block there is the number of places N < 100. Each of the next at most N lines contains the number of a place followed by the numbers of some places to which there is a direct line from this place. These at most N lines completely describe the network, i.e., each direct connection of two places in the network is contained at least in one row. All numbers in one line are separated  by one space. Each block ends with a line containing just 0. The last block has only one line with N = 0; 

 The input consists of a sequence of test cases in the form of integer/tree pairs. Each test case consists of an integer followed by one or more spaces followed by a binary tree formatted as an S-expression as described above. All binary tree S-expressions will be valid, but expressions may be spread over several lines and may contain spaces. There will be one or more test cases in an input file, and input is terminated by end-of-file. 

 Your program is to read from standard input. The first line contains a positive integer N (1 <= N <= 10000). The second line contains the 2N distinct integer code numbers (1 <= code number <= 100000) separated by single spaces. The last line contains a sequence of N region numbers, each of which is 1, 2, 3 or 4.

 The first line of input contains two integers M and N, 1 <= M <= 1000, 1 <= N <= 100, number of pighouses and number of customers. Pig houses are numbered from 1 to M and customers are numbered from 1 to N.  The next line contains M integeres, for each pig-house initial number of pigs. The number of pigs in each pig-house is greater or equal to 0 and less or equal to 1000.  The next N lines contains records about the customers in the following form ( record about the i-th customer is written in the (i+2)-th line):  A K1 K2 ... KA B It means that this customer has key to the pig-houses marked with the numbers K1, K2, ..., KA (sorted nondecreasingly ) and that he wants to buy B pigs. Numbers A and B can be equal to 0.

 The input contains several lines of input. Each line of the input file contains two integers N (0 <= N<= 20000000), M (0 <= M <= N).

 The input consists of several test cases. Each test case starts with a line containing a single integer n (1 <= n <= 100) of available maps. The n following lines describe one map each. Each of these lines contains four numbers x1;y1;x2;y2 (0 <= x1 < x2 <= 100000;0 <= y1 < y2 <= 100000), not necessarily integers. The values (x1; y1) and (x2;y2) are the coordinates of the top-left resp. bottom-right corner of the mapped area.  The input file is terminated by a line containing a single 0. Don't process it.

 Each line in the input will contain an integer (as defined in mathematics) number of any integer base (2..62). You will have to determine what is the smallest possible base of that number for the given conditions. No invalid number will be given as input. The largest size of the input file will be 32KB.

  The first line contains two numbers: F, V.  The following F lines: Each of these lines contains V integers, so that Aij is given as the jth number on the (i+1)st line of the input file.      1 <= F <= 100 where F is the number of the bunches of flowers. The bunches are numbered 1 through F.  F <= V <= 100 where V is the number of vases.  -50 <= Aij <= 50 where Aij is the aesthetic value obtained by putting the flower bunch i into the vase j.  

 The first line of the input contains an integer N, 2 <= N <= 100,000, the number of discs.  The next N lines contain data describing the initial positions of the holes on each disc.  The (i + 1)-th line contains an integer Pi, 1 <= Pi <= 10000000, the initial position of the hole on the i-th disc.

 The first line of the input contains two integers R and C, separated by a single blank character, 1 <= R, S <= 20.  The following R lines contain S characters each. Each line represents one row in the board.

 The first line of the input file contains two integers N and M, 2 <= N <= 3000, 1 <= M <= N-1, the number of vertices in the tree and the number of potential users.  The root of the tree is marked with the number 1, while other transmitters are numbered 2 to N-M and potential users are numbered N-M+1 to N.  The following N-M lines contain data about the transmitters in the following form:  K A1 C1 A2 C2 ... AK CK  Means that a transmitter transmits the signal to K transmitters or users, every one of them described by the pair of numbers A and C, the transmitter or user's number and the cost of transmitting the signal to them.  The last line contains the data about users, containing M integers representing respectively the price every one of them is willing to pay to watch the match.

 The first line contains three integers: U, V and C.  Each of the following V lines contains the integers Hxy for x = 1,...,U. More specifically, Hxy occurs as the x'th number on the (V-y+2)'th input line.  a.1 <= U <= 700, 1 <= V <= 700 where U and V designate the dimensions of the map. More specifically, U is the number of squares in the west-east direction, and V, in the south-north direction.  b.0 <= C <= 10  c.-30,000 <= Hxy <= 30,000 where the integer Hxy is the height of the square at coordinates (x, y), 1 <= x <= U, 1 <= y <= V.  d.The southwest corner square of the map has the coordinates (1,1) and the northeast corner has the coordinates (U,V).

 The first line contains two numbers: The id-number of the source junction and the id-number of the destination junction.  The second line contains two numbers: N, M.  The following N lines contain information on N junctions. The (i+2)’th line of the input file holds information about the junction i : Ci, ric, tiB, tiP where Ci is either ‘B’ or ‘P’, indicating the initial color of the light at the junction i.  Finally, the next M lines contain information on M roads. Each line is of the form: i, j, lij where i and j are the id-numbers of the junctions which are connected by this road .   2 <= N <=300 where N is the number of junctions. The junctions are identified by integers 1 through N. These numbers are called id-numbers.  1 <=M <=14,000 where M is the number of roads.  1 <= lij <= 100 where lij is the time required to move from junction i to j using the road that connects i and j.  1 <= tic <= 100 where tic is the duration of the color c for the light at the junction i. The index c is either B for blue or P for purple.  1 <= ric <= tic where ric is the remaining time for the initial color c at junction i.  The first line contains two numbers: The id-number of the source junction and the id-number of the destination junction.  The second line contains two numbers: N, M.  The following N lines contain information on N junctions. The (i+2)’th line of the input file holds information about the junction i : Ci, ric, tiB, tiP where Ci is either ‘B’ or ‘P’, indicating the initial color of the light at the junction i.  Finally, the next M lines contain information on M roads. Each line is of the form: i, j, lij where i and j are the id-numbers of the junctions which are connected by this road . 

 Your program is to read from standard input. The first line contains one integer: the length of the input string N, 3 <= N <= 5000. The second line contains one string with length N. The string is formed from uppercase letters from 'A' to 'Z', lowercase letters from 'a' to 'z' and digits from '0' to '9'. Uppercase and lowercase letters are to be considered distinct. 

 Your program is to read from standard input. The first line contains two integers: the first is the number of villages V, 1 <= V <= 300, and the second is the number of post offices P, 1 <= P <= 30, P <= V. The second line contains V integers in increasing order. These V integers are the positions of the villages. For each position X it holds that 1 <= X <= 10000.

 Your program is to read from standard input. The first line contains one integer: the number of regions M, 2 <= M <= 200. The second line contains one integer: the number of towns N, 3 <= N <= 250. The third line contains one integer: the number of club members L, 1 <= L <= 30, L <= N. The fourth line contains L distinct integers in increasing order: the labels of the towns where the members live.   After that the input contains 2M lines so that there is a pair of lines for each region: the first two of the 2M lines describe the first region, the following two the second and so on. Of the pair, the first line shows the number of towns I on the border of that region. The second line of the pair contains I integers: the labels of these I towns in some order in which they can be passed when making a trip clockwise along the border of the region, with the following exception. The last region is the "outside region" surrounding all towns and other regions, and for it the order of the labels corresponds to a trip in counterclockwise direction. The order of the regions gives an integer labeling to the regions: the first region has label 1, the second has label 2, and so on. Note that the input includes all regions formed by the towns and great walls, including the "outside region".  

 Your program is to read from standard input. The first line contains the volume V of the solid (1 <= V <= 50). The remaining V lines contain three integers x, y, z, being the coordinate triple of its corner that minimizes x + y + z, each identifying one unit cube of the solid (1 <= x, y, z <= 7).

 Your program is to read from standard input. The first line contains one integer N: the number of rows in the triangle. The following N lines describe the data of the triangle. The number of rows in the triangle is > 1 but <= 100. The numbers in the triangle, all integers, are between 0 and 99. 

 Your program is to read from standard input. The first line contains the number of modules in the north-south direction and the number of modules in the east-west direction. In the following lines each module is described by a number (0 <= p <= 15). This number is the sum of: 1 (= wall to the west), 2 (= wall to the north), 4 (= wall to the east), 8 (= wall to the south). Inner walls are defined twice; a wall to the south in module 1,1 is also indicated as a wall to the north in module 2,1. The castle always has at least two rooms.

 Your program is to read from standard input. First the digit sum of prime numbers and then the digit in the top left-hand corner of the square. The file contains two lines. There will always be a solution to the given test data.

 Your program is to read from standard input. Nine numbers give the start positions of the dials. 0=12 o'clock, 1=3 o'clock, 2=6 o'clock, 3=9 o'clock.

 Your program is to read from standard input. The input contains a number n (n <= 300) telling how many arriving buses have been noted, followed by the arrival times in ascending order. 

 Your program is to read from standard input. The input contains three integers (n, m and k). 

 Your program is to read from standard input. The input consists of four lines. Each line describes one given rectangle by two positive integers: the lengths of the sides of the rectangle. Each side of a rectangle is at least 1 and at most 50.

 Your program is to read from standard input. The first line contains the number b of different kinds of products in the basket (0 <= b <= 5). Each of the next b lines contains three values c, k, and p. The value c is the (unique) product code (1 <= c <= 999). The value k indicates how many items of this product are in the basket (1 <= k <= 5). The value p is the regular price per item (1 <= p <= 999). Notice that all together at most 5*5=25 items can be in the basket. The b+2nd line contains the number s of special offers (0 <= s <= 99). Each of the next s lines describes one offer by giving its structure and its reduced price. The first number n on such a line is the number of different kinds of products that are part of the offer (1 <= n <= 5). The next n pairs of numbers (c,k) indicate that k items (1 <= k <= 5) with product code c (1 <= c <= 999) are involved in the offer. The last number p on the line stands for the reduced price (1 <= p <= 9999). The reduced price of an offer is less than the sum of the regular prices. 

 Your program is to read from standard input. The first line contains a string of lowercase letters (from 'a' to 'z'): the letters collected. The string consists of at least 3 and at most 7 letters in arbitrary order.  From the second line, there is a dictionary consisting of at most 40,000 lines. At the end of the dictionary is a line with a single period ('.'). Each of the other lines contains a string of at least 3 and at most 7 lowercase letters. The dictionary is sorted alphabetically and contains no duplicates.  

 Input contains several test cases. Each test case consists of a single line of input, containing a sequence of chromatic notes separated by white space. No input line exceeds 1000 characters. The last line of input contains the word "END". 

 Your program is to read from standard input. The input describes a well-formed course with at most 50 points and at most 100 arrows. The first N lines contain the endpoints of the arrows that leave from the points 0 through N-1 respectively. Each of these lines ends with the number -2. The last line contains the number -1.

 Your program is to read from standard input. The first line contains the numbers n, k, and m (1 <= n,k,m <= 33). On the second line is a number s (0 <= s <= 100). The following s lines each contain some symbol in BC(n,k,m), represented by '0's and '1's as in Figure 2. 

 Your program is to read from standard input.  First line - The integer A indicating the minimum pattern length.  Second line - The integer B indicating the maximum pattern length.  Third line - The integer N indicating the number of distinct frequencies.  Fourth line - A sequence of 0 and 1 characters, terminated by a 2 character.   The input may have up to 2 megabytes. The parameters A, B and N are constrained by:  0 < N <= 20  0 < A <= B <= 12  

 Your program is to read from standard input. The first two lines contain, respectively, the width W and the height H of a sky map. The sky map is given in the following H lines, of W characters each.   0 <= W (width of the sky map) <= 100  0 <= H (height of the sky map) <= 100  0 <= Number of clusters <= 500  0 <= Number of non-similar clusters <= 26 (a..z)  1 <= Number of stars per cluster <= 160

 Your program is to read from standard input. The input contains four lines, describing the number N of lamps available, the number C of button presses, and the state of some of the lamps in the final configuration.  The first line contains the number N and the second line the final value of counter C. The third line lists the lamp numbers you are informed to be ON in the final configuration, separated by one space and terminated by the integer -1. The fourth line lists the lamp numbers you are informed to be OFF in the final configuration, separated by one space and terminated by the integer -1.   The parameters N and C are constrained by:  10 <= N <= 100  1 <= C <= 10000  The number of lamps you are informed to be ON, in the final configuration, is less than or equal to 2.The number of lamps you are informed to be OFF, in the final configuration, is less than or equal to 2.

 Your program is to read from standard input. The first line contains the number of rectangles pasted on the wall. In each of the subsequent lines, one can find the integer coordinates of the lower left vertex and the upper right vertex of each rectangle. The values of those coordinates are given as ordered pairs consisting of an x-coordinate followed by a y-coordinate.   0 <= number of rectangles < 5000  All coordinates are in the range [-10000,10000] and any existing rectangle has a positive area.

 Your program is to read from standard input. The input contains the initial board configuration, encoded as a character string. The string contains a sequence of up to 64 distinct board positions, being the first one the position of the king and the remaining ones those of the knights. Each position is a letter-digit pair. The letter indicates the horizontal board coordinate, the digit indicates the vertical board coordinate.   0 <= number of knights <= 63

 Your program is to read from standard input. The input describes a polygon with N vertices. It contains two lines. On the first line is the number N. The second line contains the labels of edges 1, ..., N, interleaved with the vertices' labels (first that of the vertex between edges 1 and 2, then that of the vertex between edges 2 and 3, and so on, until that of the vertex between edges N and 1), all separated by one space. An edge label is either the letter t (representing +) or the letter x (representing *).   3 <= N <= 50  For any sequence of moves, vertex labels are in the range [-32768,32767].  

 Your program reads from standard input. The first line contains the number of jobs N, 1 <= N <= 10000. The second line contains the batch setup time S which is an integer, 0 <= S <= 50. The following N lines contain information about the jobs 1, 2,..., N in that order as follows. First on each of these lines is an integer Ti, 1 <= Ti <= 100, the processing time of the job. Following that, there is an integer Fi, 1 <= Fi <= 100, the cost factor of the job.

 Your program is to read from standard input. The first line contains one positive integer N, 2 <= N <= 500, the number of bus stops. Each of the remaining N lines contains the x-coordinate followed by the y-coordinate of a bus stop. The x- and y-coordinates are positive integers <= 5000. No two bus stops are at the same location.

 第1行包含一个整数n。第2行包含一个整数M。第3行到第n+2行，每行包含两个整数，分别表示ki和pi。两个整数之间用一个空格隔开。第3行的数据对应i=1，第n+2行的数据对应i=n。

 第一行是两个整数N和K，以一个空格分隔。  以下K行每行是三个正整数 D，X，Y，两数之间用一个空格隔开，其中D表示说法的种类。   若D=1，则表示X和Y是同类。   若D=2，则表示X吃Y。

 输入文件中只有一个正整数a，其中 1 <= a <= 60000。

 仅一行，含有两个长度为6的数，前者为初始密码，后者为目标密码，两个密码之间用一个空格隔开。

 第一行包含两个由空格分割开的正整数，分别表示N和M；  接下来的N行，每一行含有连续的M个字符('P'或者'H')，中间没有空格。按顺序表示地图中每一行的数据。N <= 100；M <= 10。

 The input consists of a sequence of values, one per line, where each value represents the number of cities. 

 共一行，4个整数L1，L2，L3，D。相邻两个数之间用一个空格分隔。  （0 <= L1 <= 10，0 <= L2 <= 10，0 <= L3 <= 10，0 <= D <= 30）

 The input consists of several sets of cubes for which the volume of their intersections must be computed. The first line of each set contains a number (from 2 to 1000) which indicates the number of cubes which follow, one cube per line. Each line which describes a cube contains four integers. The first three integers are the x, y, and z coordinates of the corner of a cube, and the fourth integer is the positive distance which the cube extends in each of the three directions (parallel to the x, y, and z axes) from that corner.   Following the data for the first set of cubes will be a number which indicates how many cubes are in a second set, followed by the cube descriptions for the second set, again one per line. Following this will be a third set, and so on.A number =0 indicate the end of input.

 第1行为整数n（2 <= n <= 50）和m（0 <= m <= n）。以下n行依次为木板上从上至下n行钉子的信息，每行中'*'表示钉子还在，'.'表示钉子被拔去，注意在这n行中空格符可能出现在任何位置。

 有两行，第一行为N（N <= 10000），表示待制作的蛋糕的体积为Nπ；第二行为M(M <= 20)，表示蛋糕的层数为M。

 The first line of the input contains the number of test cases. Each test case is described by 6 different positive integers on a single line: the values of the coins, in ascending order. The first number is always 1. The last number is less than 100.  

 第1行为一个整数n(1 < n < 15)。  第2行至第9行每行为8个小于100的非负整数，表示棋盘上相应格子的分值。每行相邻两数之间用一个空格分隔。  

 第1行是一个整数N（2 <= N <= 1000），表示单整点集V中点的个数；  以下N行中，第i行(1 <= i <= N)有三个整数，Xi, Yi, Ci依次表示第i个点的横坐标，纵坐标和权。同一行相邻两数之间用一个空格分隔。-10^6 <= Xi, Yi <= 10^6；-100 <= Ci <= 100。  

 第一行是一个数N，表示总内存单元数（即地址范围从0到N-1）。从第二行开始每行描述一个进程的三个整数T、M、P（M <= N）。最后一行用三个0表示结束。  数据已按T从小到大排序。  输入文件最多10000行，且所有数据都小于109。  输入文件中同一行相邻两项之间用一个或多个空格隔开。

 Your program is to read from standard input. The first line contains the value of N. Each of the following N input lines contains a code word which is a sequence of letters without any blank in between. Integers 1 through N serve as the id-numbers for the code words. The last line contains the text, which consists of a sequence of letters (terminated by an end-of-line character followed by the end-of-file symbol).   

 The input is read from standard input as integers and the answers to the queries are written to standard output as integers. The input is encoded as follows. Each input comes on a separate line, and consists of one instruction integer and a number of parameter integers according to the following table.      The values will always be in range, so there is no need to check them. In particular, if A is negative, it can be assumed that it will not reduce the square value below zero. The indexing starts at 0, e.g. for a table of size 4 * 4, we have 0 <= X <= 3 and 0 <= Y <= 3.   Table size: 1 * 1 <= S * S <= 1024 * 1024  Cell value V at any time: 0 <= V <= 32767  Update amount: -32768 <= A <= 32767  No of instructions in input: 3 <= U <= 60002  Maximum number of phones in the whole table: M= 2^30  

 Input contains a positive even integer N not greater than 10. It's an amount of digits in a ticket number.

 Your program is to read from standard input. The first line contains a string with one character: a 'W' or an 'N'. If the first line contains a 'W', then the second line contains a valid 25-language word, that is, a string with 25 characters. If the first line contains an 'N', then the second line contains the ordinal number of an existing 25-language word. 

 Your program is to read from standard input. The first line contains one integer R: the number of rows with containers in them. The following R lines contain information about rows 1,...,R starting from the top as follows. First on each of those lines is an integer M: the number of containers in that row. Following that, there are M integers on the line: the identification numbers of the containers in the row starting from the left. All container identification numbers I satisfy 1 <= I <= 50. Let N be the number of containers in the depot, then 1 <= N <= 13.

 Each of two input lines contains 8 integers a1, a2, ..., a8 separated by single spaces and describes one configuration of pieces on the chessboard. Integers a2j-1 and a2j (1 <= j <= 4) describe the position of one piece -- the row number and the column number respectively. 

 The first two input lines are the integers, smaller than 100,   n - the number of lines in the map, and   m - the number of characters per line in the map.   The following n lines, each with m characters, have only two valid character values:   # - (sharp) representing a block of a wall;   . - (dot) representing part of the floor.   

 Input will consist of a series of scenarios.   Each scenario will consist of a position and a heading and will be followed by a series of directions (commands), each on a separate line. If either of the roads involved is one of the central roads (A0, S0), they will be labelled N or E as appropriate. Note that you may assume that you have just left the intersection specified. The GO < n > command means that you pass through < n > intersections.   Each scenario will be terminated by a line consisting of the word STOP.   The file will be terminated by a line consisting of the word END only.    Input data will follow the format shown below, except that more than one space may occur where only one is shown. No line will be longer than 80 characters.  

 The first line of input consists of two numbers, N and NC, separated by exactly one space. This is followed by the text where the search takes place. You may assume that the maximum number of substrings formed by the possible set of characters does not exceed 16 Millions. 

 The first line of the input contains an integer n (1 <= n <= 50000) -- the number of intervals. The following n lines describe the intervals. The (i+1)-th line of the input contains three integers ai, bi and ci separated by single spaces and such that 0 <= ai <= bi <= 50000 and 1 <= ci <= bi - ai+1. 

 The first line of the input contains two integers n and k separated by a single space. Integer n (2 ≤ n ≤ 300) is the number of members in a family. Family members are numbered arbitrarily from 1 to n. Integer k (0 ≤ k ≤ n-2) is the number of monsters that do have parents (all the other monsters were created by gods and are completely unrelated to each other).   Each of the next k lines contains three different integers a, b, c separated by single spaces. The triple a, b, c means that the monster a is a child of monsters b and c.   The next input line contains an integer m (1 <= m <= n 2) -- the number of pairs of monsters on the list. Each of the next m lines contains two integers separated by a single space -- these are the numbers of two monsters.   You may assume that no monster is its own ancestor. You should not make any additional assumptions on the input data. In particular, you should not assume that there exists any valid sex assignment.  

 The first line of the input contains an integer n (2 <= n <= 100000). The following lines contain n timetables for cities 1, 2, ..., n respectively.   The first line of the timetable description contains only one integer m. Each of the following m lines corresponds to one position in the timetable and contains: departure time A, arrival time B (A < B) and destination city number t (1 <= t <= n) separated by single spaces. Departure time A and arrival time B are written in format hh:mm, where hh are two digits representing full hours (00 <= hh <= 23) and mm are two digits representing minutes (00 <= mm <= 59). Positions in the timetable are given in non-decreasing order according to the departure times. The number of all positions in all timetables does not exceed 1000000.  

 Your program should simulate one game of pinball. There are several input lines that describe the game. The first line gives integers m and n, separated by a space. This describes a cartesian grid where 1 <= x <= m , 1 <= y <= n and on which the game is ``played''. It will be the case that 2 < m < 51 and 2 < n < 51. The next line gives the integer cost for hitting a wall. The next line gives the number of bumpers, an integer p >= 0 . The next p lines give the x position, y position, value, and cost, of each bumper, as four integers per line separated by space(s). The x and y positions of all bumpers will be in the range of the grid. The value and cost may be any integer (i.e., they may be negative; a negative cost adds lifetime to a ball that hits the bumper). The remaining lines of the file represent the balls. Each line represents one ball, and contains four integers separated by space(s): the initial x and y position of the ball, the direction of movement, and its lifetime. The position will be in range (and not on top of any bumper or wall). The direction will be one of four values: 0 for increasing x (right), 1 for increasing y (up), 2 for decreasing x (left), and 3 for decreasing y (down). The lifetime will be some positive integer. 

 The first line of input consists of three positive numbers, the number of lines, 0 < L <= 1000, the number of columns, 0 < C <= 1000, and the number of words to be found, 0 < W <= 1000. The following L input lines, each one of size C characters, contain the word puzzle. Then at last the W words are input one per line. 

 In the first line there are two natural numbers n, m, where n is the number of servers in the network (1 <= n <= 30000) and m is the number of wires (1 <= m <= 5n)). The numbers are separated by single space.   In the next n lines the ranks of the servers are given. Line i contains one integer ri (1 <= ri <= 10) -- the rank of i-th server.   In the following m lines the wires are described. Each wire is described by three numbers a, b, t (11 <= t <= 1000, 1 <= a, b <= n, a â‰  b), where a and b are numbers of the servers connected by the wire and t is the transmission time of the wire in milliseconds.  

 The input will consist of a series of pairs of integers i and j, one pair of integers per line. All integers will be less than 10,000 and greater than 0.   You should process all pairs of integers and for each pair determine the maximum cycle length over all integers between and including i and j.  

 The input begins with an integer n on a line by itself representing the number of blocks in the block world. You may assume that 0 < n < 25.  The number of blocks is followed by a sequence of block commands, one command per line. Your program should process all commands until the quit command is encountered.   You may assume that all commands will be of the form specified above. There will be no syntactically incorrect commands. 

 The first line of input will contain an integer representing the year (in the range 1901 to 1999). This will be followed by a series of lines representing anniversaries or days for which the service is requested.   An anniversary line will consist of the letter `A'; three integer numbers (D, M, P) representing the date, the month and the importance of the event; and a string describing the event, all separated by one or more spaces. P will be a number between 1 and 7 (both inclusive) and represents the number of days before the event that the reminder service should start. The string describing the event will always be present and will start at the first non-blank character after the priority.   A date line will consist of the letter `D' and the date and month as above.   All anniversary lines will precede any date lines. No line will be longer than 255 characters in total. The file will be terminated by a line consisting of a single #.  

 Input will consist of a series of scenarios. Data for each scenario will consist of a series of integers representing the cycle times of the traffic lights, possibly spread over many lines, with no line being longer than 100 characters. Each number represents the cycle time of a single signal. The cycle time is the time that traffic may move in one direction; note that the last 5 seconds of a green cycle is actually orange. Thus the number 25 means a signal that (for a particular direction) will spend 20 seconds green, 5 seconds orange and 25 seconds red. Cycle times will not be less than 10 seconds, nor more than 90 seconds. There will always be at least two signals in a scenario and never more than 100. Each scenario will be terminated by a zero (0). The file will be terminated by a line consisting of three zeroes (0 0 0). 

 Input will consist of a series of lines, each line containing the upper and lower estimates of the number of eligible people (both numbers inclusive). The file will be terminated by a line containing two zeroes (0 0). 

 Input will consist of a series of lines, each line consisting of an apparent Roman sum, i.e. a valid Roman number, a plus sign (+), another valid Roman number, an equal sign (=) and another valid Roman number. No Roman number will contain more than 9 letters. The file will be terminated by a line consisting of a single #. 

 Input data to the program specifies the order in which cards are dealt from the pack. The input contains pairs of lines, each line containing 26 cards separated by single space characters. The final line of the input file contains a # as its first character. Cards are represented as a two character code. The first character is the face-value (A=Ace, 2-9, T=10, J=Jack, Q=Queen, K=King) and the second character is the suit (C=Clubs, D=Diamonds, H=Hearts, S=Spades). 

 Input lines will consist of the charging step (upper case letter 'A'..'E'), the number called (a string of 7 digits and a hyphen in the approved format) and the start and end times of the call, all separated by exactly one blank. Times are recorded as hours and minutes in the 24 hour clock, separated by one blank and with two digits for each number. Input will be terminated by a line consisting of a single #. 

 There is no input file for this problem.

 The first line of input contains a single positive integer. This is the number of lines that follow. Each of the following lines contains a single integer between 5 and 100, inclusive, which is the number of cells n.  

 The input data file consists of datasets for one or more games. A blank line marks the beginning of the next dataset (game). The line after the blank line contains the secret word. The remaining lines in the dataset represent the contestant's guesses; there may be too few or too many guesses than are necessary to guess the secret word. The secret word will contain exactly five upper case letters. The contestantæŠ¯ guesses, however, have to be checked for validity: valid guesses consist of exactly five upper case letters. Input is terminated by a dataset with the secret word: "LINGO" (that is, game play is stopped at that point, the program terminates, and no further guessing occurs).  

 The first line of input contains a single positive integer. This is the number of lines that follow. Each of the following lines will have a (decimal) input base followed by a (decimal) output base followed by a number expressed in the input base. Both the input base and the output base will be in the range from 2 to 62. That is (in decimal) A = 10, B = 11, ..., Z = 35, a = 36, b = 37, ..., z = 61 (0-9 have their usual meanings).  

 Each case of input is specified by a single line. Each line contains a string of uppercase letters. Each string has at least one but no more than 150 characters. The input is terminated by the end of file.

 Input consists of a sequence of positive integers, one per line ending with a 0 (zero) indicating the end.  

 The first line of the input is a positive integer n which is the number of puzzles that follow. Each puzzle will be five lines, each of which has six 0 or 1 separated by one or more spaces. A 0 indicates that the light is off, while a 1 indicates that the light is on initially.

 Input consists of a single line consisting of an integer value N representing the number of datasets that follow. Each dataset consists of two lines. The first line is the sample string that contains at least one of each letter (or space) in  the alphabet. The second line is the binary encoding of the sample string. Note: Sample strings may only contain upper case letters and spaces.  

 The input consists of a sequence of problems. Each problem begins with the problem number on a line by itself.The end of the data is indicated by a problem number of 0. Following the problem number line will be nine lines describing the pieces. Each of these lines begins with the piece number (1 through 9) followed by the picture on the top, right side, bottom and left side of the piece, in that order and separated by spaces. The picture halves are BL,BR, CL, CR, KL, KR, PL and PR. BL matches with BR, CL matches with CR, KL matches with KR and PL matches with PR. (For example, BL is the left half and BR is the right half of the picture designated B)  

 The first line of the input is a positive integer n which is the number of triangle datasets that follow. Each triangle dataset consists of four lines. The first line has the x and y coordinates of vertex A, the second line has the x and y coordinates of vertex B and the third line has the x and y coordinates of vertex C. The last line has the angle θin degrees between the line through X and Y and the line through A and B.

 The first line of the input contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains a single integer n (1 <= n <= 100), the number of given strings, followed by n lines, each representing one string of minimum length 1 and maximum length 100. There is no extra white space before and after a string. 

 The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test data contains two integers n (1 <= n <= 100) and k (1 <= k <= 100) which are the number of regions and the number of robots, respectively. Following the first line, there are n lines each describing one region in the following way: an arbitrary non-negative integer, which is the unique identification number of the region, the number of neighbors of that region (m), followed by a sequence of m numbers corresponding to identification numbers of the neighboring regions. The last line of the test case contains k integers which are the id numbers of the initial regions of robots.

 The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains an integer n (1 <= n <= 1000) which is the number of remaining spikes. Next, there are n lines, one line per spike, each containing a pair of integers which are x and y coordinates of the spike.

 The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. Each test case consists of two lines, each containing a domain pattern. Each domain pattern is at most 255 characters long, and does not include any leading or trailing blank characters. 

 The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains two integers n (1 <= n <= 100), the number of walls, and k (0 <= k <= 100), the maximum number of walls that the wall-passer can pass through, respectively. After the first line, there are n lines each containing two (x, y) pairs representing coordinates of the two endpoints of a wall. Coordinates are non-negative integers less than or equal to 100. The upper-left of the grid is assumed to have coordinates (0, 0). The second sample test case below corresponds to the land given in Figure 1.  

 The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case consists of two integers k (1 <= k <= 26), the number of different letters, and p (1 <= p <= 10), the number of instances of each letter. Followed by the first line, there are k lines, one for each letter, each containing p pairs of integers (xi, yi) for 1 <= i <= p. A pair indicates coordinates of the cell on the paper where one instance of the letter is written. The coordinates of the upper left cell of the paper is assumed to be (1,1). Coordinates are positive integers less than or equal to 1,000,000. You may assume that no cell contains more than one letter.  

 The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test data are two integers n (1 <= n <= 10000) and g (1 <= g <= 15) which are the number of microfiches and the number of bits, respectively. Following the first line, there are n lines each containing the binary representation of a g-bit integer, with no leading or trailing spaces. The desired microfiche is the first one appearing in the test case.  

 The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains two integers: N (1 <= N <= 10), the number of rows of the bricks, and M (1 <= M <= 10), the number of bricks in the each row. The brick (i, j) is the jth brick on the ith row counting from left to right. The rows are counted from 1 to N starting from the side of the street that the participant starts from (Figure 1). Note that for boundary bricks, the adjacent bricks may be less than 6, which is the number of adjacent bricks for the interior bricks. Followed by the first line, there will be N lines, each containing a string of length M, consisting of upper-case letters 'H' and 'C'. A 'C' at position j in the ith string means that the brick (i, j) is cold at time 0, and an 'H' means the brick is hot at that time.      

 There will be multiple problem instances. Each problem instance will be of the form   n k t1 t2 t3 . . . tn   where n (2 <= n <= 30) is the number of classmates, numbered 1 through n clockwise around the circle,k (> 1) is the classmate to whom classmate 1 initially tosses the ball, and ti (i = 1, 2, . . . , n) are eacheither L or R, indicating the initial direction thought by classmate i. (n = 0 indicates end of input.)  

 Input will consist of multiple problem instances. The first line will contain a positive integer indicating the number of problem instances to follow. The first line of each problem instance will contain four integers: n m k l, where n, m and k are as described above, with 1 <= n, m, k <= 30, and l is the number of independent monarchies which the empire is being divided into. Following this will be l lines defining the monarchies. Each will have the form p d1 d2 d3 . . . dp, where p is the number of dominions making up the monarchy (1 <= p <= 20), and d1, . . . , dp are the dominions. The monarchies are listed in the order in which they will secede from the empire.  

 Input consists of one to 100 data sets, one per line, followed by a final line containing only 0. Each data set consists of four integers separated by blanks in the form  n x1 x2 y  which represents H n and the segment from (x1/2 n, y/2 n) to (x2/2 n, y/2 n), where 0 < n < 31, x1 < x2, and each of x1, x2, and y lie in the range 0 to 2 n, inclusive.  

 The first line contains an integer N: the number of schools in the network (2 <= N <= 100). The schools are identified by the first N positive integers. Each of the next N lines describes a list of receivers. The line i+1 contains the identifiers of the receivers of school i. Each list ends with a 0. An empty list contains a 0 alone in the line.

 The input consists of a sequence of one or more postal routes. A route is composed of a sequence of street names (strings), one per line, and is terminated by the string ``deadend'' which is NOT part of the route. The first and last letters of each street name specify the two intersections for that street, the length of the street name indicates the cost of traversing the street. All street names will consist of lowercase alphabetic characters.    For example, the name foo indicates a street with intersections f and o of length 3, and the name computer indicates a street with intersections c and r of length 8. No street name will have the same first and last letter and there will be at most one street directly connecting any two intersections. As specified, the number of intersections with odd degree in a postal route will be at most two. In each postal route there will be a path between all intersections, i.e., the intersections are connected.  

 The input file consists of one or more conversion tables. You must solve the arbitrage problem for each of the tables in the input file.  Each table is preceded by an integer n on a line by itself giving the dimensions of the table. The maximum dimension is 20; the minimum dimension is 2.  The table then follows in row major order but with the diagonal elements of the table missing (these are assumed to have value 1.0). Thus the first row of the table represents the conversion rates between country 1 and n-1 other countries, i.e., the amount of currency of country i ( 2 <= i <= n) that can be purchased with one unit of the currency of country 1.  Thus each table consists of n+1 lines in the input file: 1 line containing n and n lines representing the conversion table.  

 Input will consist of multiple test cases. Each case will consist of one line, containing a string of digits of maximum length 80. A line consisting of a single 0 terminates input.  

 The input file contains one or more contests followed by a line containing only zero that signals the end of the file. Each contest begins with a line containing a positive integer c no greater than 20 indicating the number of teams in the contest, and is followed by c lines that contain a team name and the solution times for seven problems, separated by spaces. Team names consist of between one and ten letters. All team names within a contest are unique. Times are nonnegative integers no greater than 500.   As described in the Notes to Teams, teams are ranked first by greatest number of problems solved, then by least total time, then by least geometric mean of all nonzero times. Teams that are still tied are given the same numeric ranking and are listed in alphabetical order, using case-sensitive string comparison. The numeric ranking for a team is always one more than the number of teams ranked ahead of (not tied with) that team. For this problem all geometric means will be rounded to an integer as described below, and only the rounded value will be used when computing rankings and displaying results.   If all times are zero, then the geometric mean is also zero. Otherwise, if there are n nonzero times t1, ..., tn, then the geometric mean is defined to be   exp ((ln t1 + ln t2 + ... + ln tn) / n)   where exp x means e x and ln x means the natural logarithm of x. (There are other mathematically equivalent definitions of the geometric mean, but they may produce slightly different answers due to roundoff and/or overflow problems. Use this definition to get the same answers as the judges.) After computing the geometric mean, round it to an integer by adding 0.5 and truncating any fractional digits. (C/C++ and Java automatically truncate fractions when casting a floating-point type to an integral type. In Pascal use the trunc function.)  

 Input will consist of multiple problem instances. Each instance will consist of a line of the form  m s1 s2  indicating that the trees are m-ary trees, s1 is the pre-order traversal and s2 is the post-order traversal.All traversal strings will consist of lowercase alphabetic characters. For all input instances, 1 <= m <= 20 and the length of s1 and s2 will be between 1 and 26 inclusive. If the length of s1 is k (which is the same as the length of s2, of course), the first k letters of the alphabet will be used in the strings. An input line of 0 will terminate the input.  

 There will be multiple input instances. The input for each instance consists of three lines. The first line will contain a positive integer n < 8, indicating there are 2 n players in the tournament, numbered 1 through 2 n, paired in the manner indicated above. A value of n = 0 indicates end of input. The next line will contain the results of each round of the tournament (listed left-to-right) starting with the 1st round. For example, the tournament above would be given by  1 3 5 8 1 8 1  The final line of input for each instance will be a positive integer m followed by integers k1, ..., km, where each ki is a player in the field.  

 Input will consist of a set of scenarios. Each scenario consists of a positive integer n, the side length of the plug and socket (less than or equal to 100) on a line by itself, followed by a positive integer m (less than or equal to n 2) on a line by itself, followed by m lines, each containing a pair of positive integers in the range 1, . . . , n 2. You may assume that no two pairs will have either a common first element or a common second element. The first integer represents a pin position in the plug, the second is a hole position in the socket. The final scenario is followed by 0 on a line by itself.  

 The input consists of a number of cases. Each case is specified by one line containing two integers G and L, separated by one space. The end of input is specified by a line in which G = L = 0.  

 Input will consist of multiple problem instances. Each instance will start with an integer n indicating the number of rows in the display. The next line will contain n(n + 1)/2 letters of the alphabet (all lowercase) which are to be stored in the display row-wise, starting from the top. For example, the display above would be specified as  4  abccddadca  The value of n will be between 1 and 12, inclusive. A line with a single 0 will terminate input.  

 Input consists of one or more test cases. Each test case contains the number of guests N followed by meatballs ordered by each guest, from guest 1 to guest N. The end of the input is a line with a single zero.  

 Input consists of one or more lines containing a positive integer target less than twelve million, a space, then at least five and at most twelve distinct uppercase letters. The last line will contain a target of zero and the letters END; this signals the end of the input. 

 The input consists of data for one or more oil fields, followed by a line containing 0 0 which signals the end of the input. Data for each oil field consists of one or more pairs of positive integers, one pair per line, representing the positions of oil wells in the field. The pair -1 -1 indicates the end of the data for a field.  

 The input consists of data for one or more salons, followed by a line containing the number 0 that signals the end of the input. Data for each salon is a single line containing a positive integer, representing the number of tanning beds in the salon, followed by a space, followed by a sequence of uppercase letters. Letters in the sequence occur in pairs. The first occurrence indicates the arrival of a customer, the second indicates the departure of that same customer. No letter will occur in more than one pair. Customers who leave without tanning always depart before customers who are currently tanning. There are at most 20 beds per salon.  

 The input consists of one to 100 data sets, followed by a final line containing only 0. Each data set starts with a line containing only a number n, which is the number of villages, 1 < n < 27, and the villages are labeled with the first n letters of the alphabet, capitalized. Each data set is completed with n-1 lines that start with village labels in alphabetical order. There is no line for the last village. Each line for a village starts with the village label followed by a number, k, of roads from this village to villages with labels later in the alphabet. If k is greater than 0, the line continues with data for each of the k roads. The data for each road is the village label for the other end of the road followed by the monthly maintenance cost in aacms for the road. Maintenance costs will be positive integers less than 100. All data fields in the row are separated by single blanks. The road network will always allow travel between all the villages. The network will never have more than 75 roads. No village will have more than 15 roads going to other villages (before or after in the alphabet). In the sample input below, the first data set goes with the map above.  

 The first line of the input contains a single positive integer indicating the number of runs. For each run, the input is as follows:     A line with a single positive integer n, the number of trains in the timetable (n <= 100).   n lines describing the timetable. Each line describes one train, stating its departure station x, the time of departure tx, its destination station y (x != y), the time of arrival ty (tx < ty) and its probability of cancellation p.Stations are identified by capital letters in the range 'A' . . . 'L'. Times are in the format hh:mm with 00 <= hh < 24 and 00 <= mm < 60. The probability p is a decimal real number with 0.0 <= p < 1.0. Input elements are separated by spaces.   A line with a departure station a, earliest departure time ta, destination station b (a != b) and desired arrival time tb (ta < tb). Station identifiers and times are like those in the timetable.  

 The first line of the input contains one positive number: the number of situations in which a position must be determined. Following are two lines per situation, describing the two marker objects. Each marker object is described by a line containing three integer numbers:   the x-coordinate of the object on the map (0 <= x <= 100);  the x-axis runs West-to-East on the map, with increasing values towards the East.   the y-coordinate of the object on the map (0 <= y <= 100);  the y-axis runs South-to-North on the map, with increasing values towards the North.   the direction d of the object in degrees (0 <= d <= 360);  with 0 degree = North, 90 degree = East, 180 degree = South, and so on.  To keep the position calculations accurate, Hansel makes sure that the directions of the two  objects are not exactly equal, and do not differ by exactly 180 degree.

 The input contains several floors. The first line of the input gives the number of floors.  Each floor is described in several lines. The first line contains two positive integers: the length and width of the floor, in millimeters. A floor is at most 40 000 mm long or wide. The next line contains a single number: the number t of tiles (1 <= t <= 100). The following t lines each contain the description of a tile. A tile is given as four integers:  xl yl xh yh  where (xl, yl) are the coordinates of the lower left corner of the tile, and (xh, yh) are the coordinates of the upper rightmost corner of the tile. A tile always has a positive area. The order of the coordinates of the floor and those of the tile coincide, of course.  You may assume that the tiles are mutually disjoint, and cover the floor, the whole floor, and nothing but the floor.  

 The input consists of several words. The first line contains a number giving the number of words to follow. Each following line contains one word. A word consists of uppercase or lowercase letters from A to Z. Uppercase and lowercase letters are to be considered different. The length of each word is less than 13.

 The input includes several cases. For each case, the first line contains the number of farms, N (3 <= N <= 100). The following lines contain the N x N conectivity matrix, where each element shows the distance from on farm to another. Logically, they are N lines of N space-separated integers. Physically, they are limited in length to 80 characters, so some lines continue onto others. Of course, the diagonal will be 0, since the distance from farm i to itself is not interesting for this problem.

 The first line of the input contains a single positive integer n, specifying the number of test scenarios to follow. Each test scenario begins with a line containing an integer m, the number of obstacles in the park (2 < m < 100). The next line contains the coordinates of the m obstacles,in the order x1 y1 x2 y2 x3 y3 . . . . All coordinates are integers in the range [0, 1000]. Each scenario has at least three obstacles that are not on a straight line, and no two obstacles have the same coordinates.  

 The first line of the input contains the number of test cases. Each test case starts with a line containing the number of categories c (1<=c<=100). Then, c lines follow, each with two numbers ai and pi. The first of these numbers is the number of pearls ai needed in a class (1 <= ai <= 1000).  The second number is the price per pearl pi in that class (1 <= pi <= 1000). The qualities of the classes (and so the prices) are given in ascending order. All numbers in the input are integers.  

 The input starts with a single integer T on a separate line, denoting the number of test cases that follow. Next, for each of the T test cases, three lines follow:   The number of different characters in the file (2 <= Z <= 20);   The number N, denoting the 'arity' of the Huffman tree (2 <= N <= 10);   A string representing the header of the received message; each character will be a digit in the range [0, (N -1)]. This string will contain less than 200 characters.  Note: Although rare, it is possible for a header to have multiple interpretations (e.g., the header '010011101100' with Z = 5 and N = 2). It is guaranteed that all cases in the test input have a unique solution.  

 The input contains several floors. The first line of the input gives the number of floors. Each floor is described in several lines. The first line contains two positive integers: the length and width of the floor, in millimeters. A floor is at most 40 000 mm long or wide. The next line contains a single number: the number t of tiles (1 <= t <= 100). The following t lines each contain the description of a tile. A tile is given as four integers:  xl yl xh yh  where (xl, yl) are the coordinates of the lower left corner of the tile, and (xh, yh) are the coordinates of the upper rightmost corner of the tile. A tile always has a positive area. The order of the coordinates of the floor and those of the tile coincide, of course.  

 The input consists of a series of scene descriptions. Each description starts with a line containing the number n (n <= 25) of spheres in the scene. The following n lines contain three integers xi, yi, ri each, where (xi, yi) is the center, and ri > 0 is the radius of the i-th sphere. Following this is a line containing four integers x, y, dx, dy, which describe the ray. The ray originates from the point (x,y) and initially points in the direction (dx, dy). At least one of dx and dy will be non-zero.   The spheres will be disjoint and non-touching. The ray will not start within a sphere, and never touch a sphere tangentially.   A test case starting with n = 0 terminates the input. This case should not be processed.  

 The input is from the standard input. Each data set in the input has the following format:     the maximum cost of the processes   the length of the removal list   the removal list - the list of ordinal numbers of the removed processes that will be displayed; for example 1 4 means that the cost of the first and fourth removed processes will be displayed   the list of requests each on a separate line.   Each data set ends with an e request. The data sets are separated by empty lines.

 The input is a sequence of kingdom specifications followed by a sequence of missile landing locations.  A kingdom is specified by a number N (3 <= N <= 100) on a single line which indicates the number of sites in this kingdom. The next line contains the x and y coordinates of the power station, followed by N-1 lines of x, y pairs indicating the locations of homes served by this power station. A value of -1 for N indicates that there are no more kingdoms. There will be at least one kingdom in the data set.  Following the last kingdom specification will be the coordinates of one or more missile attacks, indicating the location of a missile landing. Each missile location is on a line by itself. You are to process missile attacks until you reach the end of the file.  Locations are specified in kilometers using coordinates on a 500 km by 500 km grid. All coordinates will be integers between 0 and 500 inclusive. Coordinates are specified as a pair of integers separated by white-space on a single line. The input file will consist of up to 20 kingdoms, followed by any number of missile attacks.  

 The first line contains the number of scenarios.  For each scenario, you are given the number m, 3 <= m < 100, of movements of the robot in the first line. The following m lines contain pairs 揹x dy�of integers, separated by a single blank, satisfying .-100 <= dx, dy <= 100 and (dx, dy) != (0, 0). Such a pair means that the robot moves on to a grid point dx units to the right and dy units upwards on the grid (with respect to the current position). You can assume that the curve along which the robot moves is closed and that it does not intersect or even touch itself except for the start and end points. The robot moves anti-clockwise around the building, so the area to be calculated lies to the left of the curve. It is known in advance that the whole polygon would fit into a square on the grid with a side length of 100 units.  

 The input consists of six integers. At first the coordinates of the arc's ends are given. The co-ordinates of an inner point of the arc follow them. Absolute value of coordinates doesn't exceed 1000. The points don't belong the same straight line. The arc lies inside the square [-1000,1000] * [-1000,1000].

 The first line of the input file contains one integer N (3 <= N <= 100).  The following N lines describe fence blocks. Each block is represented by its length in meters (integer number, 1 <= Li <= 100).  

 Input will consist of a series of lines, each line containing three real numbers of the form 0.nn. The first number will be the trunk diameter--all trees will be assumed to be cylinders of exactly this diameter, with their centres placed exactly on the points of a rectangular grid with a spacing of one unit. The next two numbers will be the x and y coordinates of the observer. To avoid potential problems, say by being too close to a tree, we will guarantee that diameter <= x, y <= (1-diameter). To avoid problems with trees being too small you may assume that diameter >= 0.1. The file will be terminated by a line consisting of three zeroes.

 The first line contains an integer N between 1 and 10 describing how many pairs of lines are represented. The next N lines will each contain eight integers. These integers represent the coordinates of four points on the plane in the order x1y1x2y2x3y3x4y4. Thus each of these input lines represents two lines on the plane: the line through (x1,y1) and (x2,y2) and the line through (x3,y3) and (x4,y4). The point (x1,y1) is always distinct from (x2,y2). Likewise with (x3,y3) and (x4,y4).

 The input consists of a sequence of constraint specifications. A specification consists of two lines: a list of variables on one line followed by a list of contraints on the next line. A constraint is given by a pair of variables, where x y indicates that x < y.    All variables are single character, lower-case letters. There will be at least two variables, and no more than 20 variables in a specification. There will be at least one constraint, and no more than 50 constraints in a specification. There will be at least one, and no more than 300 orderings consistent with the contraints in a specification.    Input is terminated by end-of-file.  

 The input will contain no more than 10 test cases. Each test case begins with a line containing three integers n,k and h (3<=n<=20, 0<=k<=8, 0<=h<=10). A piece of bread is guaranteed to be a convex polygon of n vertices. In the following n lines, each line contains two integers xi and yi(0<=xi,yi<=1000), representing the Cartesianism coordinate of the ith vertex. The vertices are anti-clockwise numbered. The test case containing n=0, k=0, h=0 will terminate the input, you should not give an answer to this case.

 The input file contains several circuits. The first line gives the number of circuits in the file.  For each circuit in the file, the first line contains the clock period for the circuit, given as an integer number in nanoseconds. The next line gives the number of nodes. The following lines each contain a node, described by a letter and a integer number. The letter is 'i' for an input, 'o' for an output, 'a' for an asynchronous node and 's' for a synchronous node. The number gives the delay introduced by the node as an integer number in nanoseconds (only meaningful for an asynchronous node). Nodes are implicitly numbered, starting at zero.  After the nodes, the number of connections for the circuit follows. Each following line contains a pair of integer numbers denoting a connection between the output and the input of two nodes. The connection links an output of the node given by the first number and an input of the node given by the second number.  The clock signal is not given in the input file. We assume that all synchronous nodes are properly connected to the clock signal.  

 文件第一行是两个整数n，p，n表示房间的数目（也就是祭司的数目），p表示转盘包含的格子的数目。(0 < n, p <= 200)  以下有n行，每行p个整数，表示每个房间转盘的格子上的数字。每行第一个数表示寺院建立时红色标记指向的数字，以下的数字按照顺时针方向给出。  

 The input includes several cases. For each case, the first line contains two space-separated integers, N (0 <= N <= 200) and M (2 <= M <= 200). N is the number of ditches that Farmer John has dug. M is the number of intersections points for those ditches. Intersection 1 is the pond. Intersection point M is the stream. Each of the following N lines contains three integers, Si, Ei, and Ci. Si and Ei (1 <= Si, Ei <= M) designate the intersections between which this ditch flows. Water will flow through this ditch from Si to Ei. Ci (0 <= Ci <= 10,000,000) is the maximum rate at which water will flow through the ditch.

 The input includes several cases. For each case, the first line contains two integers, N (0 <= N <= 200) and M (0 <= M <= 200). N is the number of cows that Farmer John has and M is the number of stalls in the new barn. Each of the following N lines corresponds to a single cow. The first integer (Si) on the line is the number of stalls that the cow is willing to produce milk in (0 <= Si <= M). The subsequent Si integers on that line are the stalls in which that cow is willing to produce milk. The stall numbers will be integers in the range (1..M), and no stall will be listed twice for a given cow.

 The first line of input is the number of test cases for this problem (at most 20). Each test case starts with 24 integer numbers representing the R(0), R(1), ..., R(23) in one line (R(i) can be at most 1000). Then there is N, number of applicants in another line (0 <= N <= 1000), after which come N lines each containing one ti (0 <= ti <= 23). There are no blank lines between test cases.

 The program input is from standard input. Each data set in the input stands for a particular transaction and has the format:   cash N n1 D1 n2 D2 ... nN DN   where 0 <= cash <= 100000 is the amount of cash requested, 0 <=N <= 10 is the number of bill denominations and 0 <= nk <= 1000 is the number of available bills for the Dk denomination, 1 <= Dk <= 1000, k=1,N. White spaces can occur freely between the numbers in the input. The input data are correct.  

 The input contains several instances of the problem. Each instance consists of three lines. The first line contains two integers M and L that indicate respectively the number of chocolates Mindt and Lilka Pedro bought (0 <= M, L <= 1000). The next line contains an integer N representing the number of small boxes Pedro has (N <= M+L). The third line contains N integers indicating the capacity Ci > 0 of box number i (that is, the number of chocolates needed to fill that box). The end of input is indicated by M = L = 0.

 The first line of input contains the number of test cases. For each case there is a line containing a single integer n (1 <= n <= 32767). This represents the number of towns to be built.

 The program input is from the standard input. Each data set in the input has the following format:      n - the number of clients (n <= 100)   on n separate lines the number of days (at most 100) each client wishes to rent the boat;   the total number of choices for all clients;   the list of choices in the format client_id, deadline, amount_of_money where the client id is a positive integer in the range 1..n and deadline <= 100.   An empty line separates the input data sets.

 The number of tasks T that your program have to solve will be on the first row of the input file. Input data for each task start with an integer N, 5 <= N <= 1500. Each of the next N rows of the input will contain the co-ordinates of a vertex of the polygon ? two integers that fit in 16-bit integer type, separated by a single space. Following the row with the co-ordinates of the last vertex for the task comes the line with the number of vertices for the next test and so on. 

 There is one number in the first line ? the number of data sets. Each data set consists of a single line with four integers on it: Pa, Pb, K, and L (1<= K<=100, 1<= L<=100).

 Each line of the input contains two postisive integer N (1<=N<=200) and K(1<=K<=N).Input is terminated by a line with N=K=0.

 Each line of the input contains an odd prime numbers p. Input is terminated by the end-of-file seperator.

 Input consists of less than 100 test cases. Each test case begins with two integers n (0 < n <= 50), m (0 <= m <= n). The next line will contain the labels (numbers in the range 1 to n) of the n objects you are to choose from. Two objects with the same label are considered equivalent. Then in the last line for that test case, you'd have m values for r. There will be a single space separating two consecutive numbers in a line. Input is terminated by a test case where n=0, you must not process this test case.

 The input has several lines, and each line contains the input data n.  -1 denotes the end of the input file.  

 The input file consists of a number of data sets. Each data set defines one required network. The first line of the set contains two integers: the first defines the number P of the given points, and the second the number R of given routes between the points. The following R lines define the given routes between the points, each giving three integer numbers: the first two numbers identify the points, and the third gives the length of the route. The numbers are separated with white spaces. A data set giving only one number P=0 denotes the end of the input. The data sets are separated with an empty line.  The maximal number of points is 50. The maximal length of a given route is 100. The number of possible routes is unlimited. The nodes are identified with integers between 1 and P (inclusive). The routes between two points i and j may be given as i j or as j i.  

 The input consists of several test cases. Each test case is in a single line as the following:       n f1 f2 ... fn   It means, there are totally n floors at which the elevator need to stop, and n = 0 means no testcases  any more. f1 f2 ... fn are the floors at which the elevator is to be stopped (1<=n<=30000, 2<=f1< f2 ... fn<=30000). Every number is separated by a single space.  

 The input contains K data sets in text format. The first line of this file contains the number K of test cases. Each test consists of two lines. First line contains two integers separated by spaces: Q (2 <= Q <= 100) and N (5 <= N <= 50). Second line contains N integers from set {0,1,2} separated by spaces, which present sly number A.

 The input consists of a sequence of cat-in-hat specifications. Each specification is a single line consisting of two positive integers, separated by white space. The first integer is the height of the initial cat, and the second integer is the number of worker cats.  A pair of 0's on a line indicates the end of input.  

 The input contains several test cases. The first line of the input is an integer which indicates the number of tests. Each test description consists of ten lines of input. The first nine lines of a test will describe an initial configuration, in the format shown in Figure 3a. The next line will contain a list of rotations, ending with the value 0.

 The input contains several instances of documents. Each document starts with a line containing a single integer,  N, which indicates the number of sentences in the document (1 <= N <= 1000). The following N lines contain each a sentence. Sentences are numbered sequentially, in the order they appear in the input (the first is sentence 1, the second is sentence 2, and so on). Each sentence has the form "Sentence X is true." or "Sentence X is false.", where 1 <= X <= N. The value N = 0 indicates the end of input.

 Your program should process several test cases. Each test case starts with an integer N indicating the number of wall sections remaining in the city (2 <= N <= 1000). Each of the next N lines describes a wall section. The first wall section to appear is the section where Indiana Jones stands at the beginning.The second section to appear is the section where the trapped person stands. Each wall section description consists of three integers X,Y and L (-10000 <= X ,Y ,L <= 10000), where X an Y define either the southernmost point of a wall section (for South-North sections) or the westernmost point (for West-East wall sections). The value of L determines the length and direction of the wall: if L >= 0,the section is West-East, with length L; if L < 0, the section is North-South, with length |L|. The end of input is indicated by N = 0.

 Your program should solve several instances of the game. Each game description starts with a line containing two integers B and N, indicating respectively the number of rubber bands and the number of nails (2 <= B <= 50 and 2B+1 <= N <= 101). The following N lines describe the position of the nails,each line containing two integers X and Y (?10000 <= X, Y <= 10000). The origin is the first nail in the input. The end of input is indicated by B = N = 0.  In all instances in the input:  no two nails are in the same point;  no three nails are in the same line;  the origin nail does not belong to the convex hull of all nails (that is, if you use one rubber band to wrap all nails, it does not touch the origin nail).

 Your program should process several test cases. The first line of a test case contains an integer N indicating the number of persons in the group (2 <= N <= 20). In the input, a person is identified by an integer from 1 to N. The following N lines contain each a list of friends of each person (the i-th line contains the list of friends of person number i). The list of friends of person i describes the friends person i knows the email address, and consists of a list of integers Fi (1 <= Fi <= N, Fi != i) terminated by the value 0 (zero). Following the list of friends comes the description of the SPAM messages (there will be at most 100 messages). Each description appears in a different line. The description consists of an integer P identifying the person who is the SPAM originator (2 <= P <= N); two integers T1 and T2 representing the threshold values; and the three attributes A1, A2 and A3 (each attribute is a word of no more than 20 letters). The SPAM list ends with a line containing only the value 0 (zero). The following N lines contain each a name, which is single word with no more than 20 letters. The name in the ith line is the name of person number i. The end of input is indicated by N = 0.

 Your program should process several test cases. Each test case specifies the size of the token image and the pixel values for the standard and scanned images. The first line of a test case contains an integer L that indicates the size, in pixels, of the image (1 <= L <= 400). The next L lines will contain L integers each, representing the pixel values for the rows of the standard image. Following that, the next L lines will contain the pixel values for the rows of the scanned image.  The end of input is indicated by L = 0.

 Your program should process data for several shopping sessions. The first line in the description of a shopping session contains two integers M and N; M indicates the number of items in Mrs. Jones' list (1 <= M <= 100) and N represents the total number of products available in the supermarket (1 <= N <= 100,000). The next line contains M integers Xi representing the list of products in Mrs. Jones' list (1 <= Xi <= 100,000, 1 <= i <= M). Then N lines follow, representing the supermarket products in the order in which they appear in Mr. Jones' way. Each of those lines contains an integer K and a real P which represent respectively a product identifier and its price (1 <= K <= 100,000). The end of input is indicated by M = N = 0.

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets. All characters will be uppercase.    A single data set has 3 components:     Start line - A single line, "START"  Cipher message - A single line containing from one to two hundred characters, inclusive, comprising a single message from Caesar  End line - A single line, "END"   Following the final data set will be a single line, "ENDOFINPUT".  

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.    A single data set has 3 components:  Start line - A single line, "START".  Input line - A single line, "X Y Z", where:  X : (1 <= X <= 100) is the radius of your planet in integer miles  Y : (0 <= Y <= 100) is the amount of gasoline in your planet-rover in integer gallons  Z : (0 <= Z <= 360) is an angle separating you from the crash site in integer degrees   End line - A single line, "END".  Following the final data set will be a single line, "ENDOFINPUT".    Take note of the following:  The circumference of a circle in terms of its radius, r, is known to be 2πr  Assume that π = 3.14159 

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.  A single data set has 3 components:     Start line - A single line, "START M N", where M indicates the butler's starting room, and N indicates the number of rooms in the house (1 <= N <= 20).  Room list - A series of N lines. Each line lists, for a single room, every open door that leads to a room of higher number. For example, if room 3 had open doors to rooms 1, 5, and 7, the line for room 3 would read "5 7". The first line in the list represents room 0. The second line represents room 1, and so on until the last line, which represents room (N - 1). It is possible for lines to be empty (in particular, the last line will always be empty since it is the highest numbered room). On each line, the adjacent rooms are always listed in ascending order. It is possible for rooms to be connected by multiple doors!  End line - A single line, "END"   Following the final data set will be a single line, "ENDOFINPUT".   Note that there will be no more than 100 doors in any single data set. 

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets. Each data set will describe the starting conditions of the level. A single data set has the following components:     Start line - A single line, "START x y", where 0 < x < 10 and x is the number of columns in the grid representing the level and 1 < y < 10 and y is the number of rows in the grid representing the level.  The next y lines will represent the rows of the level, starting with row 0 (the top). Each line will consist of x letters. The letters will represent components of the level as follows:    L - Lemming (there will only be one 'L' per data set, and it will always be in row 0)  S - laser gun (these squares will never be in the final row)  P - pit of lava (these squares will always be in the final row)  G - grass (these squares will also always be in the final row)  O - "empty" square of air    End line -- A single line, "END".   Following the final data set will be a single line, "ENDOFINPUT". 

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.  A single data set has 3 components:     Start line - A single line, "START N", where 1 <= N <= 20.  Viral code - A sequence of N alphanumeric characters. Alphanumeric characters will consist of an uppercase letter (A-Z) or a digit (0-9).  End line - A single line, "END"   Following the final data set will be a single line, "ENDOFINPUT".  

 View the maze as an array of cells, with the northernmost row being row 1, and the westernmost column being column 1. In the maze above, the starting cell is row 1, column 1, and the goal cell is row 1, column 3.  There will be one or more mazes to process in the input. For each maze there will first appear six integers. The first two give the height (number of rows) and width (numer of columns) of the maze (in cells). The next two give the position (row and column number) of the starting cell, and the last two give the position of the goal. No maze will have more than 12 rows or 12 columns, and there will always be a path from the starting point to the goal.   Following the first six integers there will appear one integer for each cell, in row major order. The value of each integer indicates whether a cell has a wall on its eastern side (1) and whether it has a wall on its southern side (2). For example, a cell with no eastern or southern wall has a value of 0. A cell with only a southern wall has a value of 2. A cell with both an eastern and a southern wall has a value of 3. The cells on the periphery of the maze always have appropriate walls to prevent the robot from leaving the maze; these are not specified in the input data.   The last maze in the input data will be followed by six zeroes.  

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.   A single data set has 6 components:     Start line : A single line, "START N", where N is the number of players playing this hand (not including the dealer). There will never be more than 10 non-dealer players, and the dealer never plays by himself.  Dealer Line : A single line containing 2 binary strings of exactly eight digits separated by exactly one space. These two strings represent the two cards in the dealer's hand.  Player Line : A single line containing N 8-digit binary strings, each separated from the others by a single space. These represent the face-up cards of all of the non-dealer players.  Byte Line : A single line containing 4 8-digit binary strings, each separated from the others by a single space. These represent the next 4 bytes in the byte deck, in the order they will be drawn.  Nibble Line : A single line containing 4 4-digit binary strings, each separated from the others by a single space. These represent the next 4 nibbles in the nibble deck, in the order they will be drawn.  End line : A single line, "END".   Following the final data set will be a single line, "ENDOFINPUT".    Here are some other useful facts:     Oddly enough, each non-dealer player is always dealt a face-down card 11111111, value 255, but the dealer has no knowledge of this.  Players other than the dealer never hit (they aren't too bright).   

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.    A single data set has 3 components:     Start line - A single line, "START N", where N is the number of buses running and 1 <= N <= 20.  Route Duration line - There will be N of these lines, and each line will consist of M route durations (where 1 <= M <= 10), which will signify how long it will take each bus to return to the bus station after completing a particular route. A route duration will be represented as an integer between 1 and 1000 (inclusive).  Arrival Time - There will only be one of these lines per data set. This line represents the time that you arrived at the bus station and began waiting. This is simply the number of time units that you arrived at the bus station after the buses began running (all buses begin running at time 0). This number is represented as a positive integer (yes, it can be 0 as well, this would signify arriving at the bus station as the buses begin running).  End line - A single line, "END".   Following the final data set will be a single line, "ENDOFINPUT".  

 The input consists of a sequence of positive integers, one per line. Each integer in the input file will be less than or equal to 1,000,000. Input is terminated by end-of-file

 The input to this program will be one or more lines each containing zero or more leading spaces, a value for N, one or more spaces, and a value for M. The last line of the input file will contain a dummy N, M pair with both values equal to zero. Your program should terminate when this line is read. 

 The input will consist of a sequence of descriptions (test cases) followed by a pair of negative integers. Each test case will consist of a sequence of edge descriptions followed by a pair of zeroes Each edge description will consist of a pair of integers; the first integer identifies the node from which the edge begins, and the second integer identifies the node to which the edge is directed. Node numbers will always be greater than zero. 

 The input will consist of a sequence of integers, each representing the number of coconuts gathered by a group of persons (and a monkey) that were shipwrecked. The sequence will be followed by a negative number. 

 Input will consist of one or more sets of data describing a set of traffic signals, followed by the integer -1. The first integer in each set will contain the value N (specifying the number of traffic signals). N will be no larger than 6. This value will be followed by N sets of numbers, each containing values (in order) for L, G, Y and R. L is a positive real number indicating the location of a traffic signal, in miles, from the parking lot. G, Y and R are the lengths of time (in seconds) of the green, yellow, and red periods of the corresponding traffic signal's cycle. Phil has learned from an informant in the Highway Department that all N traffic signals start their green period precisely at 2:00 AM. 

 Input will consist of one or more data sets followed by a pair of zeroes. Each data set will contain five pairs of integers. The first pair (Ws, Hs) specifies the width and height of the screen. The four remaining pairs (Wi, Hi, for i = 1 to 4) specify the initial sizes of the windows. 

 Input to the program is a list of words and numbers, one per line starting in column one, followed by a line containing a single asterisk in column one. A number will consist only of decimal digits (0 through 9) followed immediately by the end of line (that is, there will be no commas in input numbers). A word will consist of between one and twenty lowercase alphabetic characters (a through z). 

 The input contains one or more test cases, followed by a line containing only the number 0 that signals the end of the file. Each test case is on a line by itself and consists of the key k, a space, and then a twisted message containing at least one and at most 70 characters. The key k will be a positive integer not greater than 300. 

 The input contains one or more test cases, followed by a line containing the number 0 that indicates the end of the file. Each test case consists of a positive integer n on a line by itself, where n is the number of pages to be printed; n will not exceed 100. 

 The input contains one or more point sets, followed by a line containing the number 0 that signals the end of the file. Each point set begins with a line containing n, the number of points, and is followed by n lines that describe the points. Each point description contains a capital letter that is the label of the point, then a space, the horizontal coordinate, a space, and the vertical coordinate. Within each set, points labels occur in alphabetical order. Note that since each point is labelled with a capital letter there can be at most 26 points. All coordinates are nonnegative integers less than 50. Points within a set are unique. 

 The input contains one or more board descriptions, followed by a line containing the number 0 that signals the end of the file. Each board description begins with a line containing a positive integer n that is the size of the board; n will be at most 4. The next n lines each describe one row of the board, with a '.' indicating an open space and an uppercase 'X' indicating a wall. There are no spaces in the input. 

 No input for this problem.

 The input contains four parts: 1) a dictionary, which consists of at least one and at most 100 words, one per line; 2) a line containing XXXXXX, which signals the end of the dictionary; 3) one or more scrambled 'words' that you must unscramble, each on a line by itself; and 4) another line containing XXXXXX, which signals the end of the file. All words, including both dictionary words and scrambled words, consist only of lowercase English letters and will be at least one and at most six characters long. (Note that the sentinel XXXXXX contains uppercase X's.) The dictionary is not necessarily in sorted order, but each word in the dictionary is unique. 

 The input is a sequence of cross-section dimensions of storage containers. Each cross-section is given as two real values on one line separated by white space. The dimensions are expressed in units of pipe diameters. All dimensions will be less than 128. Note that a cross section with dimensions a*b can also be viewed as a cross section with dimensions b * a. 

 There is no input for this program.

 输入含有多组测试数据。  每组数据的第一行是两个正整数，n k，用一个空格隔开，表示了将在一个n*n的矩阵内描述棋盘，以及摆放棋子的数目。 n <= 8 , k <= n  当为-1 -1时表示输入结束。  随后的n行描述了棋盘的形状：每行有n个字符，其中 # 表示棋盘区域， . 表示空白区域（数据保证不出现多余的空白行或者空白列）。  

 The input file contains several data cases. Each case has many flight records, each per line. The flight record is in the following format:   OriginalCity DistanceCity ActualMiles ClassCode   Each case ends with a line of one zero.   A line of one # presents the end of the input file.  

 The input file for this problem contains several test cases, one per line.   For each case, there are three non-negative integers: C (C <= 100), N and M (N, M <= 1000000).   The input is terminated by a line containing a single zero.  

 The input consists of several test cases. The first line of each case contains two integers m (2?20) and n (1?50), representing the number of players and the number of cards each player receives at the beginning of the game, respectively. This followed by a line with n positive integers, representing the pips of cards you received at the beginning. Then a blank line follows to separate the cases.   The input is terminated by a line with two zeros.  

 The input consists of several test cases. The first line of each case contains three integers n, m (1<=n, m<=20) and L (2<=L<=8), representing the number of rows in the lair, the number of columns in the lair and the body length of Holedox, respectively. The next L lines contain a pair of row and column number each, indicating the original position of each block of Holedox's body, from B1(r1,c1) to BL(rL,cL) orderly, where 1<=ri<=n, and 1<=ci<=m,1<=i<=L. The next line contains an integer K, representing the number of squares of stones in the lair. The following K lines contain a pair of row and column number each, indicating the location of each square of stone. Then a blank line follows to separate the cases.   The input is terminated by a line with three zeros.   Note: Bi is always adjacent to Bi+1 (1<=i<=L-1) and exit square (1,1) will never be a stone.  

 The input file for this program consists of several configurations. The first line of one configuration contains three positive integers: n, m (n, m < 100) and k (k < 1000). The following k lines give the constrains of the k jobs, each line is a triple: i, x, y.   The input will be terminated by a line containing a single zero.  

 The input consists of T test cases. The number of test cases (T ) is given in the first line of the input file. The number of jobs (0<=n<=100) is given in the first line of each test case, and the following n lines have each job's processing time(1<=ti<=20),arrival time(0<=ai<=250), and deadline time (1<=di<=250) as three integers. 

 The input is a file containing several data cases. Each case begins with a line, with only two numbers: m and k. Then follows by several m*k (m columns, k rows) matrices. Each matrix represents one picture taken by the camera. There are at least two pictures. There is always a separator line between each matrix inside a data set. The separator line is a line with m "-"s. The last matrix of a data set is followed by a terminating line - a line with m "="s.   A line with two zeros presents the end of the input file.   The picture size is at most 256*256. There are at most 256 pictures in one test case.

 The input consists of several test cases. The first line of each case contains two integers n (1<=n<=1000) and d, where n is the number of islands in the sea and d is the distance of coverage of the radar installation. This is followed by n lines each containing two integers representing the coordinate of the position of each island. Then a blank line follows to separate the cases.   The input is terminated by a line containing pair of zeros  

 Each line of input to your program will contain the x and y coordinates of three points, in the order Ax, Ay, Bx, By, Cx, Cy. These coordinates will be real numbers separated from each other by one or more spaces.

 The input consists of T test cases. The number of test cases (T) is given in the first line of the input file. Each test case starts with a line containing an integer N , the number of nodes in a tree, 2<=N<=10,000. The nodes are labeled with integers 1, 2,..., N. Each of the next N -1 lines contains a pair of integers that represent an edge --the first integer is the parent node of the second integer. Note that a tree with N nodes has exactly N - 1 edges. The last line of each test case contains two distinct integers whose nearest common ancestor is to be computed. 

 Each line of the input contains a postisive integer n (n <= 1500).Input is terminated by a line with n=0.

 The input consists of T test cases. The number of test cases (T ) is given in the first line of the input file. Each test case consists of three integers p, q, and r in a line. All digits of p, q, and r are numeric digits and 1<=p,q, r<=1,000,000. 

 The input consists of T test cases. The number of test cases (T ) is given in the first line of the input file. Each test case consists of two lines. The first line has two integers. The first integer is n (2<=n<=1000), the number of persons, and the second integer is t (0<=t<=n), the maximum number of liars. The second line contains n 0 or 1's that represent a1,2, a2,3, a3,4, ..., a(n-1),n, an,1. 

 The input consists of T test cases. The number of test cases (T) is given in the first line of the input file. Gift candidates are numbered from 1 to n ( 1<=n<=1000 ). Children are numbered from 1 to m (1<=m<=100). The input is a sequence of non-empty lines:   The first line has the number (T) of test cases. The sequence of test cases is from the second line.  The first line of each test case has two integers, the number (n) of gift candidates followed by the number (m) of children.  The next lines show the sequence of children's conditions in the order of child 1's, child 2's,..., child m's. Each child's condition is expressed as follows:  ----The first line has two integers, the child's identification and the number of ai's  ----From the second line, one line represents one part (the ai) of the child's condition. Each line for starts with its type:  "-1" for type 1, "-2" for type 2, "-3" for type 3, and "-4" for type 4.  [type 1] "-1" is followed by a number k and a sequence of integers for the gift elements. The k is the number of integers in the sequence. It represents a constant set of gift candidates. For example,  -1 2 1 2  represents a set {1, 2} of gifts.  [type 2] "-2" is followed by a single integer for a sibling's identification. For example,  -2 2  represents sibling 2's gifts.  [type 3] "-3" is followed by a sequence of two formats of type 1 or 2. For example,  -3 -2 3 -1 2 2 3  represents the common-things-of sibling 3's gifts and set {2, 3}. As another example,  -3 -2 2 -2 3  represents the common-things-of sibling 2's and 3's gifts.  [type 4] "-4" is followed by type 2 followed by type 1. For example,  -4 -2 1 -1 1 3  represents sibling 1's gifts except-for {3}.  

 The input consists of T test cases. The number of test cases ( T ) is given in the first line of the input file. The first line of each test case contains an integer(3<=n<=1000) , which is the number of points in the polygonal line P. In the following n lines, there are xi, yi(i=1..n) each line.(0<=xi,yi<=10000) One mountain climber starts at p1 , and the other starts at pn . Therefore, the y1=yn. You may assume that for each input test case, the mountain range never drops below the starting elevation and yi is UNIQUE. 

 The input consists of T test cases. The number of test cases (T ) is given in the first line of the input file. Each test case DO is written in a single line. '$' is placed at the end of each line to denote the end of each input DO representation, and there is at least one blank space to separate '('s and ')'s and '$'. Note that the minimum weight of input DO is 1, and the maximum weight is 30. 

 The input consists of T test cases. The number of test cases (T) is given in the first line of the input file. Each test case consists of three lines: the first line has an integer n, 1<=n<=25, that represents the number of teams in the test case; the second line contains 2n nonnegative integers w1,d1,w2,d2... each at most 100, where wi and di are the current numbers of wins and defeats for team i, respectively; the third line contains n2 nonnegative integers a1,1,a1,2,... each at most 10, where ai,j is the remaining number of games to be played between teams i and j . For all i and j, ai,j=aj,i. If i=j, then ai,j=0. The integers given in a line are delimited by one or more spaces. 

 The first line of the input file contains an integer n, n <= 10, which represents the number of test cases. In each test case, it begins with an integer m, m <= 100000,   which represents the number of poker cards. Next, each card represented by its number are listed consecutively. Note that, the numbers of ace, 2, 3, ..., K are given by integers 1, 2, 3, ..., 13, respectively. The final minimum point in each test case is less than 5000000.  

 The input consists of several test cases. The first line contains an integer indicating the number of test cases. Each test case starts with a positive integer n, where 3 <= n <= 100. The following n lines represent the adjacency matrix of a network. An adjacency matrix of a network G with n vertices, denoted by A(G) = [w u,v], is an n * n matrix such that w u,v > 0 if (u, v) is an edge of G, and w u,v= 0 otherwise, where w u,v in a nonnegative integer. Note that any two elements in each line of an adjacency matrix are separated by a space. The last line of each test case represents the sequence of vertices in a given shortest path in which there is also a space between two vertices. Note that the first and the last vertices denote the source and the destination vertices, respectively. For example, the adjacency matrix of the graph in Figure 4 is shown in test case 3 of the sample input.

 The first line contains the number of test cases w. Then the w test cases are listed one by one. Each test case is listed as follows in one line with a space between two integers: N , a1, a2, a3, M ,s1, s2, s3, e1, e2, e3.

 The first line contains a positive integer N, <=10, indicating the number of test cases. In each test case, the first line contains an integer k indicating that the array size is 2^k * 2^k. Then, the following 2^k lines represent a 2^k * 2^k array. The rows of this 2^k * 2^k array are listed line by line. Each row contains 2^k nonnegative integers separated by a space.

 A collection of k (n-node) trees C = {T1, T2, ... , Tk}. The inputs are just a list of integers. The first 2 integers (in a single line) represent the number of trees, k, and the size of each tree, n. Note that k can be as large as 150 and n can be as large as 100. After the two integers, there will be k lines representing the edge sets for each tree Ti; each line contains exactly n-1 pairs of integers, representing the n-1 (directed) edges of each tree. Thus, there are totally 2n-2 integers for each tree, and the total input will be 2k(n-1) integers except the first two parameters. Each tree is indexed by their appearance ordering; that is, the first line represents the tree T1, the second line is T2, ... , etc, and the last (kth) line is just Tk.

 The input file consists of several test cases. The first line of each test case is a positive integer n, 2 < n < 30. The following n - 1 lines represent the upper triangle of the tree metric, but the diagonal is not included. Each line is for one row, and elements are separated by spaces. All the elements are nonnegative integers less than 100. The last case is followed by a "0" to indicate the end of input. You may assume that the test data are all tree metrics, and it is not necessary to check them.  Furthermore, the size of a tree is the sum of all integers in the test case except the integers in the first line of the test case.  

 The input to the program is a corrupted address file described above and illustrated in the sample input. A record will never exceed 1000 characters and there are no more than 10 test cases.   

 The input may contain multiple test cases.   For each test case there are three input lines. The first line contains two integers, the case number c and the total number of member 2N.   The next two lines consist of two strings giving the relative position of members at the beginning and at the end of the meeting, in anticlockwise order with respect to the member 1.   Each input string starts with a letter-integer combination (without any blank between the letter and the integer) either B1 (if member 1 is on a blue chair) or R1 (if member 1 is on a red chair) and is followed by a permutation of integers 2, 3, ï¿½ 2N. A blank character precedes each integer appearing in the string, with the exception of 1. The input is illustrated in sample input.   The input terminates with an input 0 for c.  

 The first line of the input file contains a number indicating the number of parameter sets to follow. Each following line consists of six numbers, separated by a single blank character. The numbers are the values for the parameters a, alpha , b, beta, c, and gamma respectively. The parameters are labeled as shown in figure 1. A value of -1 indicates that the corresponding parameter is undefined and has to be calculated. All floating-point numbers include at least eight significant digits.

 The input file consists of a number of data sets.Each data set is a line of 5 numbers separated by blank.A line of a single -1 represents the end of input.

 (n, P): For more than one input in the input file, one line is for each input ,with -1 at the end. P is in the form of list.

 Each case is a line of an integer.-1 denotes the end of input.

 There is one given data n (number of slots) on every line. At the end of all the input data is -1, which means the end of input.

 On every line, a group of data is given. In each group there are three natural number n,m,k, separated by commas. After all data are given there is -1 as the symbol of termination.

 On every line a group of data is given. In each group there are three natural number n, m, k, separated by commas. After all data are given there is -1 as the symbol of termination.

 The input file, ending with -1, contains several data, each of which holds a line.

 The information of the teachers and votes is stored in the file fiend.in according to the following format:  1) The first line of the file consists of the number of teachers (n) and the number of students (m), separated by a blank;  2) The lines from the second to n+1 contain the information of n teachers; each line contains the information of a teacher. The information of teachers makes up No., name, department, which are separated by a blank;  3) The lines from the n+2 to n+m+1 contain the information of votes; each line contains a string representing a vote;  4) The end of the file is -1.  

 The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains an integer n (1 <= n <= 100), the number of trees, and an integer r (1 <= r <= 1000), the length of the land's side, followed by n lines, each containing two integers x and y (0 <= x, y <= 100,000) representing the coordinates of a walnut tree. Note that all coordinates are pairwise distinct. 

 The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains two integer numbers: N (1<= N <= 100) the number of rows of the map, and M (2 <= M <= 100) the number of columns of the map. Followed by the first line, there will be N lines, each containing a string of length M, consisting of '-', '|', '+', ' ', '*', 'S', 'D' or digits from '1' to '9'. Also, assume that the total number of intersections and turns (+) is at most 100. 

 The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains five integers k (1 <= k <= 30), the number of lands, m and n (1 <= m, n <= 50), the number of rows and columns in each land respectively, and h and w (1 <= h, w <= 50), the number of rows and columns a complex occupies. After the first line, there are k*m lines in the input, representing k lands, each by an m*n matrix. Each line contains a string of length n with no leading or trailing spaces. Each character in the strings represents a block in the land and may be an upper case alphabetic character 'A'..'Z', indicating the owner of the block, or the character '0' indicating the block is free.

 The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains an integer n (3 <= n <= 100), the number of units, followed by n lines each describing a unit and the result of its checks. The line starts with a positive integer number which shows the identification number of the unit. After the id number, there are two pairs of checked unit id's and check results. A check result is a single character which is either Y or N, showing whether the result of checking is good or faulty respectively. As an example, the fourth line in the Sample Input section shows that unit 16 has checked unit 8 saying it is good, and has checked unit 32 saying it is faulty.

 The first line of the input file contains a single integer t (1 <= t <= 5), the number of test cases, followed by the input data for each test case. The first line of each test case contains two integers b and r (3 <= b, r < 10), the number of blue and red plugs respectively, followed by b lines, each containing two integers x and y representing the coordinates of a blue plug followed by r lines, each containing two integers x and y representing the coordinates of a red plug. Note that all coordinates are pairwise distinct and are in range 0 to 100,000 inclusive.

 The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains integer L (1 <= L <= 10) the number of triangles in LT, followed by L lines each describing a triangle in LT, containing one integer number b (1 <= b <= 100), the side of the triangle. The next line of the input consists of three numbers x, y, and U. The first two numbers are the initial (x, y) coordinates of the reference point and are arbitrary real numbers. U is the number of triangles in UT (1 <= U <= 10). After this line, there are U lines each describing a triangle in LT, containing one integer number b (1 <= b <= 100), the side of the triangle.   In order to avoid floating-point arithmetic errors, you may assume that the input has the property that during the motion of UT, the distance between tips of any two triangles in LT and UT is never less than 0.1.  

 The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by t lines, each containing a single decimal number with no leading or trailing white space. Each number will be in the range 0...100663270 (inclusive).

 The input consists of blocks of lines. Each block except the last describes one train and possibly more requirements for its reorganization. In the first line of the block there is the integer N described above. In each of the next lines of the block there is a permutation of 1, 2, ..., N. The last line of the block contains just 0.   The last block consists of just one line containing 0. 

 The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case consists of a single line. The line contains exactly four integer numbers separated by spaces: A, B, X and Y. A and Bindicate the dimensions of the tiles, X and Y are the dimensions of the equipment box (1 <= A,B,X,Y <= 50000). 

 The input consists of blocks of lines. Each block except the last corresponds to one set of problems and king's decisions about them. In the first line of the block there are integers n, and m where 0 < n <= 100 is length of the sequence S and 0 < m <= 100 is the number of subsequences Si. Next m lines contain particular decisions coded in the form of quadruples si, ni, oi, ki, where oi represents operator > (coded as gt) or operator < (coded as lt) respectively. The symbols si, ni and ki have the meaning described above. The last block consists of just one line containing 0. 

 The input consists of lines (at least one) each of which except the last contains prime base representation of just one positive integer greater than 2 and less or equal 32767. All numbers in the line are separated by one space. The last line contains number 0. 

 There are several blocks in the input, each describing one system. There is an integer number n, 2 < n < 16 the length of the input word in the first line. There is a word in the next line. The word contains only lowercase letters a and b. There are four characters c1 c2 c3 c4 in the next eight lines. Each quadruple represents one rewriting rule with the following meaning: when the letter at the position i - 2 is c1 and the letter at the position i is c2 and the letter at the position i + 1 is c3 then the letter at the position i after rewriting will be c4. Rewriting rules are correct and complete. There is an integer number s, 0 <= s <= 2000000000, in the last line of the block. 

 The input consists of blocks of lines. Each block has three lines. The first line of a block contains a time point D1 and the second line a time point D2. D1 always precedes D2. All numbers in the lines are separated by one space. You can assume that the given descriptions of time points are correct. The third line contains a time period. There is one space between the number and the word in the period definition on this line. After each block, there is one empty line. 

 The input consists of blocks of lines. Each block except the last describes one puzzle problem. In the first line of the block there are integers n and m, 0 < n, m <= 6 separated by one space. The integers n, m indicate the number of rows and columns in the puzzle respectively. The description of individual puzzle pieces is in the following n * m lines of the block. Each piece is a rectangle 3 centimeters wide and 4 centimeters high with possible juts or cavities in the middle of its sides. For each side of a puzzle piece just one of the following possibilities is true (see picture):   there is no jut or cavity on the side, i.e., the side is flat - such sides can be used only on edges of the final picture when assembling the puzzle,   there is one jut in the middle of the side,   there is one cavity in the middle of the side.      As is usual, two pieces can be placed side by side only if one has a jut and the other has a cavity on corresponding sides. We will denote the flat sides by F, the sides with juts by O and the sides with cavities by I. Each piece is described by four letters characterizing its top, right, bottom, and left side. To make the task easier the pieces can be used only as they are described i.e. they cannot be turned.   After each block there is an empty line. The last block consists of just one line containing 0 0, i.e. two zeros separated by one space.   

 The input consists of blocks of lines. Each block describes one sequence of pairs Cw to some w in such a way that the i-th line of the block contains either two integers pi, ri, (ri <= pi < 1000) separated by one space or 0 followed by one space and one character. Each block ends with one empty line. 

 The input consists of blocks of lines. Each block except the last describes one town. In the first line of the block there are integers n, d and s described above separated by one space. The next 2n lines contain descriptions of n bus lines (2 lines for each bus line) as follows: In the first line there are stop numbers on the corresponding bus line separated by one space. The stops are listed in the order the bus passes them. After passing the last stop listed on the line the bus goes again to the first stop listed on the line. The second line describes on which stops the individual buses operating on the bus line started at the beginning. The description consists of pairs si, di, where si is a stop number on the bus line and di is the number of driver driving the bus. All numbers si, di on the line are separated by one space. The last block consists of just one line containing 0 0 0, i.e. three zeros separated by one space. 

 The input consists of blocks of lines. Each block except the last describes one cutting process. In the first line of the block there is a number N <= 100 indicating the number of segment cuts in the cutting process. These cuts are defined by the following N lines. The line defining one segment cut has the form X1 Y1 X2 Y2 where X1 Y1 and X2 Y2 are the co-ordinates of the end points of the segment cut. They are separated by one space. The co-ordinates are integers and always define horizontal or vertical segment (i.e. segment parallel with x or y axis).   The last block consists of just one line containing 0.  

 The input consists of several blocks of lines. Each block contains lines of text and is terminated by one empty line.  

 The input of the program consists of several blocks of lines. Each block includes four lines. There are no empty lines between any successive two blocks. The first line of a block contains the right side of the production for the symbol a. The second one contains the right side of the production for the symbol b and the third one contains the starting string and the fourth line the given string z. The right sides of the productions, the given string z and the starting string are at most 15 characters long.  

 The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing three integers X, Y, M separated by space. The numbers satisfy conditions: 1 <= X,Y <=10000, 1 <= M <= 1000. The numbers X and Yindicate the dimensions of the Large Room which has a rectangular shape. The number M stands for the number of holes. Then exactly M lines follow, each containing two integer numbers Ui and Vi (0 <= Ui <= X, 0 <= Vi <= Y) indicating the coordinates of one hole. There may be several holes at the same position. 

 The input consists of several blocks of lines each representing a crossword. Each block starts with the line containing two integers m < 25 and n < 25 separated by one space. In each of the next m lines there are n numbers 0 or 1, separated by one space. The last block will be empty, m = n = 0. 

 The input consists of blocks of lines, each of which except the last describes one situation in the basement. The first line of each block contains a positive integer number N < 500 expressing the number of pipes. The second line of the block contains two integers bx and by separated by one space. Each of the next N lines of the block contains integers cxi, cyi and ri, where cyi + ri < by. Integers in individual lines are separated by one space. The last block consists of one line containing n = 0. 

 The input consists of blocks of lines. The first line of each block contains two integers M <= 50 and N <= 50 separated by one space. In each of the next M lines there are N numbers one or zero separated by one space. One represents obstacles and zero represents empty squares. (The tracks are between the squares.) The block is terminated by a line containing four positive integers B1 B2 E1 E2 each followed by one space and the word indicating the orientation of the robot at the starting point. B1, B2 are the coordinates of the square in the north-west corner of which the robot is placed (starting point). E1, E2 are the coordinates of square to the north-west corner of which the robot should move (destination point). The orientation of the robot when it has reached the destination point is not prescribed. We use (row, column)-type coordinates, i.e. the coordinates of the upper left (the most north-west) square in the store are 0,0 and the lower right (the most south-east) square are M - 1, N - 1. The orientation is given by the words north or west or south or east. The last block contains only one line with N = 0 and M = 0.  

 The first line of the input file contains an integer n, n<=10, which represents the number of test cases. Then, the cases are listed line by line. In each line, there are two integers pk and qk separated by a space which are the numerator and denominator, respectively, of test case k, k = 1, 2,...,n. Note that 1 <= pk, qk <= 10000.

 The input file consists of several test cases. In each test case, the first line consists of three integers N, M and K separated by a single space. Each of the following M lines represents in a power cable by beginning with the number of buildings in this power cable and then a list of buildings in this cable in clockwise order. It then followed by a line of K integers, each separated by a space, representing the buildings that are flooded. A line with three 0's separates two test cases. The end of the file is a line with three -1's.  

 The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case consists of one single line containing four integer numbers Xr, Xi, Br, Bi (|Xr|,|Xi| <= 1000000, |Br|,|Bi| <= 16). These numbers indicate the real and complex components of numbers X and B, i.e. X = Xr + i.Xi, B = Br + i.Bi. B is the basis of the system (|B| > 1), X is the number you have to express. 

 The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing two integers R and C (1 <= R,C <= 100) indicating the key size. Then exactly R rows follow, each containing C characters. Each character is either a hash mark (#) or a period (.). A hash mark represents one square field made of wood; a period is an empty field. The wooden fields are always connected, i.e. the whole key is made of one piece. Moreover, the key remains connected even if we cut off arbitrary number of rows from its top. There is always at least one non-empty field in the top-most and bottom-most rows and the left-most and right-most columns.  After the key description, there is a line containing two integers D and W (1 <= D <= 10000, 1 <= W <= 1000). The number W is the lock width, and D is its depth. The next D lines contain W characters each. The character may be either a hash mark (representing the wood) or a period (the free space). 

 The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing two integers C and R (3 <= C,R <= 1000) indicating the number of columns and rows. Then exactly R lines follow, each containing C characters. These characters specify the labyrinth. Each of them is either a hash mark (#) or a period (.). Hash marks represent rocks, periods are free blocks. It is possible to walk between neighbouring blocks only, where neighbouring blocks are blocks sharing a common side. We cannot walk diagonally and we cannot step out of the labyrinth.  The labyrinth is designed in such a way that there is exactly one path between any two free blocks. Consequently, if we find the proper hooks to connect, it is easy to find the right path connecting them. 

 The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing two integers E and F. They indicate the weight of an empty pig and of the pig filled with coins. Both weights are given in grams. No pig will weigh more than 10 kg, that means 1 <= E <= F <= 10000. On the second line of each test case, there is an integer number N (1 <= N <= 500) that gives the number of various coins used in the given currency. Following this are exactly N lines, each specifying one coin type. These lines contain two integers each, Pand W (1 <= P <= 50000, 1 <= W <=10000). P is the value of the coin in monetary units, W is it's weight in grams. 

 There is a single positive integer T on the first line of input. It stands for the number of numbers to follow. Then there is T lines, each containing exactly one positive integer number N, 1 <= N <= 1000000000. 

 The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing a single integer N (3 <= N <= 1000000) indicating the number of points that form the polygon. This is followed by N lines, each containing two integers Xi and Yi (|Xi|, |Yi| <= 20000). These numbers are the coordinates of the i-th point. When we connect the points in the given order, we get a polygon. You may assume that the edges never touch each other (except the neighboring ones) and that they never cross. The area of the polygon is never zero, i.e. it cannot collapse into a single line. 

 The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing a single integer number Nthat indicates the number of plates (1 <= N <= 100000). Then exactly Nlines follow, each containing a single word. Each word contains at least two and at most 1000 lowercase characters, that means only letters 'a' through 'z' will appear in the word. The same word may appear several times in the list. 

 Several sets of integral matrices. The inputs are just a list of integers. Within each set, the first 4 integers (in a single line) represent the size of the matrix, m and n, indicating an m n matrix, and the constrained submatrix size, R and C. Note that each of them (m; n; R;C), can be as large as 200. After the four integers, there will be m lines representing the m rows of the matrix; each line (row) contains exactly n integers which are the elements in the row. The value of each element in a matrix is in the range from 0 to 800 and most of them are less than 100. Thus, there are totally mn integers for the particular matrix.   These matrices will occur repeatedly in the input as the pattern described above. An integer m = 0 (zero) signifies the end of input.  

 The input file consists more than one and less than six networks (cases). Each test case starts with a positive integer n, where 3 <= n <= 100. The following n lines represents the adjacency matrix of a network G. The last case is followed by a "0" to indicate "end of input." An adjacency matrix of a network G with n nodes, denoted by A(G) = [au,v], is an n x n 0, 1-matrix such that au,v = 1 if (u, v) âˆˆ E, and au,v = 0 otherwise. Note that there is not any delimiter between any two elements in each line of a 0, 1-matrix. For example, the adjacency matrix of the graph in Figure 3 is shown in test case 3 of the sample input.

 The input consists of multiple test cases. A line of 4 -1's separates each test case. An extra line of 4 -1's marks the end of the input. In each test case, the rectangles are given one by one in a line. In each line for a rectangle, 4 non-negative integers are given. The first two are the x and y coordinates of the lower-left corner. The next two are the x and y coordinates of the upper-right corner.

 The first line contains the number of tests t(1<=t<=15). Each case contains two lines. The first line contains an integer n(1<=n<=200), the number of boxes. The second line contains n integers, representing the colors of each box. The integers are in the range 1~n.

 The input file contains a sequence of scenarios, each scenario consisting of a paper database and a list of names. A scenario begins with the line "p n", where p and n are natural numbers with 1<=p<=32000;1<=n<=3000. Following this line are p lines containing descriptions of papers (this is the paper database). A paper is described by a line of the following form:   LastName1, FirstName1, LastName2, Firstname2, . . . : TitleOfThePaper   The names and the title may contain any ASCII characters between 32 and 126 except commas and colons. There will always be exactly one space character following each comma. The first name may be abbreviated, but the same name will always be written in the same way. In particular, Erdos' name is always written as "Erdos, P.". (Umlauts like '¨o','¨a',. . . are simply written as 'o','a', . . . .)   Example:   Smith, M.N., Martin, G., Erdos, P.: Newtonian forms of prime factors matrices.   After the p papers follow n lines each containing exactly one name in the same format as in the paper database.   The line '0 0' terminates the input.   No name will consist of more than 40 characters. No line in the input file contains more than 250 characters. In each scenario there will be at most 10 000 different authors.   

 The input consists of several test cases. For each test case, there will be a line containing two integers n and k (1<=n<=15; 0<=k<2^n). The end of the input file is indicated by a line containing two zeros. DonæŠ° process that line.

 The input file consists of several test cases.   For each test case, the first line contains two integers n and e. These are the number n (1 <= n <= 200) of squares in the pattern and the number e (0 <= e <= 300) of edges. Squares are labelled by the integers 0 to n - 1. The following e lines describe one edge each using the four numbers s1; s2; p; f :   The two numbers s1 and s2 (with 0 <= s1 < s2 < n) of the squares that are joined by the edge.   The position p of the square s2 with respect to the square s1 in the pattern. Here p = 0;1;2;3 mean above, to the left, below, or to the right of s1, respectively (see sketch below).   The number f =0;1;2 tells you to fold along the edge either not at all, forward, or back, respectively (see sketch).       You can also assume that the pattern is connected and can be drawn in the plane without overlapping.   At the end of the input file, there will be a line containing two zeros (instead of n and e). Do not process that line.  

 The input file contains several scenarios. Each of them consists of three parts.   Part one lists the names of all cities connected by the railroads. It starts with a line containing an integer C (1 <= C <= 100) followed by C lines containing city names. These names consist of letters.   Part two describes all the trains running during the day. It starts with a number T <= 1000 followed by T train descriptions. Each train description consists of one line with a number ti <= 100 and ti more lines with a time and a city name, meaning that passengers can get on or off the train at that time at that city. The times are given in the 24-hour format hhmm.   Part three consists of three lines: Line one contains the earliest possible starting time for the journey, line two the name of the city where she starts, and line three the destination city. The two cities are always different.   The end of the input file is marked by a line containing only a zero (instead of C). Do not process this line.  

 The input begins with a line containing the number of scenarios.   The input for each scenario starts with a description of the cog-wheels in the kit. First, there is a line containing the number n of different sizes of cog-wheels (1<=n<=20). The next line contains n numbers c1 . . . cn, separated by single blanks. These denote the n different sizes of the cog-wheels in the kit, with 5<=ci<=100 for i = 1, . . . , n. You may assume that there is a cog-wheel of smallest size c = min{c1, . . . , cn} in the kit such that all sizes c1, . . . , cn are multiples of c.   The line describing the available cog-wheels is followed by the list of gear ratios to be realized. It starts with a line containing the numbermof ratios. The nextmlines each contain two integers a and b, separated by a single blank. They denote the ratio a : b, with 1<=a, b<=10000.  

 There is a single positive integer T on the first line of input. It stands for the number of expressions to follow. Each expression consists of a single line containing a positive integer number, an operator (one of +, - and *) and the second positive integer number. Every number has at most 500 digits. There are no spaces on the line. If the operation is subtraction, the second number is always lower than the first one. No number will begin with zero. 

 There is a single positive integer T on the first line of input. It stands for the number of bulks to follow. Each bulk description begins with a line containing single positive integer F, 6 <= F <= 250, stating the number of faces. Then there are F lines, each containing one face description. All faces of the bulk are always listed, in any order. Any face may be divided into several distinct parts and described like if it was more faces. Faces do not overlap. Every face has one inner side and one outer side. No side can be "partially inner and partially outer".   Each face is described on a single line. The line begins with an integer number P stating the number of points that determine the face, 4 <= P <= 200. Then there are 3 x P numbers, coordinates of the points. Each point is described by three coordinates X,Y,Z (0 <= X,Y,Z <= 1000) separated by spaces. The points are separated from each other and from the number P by two space characters. These additional spaces were added to make the input more human readable. The face can be constructed by connecting the points in the specified order, plus connecting the last point with the first one.   The face is always composed of "unit squares", that means every edge runs either in X, Y or Z-axis direction. If we take any two neighbouring points X1,Y1,Z1 and X2,Y2,Z2, then the points will always differ in exactly one of the three coordinates. I.e. it is either X1 <> X2, or Y1 <> Y2, or Z1 <> Z2, other two coordinates are the same. Every face lies in an orthogonal plane, i.e. exactly one coordinate is always the same for all points of the face. The face outline will never touch nor cross itself.   

 The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. The first line of each case contains only two positive integers A, 1 <= A <= 26, and K, separated by space. A determines the size of the substitution alphabet (the substitution alphabet consists of the first A lowercase letters of the english alphabet (a--z) and K is the number of encrypted words. The plain words contain only the letters of the substitution alphabet. The plain message can contain any symbol, but only the letters of the substitution alphabet are encrypted. Then follow K lines, each containing exactly one encrypted word. At the next line is encrypted message. 

 There is a single positive integer T on the first line of input. It stands for the number of test cases to follow. Each test case consists of two lines. First line of each test case contains two integer numbers S and C separated by a single space, 1 <= S < 100, 1 <= C < 100, (S+C) <= 100. The first number, S, stands for the length of the given sequence, the second number, C is the amount of numbers you are to find to complete the sequence.   The second line of each test case contains S integer numbers X1, X2, ... XS separated by a space. These numbers form the given sequence. The sequence can always be described by a polynomial P(n) such that for every i, Xi = P(i). Among these polynomials, we can find the polynomial Pmin with the lowest possible degree. This polynomial should be used for completing the sequence.   

 There is a single positive integer T on the first line of input. It stands for the number of test cases to follow. Each test case consists of a town description. For simplicity, a town is modelled as a rectangular grid of P x Q square fields. Each field is exactly 1 metre wide. For each field, a non-negative integer Z i,j is given, representing the height of the terrain in that place, in metres. That means the town model is made of cubes, each of them being either solid or empty. There are no "half solid" cubes.   The first line of each test case contains two integer numbers P and Q, separated by a single space, 1 <= P,Q <= 200. Then there are P lines each containing Q integer numbers separated by a space. These numbers are Zi,j, where 1 <= i <= P, 1 <= j <= Q and 0 <= Z i,j <= 5000. After the terrain description, there are four numbers R1, C1, R2, C2 on the last line of each test case. These numbers represent position of two BTSes, 1 <= R1,R2 <= P, 1 <= C1,C2 <= Q. The first coordinate (R) determines the row of the town, the second coordinate determines the column.   The technician is moving in steps (steps stands for Standard Technician's Elementary Positional Shift). Each step is made between two neighbouring square fields. That means the step is always in North, South, West or East direction. It is not possible to move diagonally. The step between two fields A and B (step from A to B) is allowed only if the height of the terrain in the field B is not very different from the height in the field A. The technician can climb at most 1 metre up or descend at most 3 metres down in a single step.   At the end of each step, at least one of the two BTSes must be visible. However, there can be some point "in the middle of the step" where no BTS is visible. This is OK and the data is handled by the cache. The BTS is considered visible, if there is a direct visibility between the unit cube just above the terrain on the BTSes coordinates and the cube just above the terrain on the square field, where the technician is. Direct visibility between two cubes means that the line connecting the centres of the two cubes does not intersect any solid cube. However, the line can touch any number of solid cubes. In other words, consider both the BTS and the technician being points exactly half metre above the surface and in the centre of the appropriate square field.   Note that the IRDA beam can go between two cubes that touch each other by their edge, although there is no space between them. It is because such a beam touches both of these two cubes but does not intersect any of them. See the last test case of the sample input for an example of such a situation.   

 There is a single positive integer T on the first line of input. It stands for the number of expressions to follow. Each expression consists of a single line containing only lowercase letters, operators (+, -, *, /) and parentheses (( and )). The letters are variables that can have any value, operators and parentheses have their usual meaning. Multiplication and division have higher priority then subtraction and addition. All operations with the same priority are computed from left to right (operators are left-associative). There are no spaces inside the expressions. No input line contains more than 250 characters. 

 There is a single positive integer T on the first line of input. It stands for the number of test cases to follow. Each test case describes one game situation and you are to make a guess. On the first line of each test case, there are three integer numbers, P, C and M. P ( 1 <= P <= 10) is the number of pins, C (1 <= C <= 100) is the number of colours, and M (1 <= M <= 100) is the number of already played guesses.   Then there are 2 x M lines, two lines for every guess. At the first line of each guess, there are P integer numbers representing colours of the guess. Each colour is represented by a number Gi, 1 <= Gi <= C. The second line contains two integer numbers, B and W, stating for the number of black and white points given by the corresponding hint.   Let's have a secret code S1, S2, ... SP and the guess G1, G2, ... GP. Then we can make a set H containing pairs of numbers (I,J) such that SI = GJ, and that any number can appear at most once on the first position and at most once on the second position. That means for every two different pairs from that set, (I1,J1) and (I2,J2), we have I1 <> I2 and J1 <> J2. Then we denote B(H) the number of pairs in the set, that meet the condition I = J, and W(H) the number of pairs with I <> J.   We define an ordering of every two possible sets H1 and H2. Let's say H1 <= H2 if and only if one of the following holds:   B(H1) < B(H2), or  B(H1) = B(H2) and W(H1) <= W(H2)  Then we can find a maximal set H max according to this ordering. The numbers B(H max) and W(H max) are the black and white points for that hint. 

 There is a single positive integer T on the first line of input. It stands for the number of dialogues to follow. Each dialogue consists of zero or more lines, each of them containing one sentence: either statement or question. The statement ends with a dot character (.), the question ends with a question mark (?). No statement will appear more than once, however the questions can be repeated. There is one extra line after each dialogue. That line ends with an exclamation mark (!).   Sentences can contain words, spaces and punctuation characters (such as commas, colons, semicolons etc.). All words contain only letters of English alphabet and are case-sensitive. That means the same word is always written the same way, usually in lowercase. Acronyms, names and some other words can begin with capital letters. For simplicity, all sentences begin with a lowercase letter. Only if the first word should be written with a capital, the sentence begins with a capital letter. There are no unneeded spaces between words. No line will have more than 100 characters. There will be at most 100 statements per each test case.    Statements Each statement has one of the following two forms ( ~ denotes a space):  subject ~ predicate[s] [ ~ object] .  subject ~ don't|doesn't ~ predicate [ ~ object] .   The square brackets mark an optional part, the vertical line two possible variants. Subject is a single word, noun or pronoun in singular. Predicate is a verb (single word) denoting some activity. Object can be any text. Object does not contain any dots. Any pair "verb + object" determines unique activity. The same verb with different objects makes different independent activities, i.e. the different and independent meaning of the sentence. Sentence without any object can be considered as sentence with an empty object. The verb without an object has different and independent meaning than the same verb with any non-empty object.   The first variant of sentence denotes a positive statement. The word "predicate[s]" means verb that matches the subject of the sentence. If the subject is "I" or "you", the verb has the same form as the infinitive. With any other subject, the letter "s" is appended on the end of the verb. Assume there are no irregular verbs.   The second variant is a negative statement. Verb "don't" or "doesn't" must also match the subject. The form "don't" is used with either "I" or "you", "doesn't" is used in any other case.   A special generic subject "everybody" can be used. It means the activity holds for any subject. Other special subject is "nobody". Such sentence also holds for any subject, but its meaning is negative. Both of these generic subjects can be used with the first variant only (without "doesn't"). The sentence "nobody likes something" is exactly equal to "everybody doesn't like something", except the latter form will never occur in the input.     Questions Each question has one of the following three forms:   1.  do|does ~ subject ~ predicate [ ~ object] ?  2.  who ~ predicates [ ~ object] ?  3.  what ~ do|does ~ subject do ?  The word "do|does" always matches the subject ("do I?", "do you?", "does any other subject?"). In the second type of question, predicate always matches the word "who", i.e. the "s" is always appended. Generic subjects cannot be used in questions.   

 There is a single positive integer T on the first line of input. It stands for the number of test cases to follow. Each test case begins with a line containing two integers K, L (1 <= K <= L <= 90) separated by a single space. K is the number of keys, L is the number of letters to be mapped onto those keys. Then there are two lines. The first one contains exactly K characters each representing a name of one key. The second line contains exactly L characters representing names of letters of an alphabet. Keys and letters are represented by digits, letters (which are case-sensitive), or any punctuation characters (ASCII code between 33 and 126 inclusively). No two keys have the same character, no two letters are the same. However, the name of a letter can be used also as a name for a key.   After those two lines, there are exactly L lines each containing exactly one positive integer F1, F2, ... FL. These numbers determine the frequency of every letter, starting with the first one and continuing with the others sequentially. The higher number means the more common letter. No frequency will be higher than 100000.   

 The only line of input contains the single integer N (1 <= N <= 18).

 The input is a sequence of at most 1024 positive integers. Each line contains a single integer. The sequence is followed by a zero, which indicate the end of data and should not be treated as input. You may assume that none of the input integers is greater than 151200.

 The input contains several data sets. Each data set represents the record of the market on one day. The first line of each data set contains an integer n (n < 1000) which is the number of orders in the record. Each line of the record describes an order, consisting of the name of the dealer, the type of the order, the name of the commodity and the quoted price. They are separated by a single space character.   The name of a dealer consists of capital alphabetical letters and is less than 10 characters in length. The type of an order is indicated by a string, "BUY" or "SELL". The name of a commodity is a single capital letter. The quoted price is a positive integer less than 1000.    The orders in a record are arranged according to time when they were received and the first line of the record corresponds to the oldest order.   The end of the input is indicated by a line containing a zero.  

 The input consists of multiple sub-problems followed by a line containing a zero that indicates the end of input. Each sub-problem is given in the following format.  n  a1 a2 ... an  b1 b2 ... bn  c1 c2 ... cn  d1 d2 ... dn  you may assume 0 < n <= 30, 0 < ai,bi,ci,di < 1

 The input consists of multiple data sets, each of which represents a dictionary and a sequence of button presses in the following format.   n  word1  ...  wordn  sequence   n is a positive integer, representing the number of words in the dictionary. the next n lines, each representing a word in the dictionary, only contain lower case letters from 'a' to 'z'. The order of words in the dictionary is arbitrary. No words occur more than once in the dictionary. The last line, sequence, is the sequence of button presses, and only contains digits from '2' to '9'.  You may assume that a dictionary has at most one hundred words and that the length of each word is between one and fifty, inclusive. You may also assume that the number of input digits in the sequence is between one and three hundred, inclusive.  A line containing a zero indicates the end of the input.  

 The input consists of n test cases. The first line of the input file contains the number n. Each following line contains one test case of the format:  xstart ystart xend yend xleft ytop xright ybottom   where (xstart, ystart) is the start and (xend, yend) the end point of the line and (xleft, ytop) the top left and (xright, ybottom) the bottom right corner of the rectangle. The eight numbers are separated by a blank. The terms top left and bottom right do not imply any ordering of coordinates. 

 The input is a sequence of at most 2000 triplets of positive integers, delimited by a space character in between. Each line contains a single triplet. The sequence is followed by a triplet of zeros, 0 0 0, which indicates the end of the input and should not be treated as data to be processed.   The integers of each input triplet are the integer m, the numerator a, and the denominator b described above, in this order. You may assume 4 < m <= 100000 and 1 <= a <= b <= 1000.  

 The input to your program is a sequence of blocks of lines. A block consists of lines, each containing an expression, and a terminating line. After the last block, there is another terminating line. A terminating line is a line solely consisting of a period symbol.   The first expression of a block is one prepared by Mr. Simpson, all that follow in a block are answers by the students. An expression consists of lowercase letters, digits, operators '+', '-'and '^', parentheses'(' and ')', and spaces. A line containing an expression has no more than 80 characters.  

 Input consists of several datasets. Each dataset consists of the followings:   > A line containing the name of the set (which has 2 to 20 alphanumeric characters).   > A line containing 3 positive integers n, s and t (2 < n < 11).   > Each of next n lines contains n-1 integers each. The i-th line (i= 1, 2, 3, ...) contains the time (in seconds) needed to go from the junction i-1 to all other junctions (except the (i-1)-th) in order 0, 1, 2, ... n.   > Next n-1 lines each contain a non-negative integer. The i-th line (i= 1, 2, 3, ...) contains the number of contestants waiting at the i-th junction.   > The last line of the dataset contains the time limit (in seconds, less than 10000000).   All integers on a single line are separated by exactly one space. Total number of contestants is at most 1000.   The end of input is marked with a line consisting of "TheEnd".  

 The first line of the input is an integer, less than 1000, that indicates the number of subsequent records.   The rest of the input is the indicated number of records. A single record has the following format:   (empty) (-) (team)1 (-) (team)2 (-) (team)3 (-) (team)4   (team)1 (-) (empty) (-) (m)12 (-) (m)13 (-) (m)14   (team)2 (-) (empty) (-) (empty) (-) (m)23 (-) (m)24   (team)3 (-) (empty) (-) (empty) (-) (empty) (-) (m)34   (team)4 (-) (empty) (-) (empty) (-) (empty) (-) (empty)   In the above, (-) is a single underscore (-) and (empty) a sequence of exactly four underscores (____). Each of (team)1,?,(team)4 is either an asterisk character (*) followed by exactly three uppercase letters (e.g., *ENG) , or an underscore followed by exactly three uppercase letters (e.g., _SWE). The former indicates that it is the team you are asked to calculate the probability of the second round qualification for. You may assume exactly one of (team)1,?, (team)4 is marked with an asterisk. Each (m)ij (1 <= i < j <= 4) is a match result between the (team)i and (team)j. Each match result is either __-_ (i.e., two underscores, hyphen, and another underscore) or of the form _x-y where each of x and y is a single digit (<= 8). The former indicates that the corresponding match has not been played, whereas the latter that the result of the match was x goals by (team)i and y goals by (team)j. Since each team has played exactly two matches, exactly two match results are in the former format.  

 The input consists of multiple data. Each data represents the state of the board of the game still in   progress. The format of each data is as follows.   N C         S 1,1      S 2,1 S 2,2    S 3,1 S 3,2 S 3,3     . . .  S N,1 . . . S N,N  N is the size of the board (3 <= N <= 10). C is the identification number of the player whose turn comes now (1 <= C <= 9). That is, your program must calculate his points in this turn. S i,j is the state of the vertex on the board (0 <= Si,j <= 9). If the value of Si,j is positive, it means that there is the stone numbered by Si,j there. If the value of S i,j is 0, it means that the vertex is "empty". Two zeros in a line, i.e., 0 0, represents the end of the input.  

 The first line of the input is a single integer n, indicating the number of records of Ninja Houses I have visited. You can assume that n is less than 100. Each of the following n records consists of numbers recorded on one exploration and a zero as a terminator. Each record consists of one or more lines whose lengths are less than 1000 characters. Each number is delimited by a space or a newline. You can assume that the number of rooms for each Ninja House is less than 100, and the number of doors in each room is less than 100.

 The input consists of several test cases, each on one line, as follows :   tl num1  t2 num2  ...  tn numn  0 0   Each test case consists of the following two positive integers, which are separated by one space : (1) the first integer (ti above) is the target number, (2) the second integer (numi above) is the number that is on the paper to be shredded.   Neither integers may have a 0 as the first digit, e.g., 123 is allowed but 0123 is not. You may assume that both integers are at most 6 digits in length. A line consisting of two zeros signals the end of the input.   

 Input contains (in given order): M, N, A(1), A(2), ..., A(M), u(1), u(2), ..., u(N). All numbers are divided by spaces and (or) carriage return characters. 

 The input consists of multiple data sets, each in the following format :   n p1 p2  xl yl a1  x2 y2 a2  ...  xi yi ai  ...  xn yn an   The first line has three non-negative integers n, p1, and p2. n is the number of questions Akira asked. pl and p2 are the populations of the divine and devilish tribes, respectively, in the legend. Each of the following n lines has two integers xi, yi and one word ai. xi and yi are the identification numbers of inhabitants, each of which is between 1 and p1 + p2, inclusive. ai is either yes, if the inhabitant xi said that the inhabitant yi was a member of the divine tribe, or no, otherwise. Note that xi and yi can be the same number since "are you a member of the divine tribe?" is a valid question. Note also that two lines may have the same x's and y's since Akira was very upset and might have asked the same question to the same one more than once.   You may assume that n is less than 1000 and that p1 and p2 are less than 300. A line with three zeros, i.e., 0 0 0, represents the end of the input. You can assume that each data set is consistent and no contradictory answers are included.   

 The input is composed of a number of configurations of the following form.   n  x1 y1 r1  x2 y2 r2  ...  xn yn rn   The first line in a configuration is the number of discs in the configuration (a positive integer not more than 100), followed by one line descriptions of each disc : coordinates of its center and radius, expressed as real numbers in decimal notation, with up to 12 digits after the decimal point. The imprecision margin is +/- 5 x 10^(-13). That is, it is guaranteed that variations of less than +/- 5 x 10^(-13) on input values do not change which discs are visible. Coordinates of all points contained in discs are between -10 and 10.   Confetti are listed in their stacking order, x1 y1 r1 being the bottom one and xn yn rn the top one. You are observing from the top.   The end of the input is marked by a zero on a single line.  

 The graph is given as a set of nodes denoted by numbers 1...n, n <= 100, and a set of undirected edges denoted by pairs of node numbers (n1, n2), n1 != n2. The input file contains m graphs. The number m is given on the first line. The first line of each graph contains n and k, the number of nodes and the number of edges, respectively. The following k lines contain the edges given by a pair of node numbers, which are separated by a space. 

 The first line of the input file contains the number of spreadsheets to follow. A spreadsheet starts with a line consisting of two integer numbers, separated by a space, giving the number of columns and rows. The following lines of the spreadsheet each contain a row. A row consists of the cells of that row, separated by a single space.   A cell consists either of a numeric integer value or of a formula. A formula starts with an equal sign (=). After that, one or more cell names follow, separated by plus signs (+). The value of such a formula is the sum of all values found in the referenced cells. These cells may again contain a formula. There are no spaces within a formula.   You may safely assume that there are no cyclic dependencies between cells. So each spreadsheet can be fully computed.   The name of a cell consists of one to three letters for the column followed by a number between 1 and 999 (including) for the row. The letters for the column form the following series: A, B, C, ..., Z, AA, AB, AC, ..., AZ, BA, ..., BZ, CA, ... ZZ, AAA, AAB, AAC, ... AAZ, ABA, ..., ABZ, ACA, ..., ZZZ. These letters correspond to the number from 1 to 18278. The top left cell has the name A1. See figure 1. 

 The input contains calculations adhering to the syntax given above. Each line contains either an assignment to a variable, a "PRINT" statement, a "RESET" statement or nothing. 

 Your program should read sets of data. The first line of the input file contains the number of the data sets. Each data set specifies the structure of a town and has the format:   no_of_intersections  no_of_streets  S1 E1  S2 E2  ......  Sno_of_streets Eno_of_streets   The first line of each data set contains a positive integer no_of_intersections (greater than 0 and less or equal to 120), which is the number of intersections in the town. The second line contains a positive integer no_of_streets, which is the number of streets in the town. The next no_of_streets lines, one for each street in the town, are randomly ordered and represent the town's streets. The line corresponding to street k (k <= no_of_streets) consists of two positive integers, separated by one blank: Sk (1 <= Sk <= no_of_intersections) - the number of the intersection that is the start of the street, and Ek (1 <= Ek <= no_of_intersections) - the number of the intersection that is the end of the street. Intersections are represented by integers from 1 to no_of_intersections.   There are no blank lines between consecutive sets of data. Input data are correct.  

 Input consists of several lines of integer numbers. The first line contains an integer n, which is the number of cases to be tested, followed by n lines, one integer 1 <= m <= 10^7 on each line.

 The number of rows, M, and columns, N, of the grid are given in line 1. K number of points are then given in the next one or more lines, where K <= MN. You may assume that 1 <= M <= 100 and 1 <= N <= 100. A pair of integers, representing x- and y-coordinates of the point respectively, denotes each point.   All the values given in any of the input lines are separated from each other by one or more white spaces including tabs.

 The input file contains several lines of input. Each line contains a single integer L(15 >= L > 2) that indicates the number of locations in the city. Input is terminated by a line where value of L is zero. This line should not be processed.

 The input file may contain multiple test cases. Each line contains a value of n (1 <= n <= 200). A line containing a zero terminates the input.

 The first line contains the number of scenarios.   Each scenario begins with the secret key of the Enigma. The secret key is specified by 6 lines. The first four lines contain a specification of the rotors π0, π2 and πR as a sequence of lowercase alphabetic characters. Character i (1<=i<=26) gives the mapping of the i-th character of the alphabet (e.g., "bha..." means that "a" is mapped to "b", "b" is mapped to "h", "c" is mapped to "a" etc.). Physically, the sequence of characters is given in clockwise direction looking from the front of the rotor stack π0, . . . , πR. After the rotors follows a similar line giving the plugboard permutation IP. Finally, the sixth line of the key gives the initial displacement k0, k1, k2, kR of the four rotors π0, π2, and πR as a string of four characters where "a" means that the rotor is in its original position (as defined by the rotor specification above), "b" means that it is rotated by one position in the usual way etc. For example, "dgaa" means that rotor π0 has initial displacement 3, π1 has 6, and π2, πR are both in their original position.   After the key follow two lines, each containing at least 1 and at most 80 lowercase letters, and no other characters. The first line contains the plaintext while the second line contains the ciphertext. The plaintext and any part of the key may be incomplete, i.e., some positions in the strings may be question marks "?". The number of question marks in the input will be at most 3.

 The colony is described by an equation ax+by+cz=d. There are N provinces in the colony. A city in a province can be described by a point in 3-dimension like (x, y, z). All the x, y and z co-ordinates will be within -100.00 and +100.00. The first line of input will contain a, b, c and d. Then the number of provinces (N) in the colony will be given in the second line. The remaining lines will describe each province one by one.   The description of a province starts with the number of cities M (3 <= M <= 4) in the province in a line followed by M lines. Each line contains 3 numbers describing respectively the x, y and z co-ordinates of a city in that province.

 The first line of the input contains exactly one positive integer d equal to the number of data sets, 1 <= d <= 20. The data sets follow.   Each data set consists of exactly two consecutive lines.   The first of those lines contains exactly two integers n and m separated by a single space, 3 <= n <= 10 000, 0 <= m <= n - 3. Integer n is the number of vertices of a polygon and integer m is the number of its diagonals, respectively.   The second of those lines contains exactly 2( m + n ) integers separated by single spaces. Those are ends of all sides and some diagonals of the polygon. Integers aj, bj on positions 2j - 1 and 2j, 1 <= j <= m + n, 1 <= aj <= n, 1 <= bj <= n, aj != bj, specify ends of a side or a diagonal. The sides and the diagonals can be given in an arbitrary order. There are no duplicates.   Alice does not cheat, i.e. the puzzle always has a solution.  

 The first line of the input contains exactly one positive integer d equal to the number of data sets, 1 <= d <= 200. The data sets follow.   Line i + 1 contains the i-th data set - exactly two integers ni and mi separated by a single space, 1 <= mi <= ni <= 10^9.  

 The first line of the input contains exactly one positive integer d equal to the number of data sets, 1 <= d <= 30. The data sets follow.   Each data set consists of exactly one line that contains exactly one Calendar Round date (maybe illegal): Tzolkin day number, Tzolkin day name, Haab day number and Haab month name separated by single spaces.

 The first line of the input contains exactly one positive integer d equal to the number of data sets, 1 <= d <= 20. The data sets follow.   The first line of each data set contains a Morse sequence - a nonempty sequence of at most 10 000 characters "." and "-" with no spaces in between.   The second line contains exactly one integer n, 1 <= n <= 10 000, equal to the number of words in a dictionary. Each of the following n lines contains one dictionary word - a nonempty sequence of at most 20 capital letters from "A" to "Z". No word occurs in the dictionary more than once.  

 The first line of the input contains exactly one positive integer d equal to the number of data sets, 1 <= d <=10. The data sets follow.   Each data set consists of exactly two consecutive lines.   The first of those lines contains exactly two integers n and m separated by a single space, 2 <= n <= 10 000, 0 <= m <= 25 000. Integer n is the number of registers and integer m is the number of program instructions.   The second of those lines contains exactly 2m integers separated by single spaces - the program  itself. Integers aj, bj on positions 2j -1 and 2j, 1 < j < m, 1 <= aj < bj <= n, are parameters of the j-th instruction in the program.  

 The first line of the input contains the number of data sets k, 1 <= k <= 30. The data sets follow.   The first line of each data set contains one integer n, the number of cisterns, 1 <= n <= 50 000. Each of the following n lines consists of 4 nonnegative integers, separated by single spaces: b, h, w, d - the base level of the cistern, its height, width and depth in meters, respectively. The integers satisfy 0 <= b <= 10^6 and 1 <= h * w * d <= 40 000. The last line of the data set contains an integer V - the volume of water in cubic meters to be injected into the network. Integer V satisfies 1 <= V <= 2 * 10^9.  

 The first line of the input contains exactly one positive integer d equal to the number of data sets, 1 <= d <= 20. The data sets follow.   Each data set consists of two consecutive lines. The rst of those lines contains exactly two positive integers n and m separated by single space, 1 <= n <= 100 000, 1 <= m <= 200 000. Integer n is the number of the net inputs and integer m is the number of the gates in the net.   The second of those lines contains exactly 2m nonzero integers, separated by single spaces. The numbers on positions 2j - 1 and 2j describe the signal sources for the inputs to gate j. The positive number s means the output of gate s. The negative number s means the (-s)-th input to the net. The gates and the net inputs are numbered starting from one. The input of each gate is connected to an input of the net or to an output of a gate whose description occurred earlier in the sequence. Each net input is connected to at least one gate input. Each gate output is connected to at least one gate input except the output of the last gate that is connected to the output of the net.

 The first line of the input contains exactly one positive integer d equal to the number of data sets, 1 <= d <= 20. The data sets follow.   The first line of each data set contains exactly one integer n, 1 <= n <= 8 000, equal to the number of vertical line segments.   Each of the following n lines consists of exactly 3 nonnegative integers separated by single spaces:   yi', yi'', xi - y-coordinate of the beginning of a segment, y-coordinate of its end and its x-coordinate, respectively. The coordinates satisfy 0 <= yi' < yi'' <= 8 000, 0 <= xi <= 8 000. The segments are disjoint.

 The first line contains the number of scenarios.   For each scenario, the grid dimensions m and n will be given as two integer numbers in a single line, separated by a single blank, satisfying 1 < m < 50 and 1 < n < 50.

 Input consists of several lines. The first line contains an integer n, which is the number of lines in the shared text space. Then follow n lines each consisting of not more than 255 ASCII characters.

 The first line of the input contains two integers n and m, where 2 <= n <= 2000 and n-1 <= m <= n(n-1)/2. Integer n is the number of intersections in the town and interger m is the number of streets.   Each of the next m lines contains three integers a, b and c, where 1 <= a <= n, 1 <= b <= n, a != b and c belongs to {1, 2}. If c = 1 then intersections a and b are connected by an one-way street from a to  b. If c = 2 then intersections a and b are connected by a two-way street. There is at most one street  connecting any two intersections.   Process to the end of file.  

 The first line of the input contains an integer n (3 <= n <= 50 000) - the number of sides of a rhombastic grid polygon. Each of the next n lines contains a description of one side of the polygon. The sides are given one by one in the clockwise order. No two consecutive sides of the polygon lie on the same straight line. The description of a side consists of two integers d and k. Integer d says what is the direction of the side according to the following figure:      Integer k is the length of the polygon side measured in the number of sides of grid triangles. Sum of all numbers k is not larger than 100 000.   Process to the end of file.  

 The rst and only line of the input contains exactly two integers n and m separated by a single space, 1 <= m <= n <= 100 - the parameters of the game, where n is the number of donuts in the box at the beginning of the game and m is the upper limit on the number of donuts to be taken by one player in one move.   Process to the end of file.  

 Input contains an edited table. It consists of no more than 100 lines and line length is no more then 255 characters. Lines themselves do not contain leading and trailing spaces. The input does not contain empty lines. 

 Input contains a list of full file names without empty lines and spaces. Each name is written in a separate line of input data file and preceded with a control sign: "-" for delete or "+" for keep. Full file names are not repeated. The list comprises at least one file, and at least one file is marked to be deleted. There are no more than 1000 files.

 Input contains (in indicated order): L, W, H, x1, y1, z1, x2, y2, z2. The numbers are separated with spaces and end-of-line characters.

 The first line of input contains M and N. The second line contains binary real number 0.b(1)b(2)...b(p) (without leading, trailing and other spaces). 

 Input contains date and time in EDATE format in the first line. Minimum permissible year in the input data is 0001, maximum - 9998. Input EDATA string does not contain leading and trailing spaces.  

 The first line contains the number of scenarios.   Every scenario contains a single date on a line by itself. A date consists of three parts: A day, a month, and a year given in any order, separated either by exactly two identical delimiters, or not separated by delimiters at all. Delimiters can be slashes '/', backslashes '\', hyphens '-', dots '.', or commas ','. The day and month are represented by a single digit, or by two digits, the first of which can be a leading zero. Valid years are in the range 1700 . . . 2299; either all four digits are given, or just the last two that specify the year relative to the century. In the latter case, a leading zero may be omitted.   Dates are considered illegal if no valid interpretation exists. More precisely, a date is illegal if no classification of the digits as day, month, and year results in a valid date in the range January 1, 1700, to December 31, 2299. However, you can be sure that all dates given contain 3 to 8 digits, and no other characters except for maybe the two delimiters.   Remember that February 29 is a valid date for leap-years only. A year is a leap-year if and only if either its number is divisible by four, but not by one hundred, or if its number is divisible by four hundred. So, in particular, 2000 is a leap-year, while 1700, 1800, 1900, 2100, or 2200 are not.  

 The first line contains the number of scenarios.   In each scenario, you are first given six lines with a graphical representation of the six pieces. In that representation, "X" symbolises solid wood, a dot "." stands for a 1 * 1 * 1 piece of wood that was cut out. A column with "!" stands on the right of each piece to separate them from each other. There is a blank line following every scenario.   It is not necessary that the pieces can really be cut out of wood or that they form a stable cube, as you can see in the sample input, second example.

 The first line contains the number of scenarios.   Each scenario begins with a line containing the number w of distinct words in the dictionary (0<=w<=1000). These words are iven in the next w lines in ascending alphabetic order. Every line starts with the word which is a sequence of lowercase letters from the alphabet without whitespace, followed by a space and an integer p, 1<=p<=100, representing the probability of that word. No word will contain more than 100 letters.   Following the dictionary, there is a line containing a single integer m. Next follow m lines, each consisting of a sequence of at most 100 decimal digits 2ï¿½, followed by a single 1 meaning "next word".

 The first line contains the number of scenarios.   In the first line of the input for every scenario, you are given two signal identifiers for the departure and the destination, separated by a single blank. The following line contains the number n of elements (points and signals) in the track plan. You can assume 1<=n<=200 and that each element has a unique identifier of at most 20 alphanumeric characters. The identifier "XXX" is given to track ends.   There are signal and point elements, given in the following format:   Points are specified by a line "W I F M P" where W stands for "Weiche" (German for point), I is the identifier of the point, F identifies the front element of the point, and M and P give the identifiers of the back elements of the point depending on whether it is in minus or plus position.   Signals are specified by a line "S I F B" where S stands for "Signal" (German for signal), I is the identifier of the signal, and F and B give the identifiers of the front and back elements of the signal.   The direction for which the signal is valid is from front to back.   The following line contains the number p, 0<=p<=100, of path selection rules, followed by another p lines of the rules themselves. A rule is of the form "FW X Y Z" where FW is the identifier of "Fahrstrabenwahl-Regel" (German for path selection rule), X, Y and Z are the elements of the rule as explained above.  

 The input is merely a sequence of a commands, one per line, and is terminated by an EOF. No line contains more than 10000 characters. There are three command words: ENCRYPT, DECRYPT, and CIPHER. The case of the letters in these words is not important, and each word will be followed by at least one space. Any line which begins with any word other than one of these three commands requires the response "Command not understood."  The ENCRYPT and DECRYPT commands are self-explanatory. The encrypt command is followed by plain text which needs to be encrypted and the decrypt command is followed by encrypted text which must be put into plain text. Whatever follows one of these two command words should be either encrypted or decrypted using the current cipher. If no cipher has yet been given, you should use the default cipher.  The CIPHER command should be followed by the twenty-six letters of the alphabet. The order of these letters is important and that order determines the value for each character ? the first letter has value 0; the second letter has value 1; etc. There may be spaces and punctuation; these should be ignored; however, this line must have exactly twenty-six letters on it with no repetitions. Any problem requires the response, "Bad cipher. Using default." (And, as indicated, you should actually use the default). If the cipher is understandable, you need to echo it back to the user as shown below, and then use it for all subsequent commands.  

 The input data for the program is simply a list of integers for which the digit counts are desired. All of these input values will be less than or equal to 366 and greater than 0, except for the last integer, which will be zero. Don't bother to process this zero value; just stop your program at that point.

 The first line is the amount of tests. Each next line contains one integer n (1 <= n <= 32767) - the amount of crazy tea participants.

 A set of products starts with an integer 0 <= n <= 10000, which is the number of products in the set, and continues with n pairs pi di of integers, 1 <= pi <= 10000 and 1 <= di <= 10000, that designate the profit and the selling deadline of the i-th product. White spaces can occur freely in input. Input data terminate with an end of file and are guaranteed correct. 

 The program input is from a std input. Each data set in the input for a particular set of distances between pairs of bushes on the road Frodo is traveling along. Each data set starts with the number of distances followed by the distances in nondecreasing order. White spaces can occur freely in the input.  It is known that there are at least two bushes and at most 1000 bushes along the road. Moreover, the value of P cannot exceed 10^9.

 The program input is from the std input. Each data set in the input contains two strings representing the given sequences. The sequences are separated by any number of white spaces. The input data are correct.

 There are several data sets in the input. Each data set encodes a power network. It starts with four integers: 0 <= n <= 100 (nodes), 0 <= np <= n (power stations), 0 <= nc <= n (consumers), and 0 <= m <= n^2 (power transport lines). Follow m data triplets (u,v)z, where u and v are node identifiers (starting from 0) and 0 <= z <= 1000 is the value of l max(u,v). Follow np doublets (u)z, where u is the identifier of a power station and 0 <= z <= 10000 is the value of p max(u). The data set ends with nc doublets (u)z, where u is the identifier of a consumer and 0 <= z <= 10000 is the value of c max(u). All input numbers are integers. Except the (u,v)z triplets and the (u)z doublets, which do not contain white spaces, white spaces can occur freely in input. Input data terminate with an end of file and are correct.

 The first line of the input contains an integer N -- determining the number of equations. Next 2*N lines contain the equations. One equation is defined in two lines. The first line is the expression, defining the left side of the equation; second line is an integer result, defining the right side of the equation. The input lines do not have blanks. The strings representing expressions are guaranteed to have no syntax errors. 

 Your program has to be ready to solve more than one test case. The first line of the input will contains only the number T of the test cases. Each of the following T lines will describe one function - first the numbers n and k separated by single space (1 <= n <= 18,0 <= k <= n) and then, separated by one more space a string of 2^n 0's and 1's that are the coefficients of the corresponding polynomial, ordered as in the general form of the polynomial given above.

 The input contains several data sets in text format. Each data set represents a tree with the following description:      the number of nodes   the description of each node in the following format node_identifier:(number_of_roads) node_identifier1 node_identifier2 ... node_identifiernumber_of_roads or node_identifier:(0)    The node identifiers are integer numbers between 0 and n-1, for n nodes (0 < n <= 1500);the number_of_roads in each line of input will no more than 10. Every edge appears only once in the input data.

 The input contains several data sets in text format.   The format for the data set is:   The number of lines for the data set;  information_for__one_or_more_weeks  The format of the information for a week is the following:  job_type1 number_of _hours1  job_type2 number_of _hours2  job_type3 number_of _hours3  ... ...  . total_paid ( the dot marks the ending of info for a week)   The job type is represented as a string of characters (limited to 20). The number of hours is a positive integer (smaller than 1E5). The total paid is a positive integer (smaller than 2E10).  

 The input has several data sets separated by an empty line, each data set having the following format:   On the first line - the number N  On the second line - the number M  On the following M lines - the digits X1,X2..XM.

 The input contains several data sets in text format. Each data set represents one set of subjects of the study, with the following description:   the number of students  the description of each student, in the following format  student_identifier:(number_of_romantic_relations) student_identifier1 student_identifier2 student_identifier3 ...  or  student_identifier:(0)   The student_identifier is an integer number between 0 and n-1 (n <=500 ), for n subjects.

 The input is a textual file which has one f(x) definition per line. The input lines do not have blanks.

 The input contains the text description of several sets of rectangles. The specification of a set consists of the number of rectangles in the set and the list of rectangles given by the minimum and maximum x and y coordinates separated by white spaces, in the format:   nr_rectangles  xmin1 xmax1 ymin1 ymax1  xmin2 xmax2 ymin2 ymax2  ...  xmin n xmax n ymin n ymax n  For each set,there will be less than 5000 rectangles.

 Your program should read sets of data from the std input. The first line of the input contains the number of the data sets. Each data set is presented in the following format:   P N  Count1 Student 1 1 Student 1 2 ... Student 1 Count1 Count2 Student 2 1 Student 2 2 ... Student 2 Count2 ...  CountP Student P 1 Student P 2 ... Student P CountP  The first line in each data set contains two positive integers separated by one blank: P (1 <= P <= 100) - the number of courses and N (1 <= N <= 300) - the number of students. The next P lines describe in sequence of the courses �from course 1 to course P, each line describing a course. The description of course i is a line that starts with an integer Count i (0 <= Count i <= N) representing the number of students visiting course i. Next, after a blank, you抣l find the Count i students, visiting the course, each two consecutive separated by one blank. Students are numbered with the positive integers from 1 to N.  There are no blank lines between consecutive sets of data. Input data are correct.  

 The data set, which is read from a the std input, starts with the tree description, in the form:   nr_of_vertices   vertex:(nr_of_successors) successor1 successor2 ... successorn   ...  where vertices are represented as integers from 1 to n ( n <= 900 ). The tree description is followed by a list of pairs of vertices, in the form:   nr_of_pairs  (u v) (x y) ...   The input file contents several data sets (at least one).  Note that white-spaces (tabs, spaces and line breaks) can be used freely in the input.

 The input contains several triangle descriptions. The first line of each description contains an integer n (1 <= n <= 100), which gives the height of the triangle. The next n lines contain characters of the set {space, #, -} representing the rows of the triangle, where `#' is a black and `-' a white field. The spaces are used only to keep the triangle shape in the input by padding at the left end of the lines. (Compare with the sample input. The first test case corresponds to the figure.)  For each triangle, the number of the characters `#' and `-' per line is odd and decreases from 2n - 1 down to 1.    The input is terminated by a description starting with n = 0.  

 The input starts with a line containing the number k of programs in the input. Following this are k programs which are constructed according to the grammar given above. Whitespace and newlines can appear anywhere in a program, but not within the keywords BEGIN, END, LOOP and OP or in an integer value. The nesting depth of the LOOP-operators will be at most 10. 

 The input contains several strings, each one on a line by itself, and each one consisting of at most 200 characters. The last string will be END, signaling the end of the input. All other strings describe one treasure map each, according to the following format:   The description is a comma-separated list of pairs of lengths (positive integers less than 1000) and directions (N (north), NE (northeast), E (east), SE (southeast), S (south), SW (southwest), W (west) or NW (northwest)). For example, 3W means 3 steps to the west, and 17NE means 17 steps to the northeast. A full stop (.) terminates the description, which contains no blanks. 

 The input contains several floor descriptions. Every description starts with the number n of vertices that bound the floor (4 <= n <= 100). The next n lines contain two integers each, the x and y coordinates for the n vertices, given in clockwise order. All vertices will be distinct and at corners of the polygon. Thus the edges alternate between horizontal and vertical.   A zero value for n indicates the end of the input. 

 The input contains the descriptions of several mazes. Each maze description starts with a line containing two integers r and c (both <= 20) representing the number of rows and columns of the maze.   Following this are r lines each containing c characters. Each character describes one cell of the maze. A cell full of rock is indicated by a `#' and an empty cell is represented by a `.'. Your starting position is symbolized by `S', the starting position of the box by `B' and the target cell by `T'.   Input is terminated by two zeroes for r and c.  

 The input contains the descriptions of several scenarios in which Trisha tries to escape. Every description starts with a line containing two integers n and k. n is the number of cities through which Trisha's escape may take her, and k is the number of flights she will take. The cities are numbered 1, 2, ..., n, where 1 is Paris, her starting point, and n is Atlanta, her final destination. The numbers will satisfy 2 <= n <= 10 and 1 <= k <= 1000.  Next you are given n(n - 1) flight schedules, one per line, describing the connection between every possible pair of cities. The first n - 1 flight schedules correspond to the flights from city 1 to all other cities (2, 3, ..., n), the next n - 1 lines to those from city 2 to all others (1, 3, 4, ..., n), and so on.   The description of the flight schedule itself starts with an integer d, the length of the period in days, with 1 <= d <= 30. Following this are d non-negative integers, representing the cost of the flight between the two cities on days 1, 2, ..., d. A cost of 0 means that there is no flight between the two cities on that day.   So, for example, the flight schedule "3 75 0 80" means that on the first day the flight costs 75, on the second day there is no flight, on the third day it costs 80, and then the cycle repeats: on the fourth day the flight costs 75, there is no flight on the fifth day, etc.   The input is terminated by a scenario having n = k = 0.   

 The input consists of several data sets. Each set begins with a line containing the number n of stacks Bob has built. The next line contains n numbers, the heights hi of the n stacks. You may assume 1 <= n <= 50 and 1 <= hi <= 100.   The total number of bricks will be divisible by the number of stacks. Thus, it is always possible to rearrange the bricks such that all stacks have the same height.   The input is terminated by a set starting with n = 0. This set should not be processed.  

 The input contains several descriptions of conversations. Each description starts with an integer n, the number of statements in the conversation. The following n lines each contain one statement by an inhabitant. Every statement line begins with the speaker's name, one of the capital letters A, B, C, D, E, followed by a colon `:'. Next is one of the following kinds of statements:   I am [not] ( divine | human | evil | lying ).   X is [not] ( divine | human | evil | lying ).   It is ( day | night ).   Square brackets [] mean that the word in the brackets may or may not appear, round brackets () mean that exactly one of the alternatives separated by | must appear. X stands for some name from A, B, C, D, E. There will be no two consecutive spaces in any statement line, and at most 50 statements in a conversation.   The input is terminated by a test case starting with n = 0.   

 The input to your program will consist of several descriptions of MBone networks. The first part of each description defines the network topology, and the second part describes the activities on this network. The first part starts with a line containing a single integer m (1 < m <= 10), the number of islands in the network. A value of m = 0 indicates the end of input. The following lines contain the descriptions for the m islands.   Each island description starts with a line containing the name of the multicast router (given as a string of at most 20 non-blank characters) followed by an integer for the number of remaining lines in the island description. These lines can be of two kinds:   Host belonging to island: H < Host Address >   Tunnel: T < Threshold > < Dest. Name >   < Host Address > and < Threshold > are positive integer values specifying the address of the host and the threshold of the tunnel, respectively. < Dest: Name > is the name of the destination router at the other end of the tunnel, which is always different from the current router.   The first line of the second part contains a single integer of at most 1000 indicating the number of lines in the following activity description. Each one of these lines describes the activity of a host: join a group, leave a group or send a packet to a group.   Join a group: J < Host Address > < Group Address >   Leave a group: L < Host Address > < Group Address >   Send a packet to a group: S < Host Address > < Group Address > < Packet ID > < TTL >   The < Group Address >, < Packet ID > and < TTL > are positive integer values with the obvious meaning. All names used for the routers and all host addresses used in a scenario, as well as all packet IDs are unique. TTLs of packets will be at most 1000. There will be at most 50 hosts and 100 tunnels in the network and at most 20 active groups (i.e, groups for which there is at least one member host) at any time. No host will try to leave a group that it is not in, nor try to join a group it is in.   

 The input consists of a series of function descriptions. Each description starts with a line containing a single integer n (n <= 10), the number of input/output pairs to follow. The following two lines contains n integers each: x1, x2, ..., xn in the first line (all different), and y1, y2, ..., yn in the second line. The numbers will be no more than 30000 in absolute value.   The input is terminated by a test case starting with n = 0. This test case should not be processed. 

 The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. The first line of each case contains only one integer M, 1 <= M <= 100. It is the size of 3D puzzle cube. Then follow M lines, each contains exactly M 2 numbers on the tiles for one layer. First is the layer on the top of the cube and the last one on the bottom. In each layer numbers are arranged from the left top corner linewise to the right bottom corner of the layer. In other words, slot with coordinates (x,y,z) is described by the (x+M.y+1)-th number on the (z+1)-th line. Numbers are separated by space. Number 0 means free position. 

 The input consists of pictures of several dice throws. Each picture description starts with a line containing two numbers w and h, the width and height of the picture, respectively. These values satisfy 5 <= w, h <= 50.   The following h lines contain w characters each. The characters can be: "." for a background pixel, "*" for a pixel of a die, and "X" for a pixel of a die's dot.   Dice may have different sizes and not be entirely square due to optical distortion. The picture will contain at least one die, and the numbers of dots per die is between 1 and 6, inclusive.   The input is terminated by a picture starting with w = h = 0, which should not be processed.   

 The input contains several product descriptions. Each description starts with a line containing two integers n and m, the number of bugs and patches, respectively. These values satisfy 1 <= n <= 20 and 1 <= m <= 100. This is followed by m lines describing the m patches in order. Each line contains an integer, the time in seconds it takes to apply the patch, and two strings of n characters each.   The first of these strings describes the bugs that have to be present or absent before the patch can be applied. The i-th position of that string is a ``+'' if bug bi has to be present, a ``-'' if bug bi has to be absent, and a `` 0'' if it doesn't matter whether the bug is present or not.   The second string describes which bugs are fixed and introduced by the patch. The i-th position of that string is a ``+'' if bug bi is introduced by the patch, a ``-'' if bug bi is removed by the patch (if it was present), and a ``0'' if bug bi is not affected by the patch (if it was present before, it still is, if it wasn't, is still isn't).   The input is terminated by a description starting with n = m = 0. This test case should not be processed.  

 The input consists of the description of several simulations you have to perform. Each description starts with a line containing two integers, n and m, the number of ports and transrobs, respectively, satisfying 2 <= n <= 100 and 1 <= m <= 20. The next m lines contain a single integer li each, the maximum load that transrob i can carry, measured in galactic tons.   This is followed by one or more shipments to perform. Each shipment is described by a line containing four integers, t, o, d, w: the time t the request was made at (measured in minutes since the beginning of the simulation), the port number o where the shipment comes from (origin), the port number d of the shipment's destination, and the weight w of the container in galactic tons.   The request times are in strictly increasing order in the input file. The values satisfy 1 <= t, 1 <= o, d <= n, o != d and 1 <= w <= max{li|1 <= i <= m}.   The description of shipments is terminated by the line ``-1 -1 -1 -1''.   The input is terminated by a test case starting with n = m = 0. This test case should not be processed.  

 The input consists of several test cases. Each test case describes a set of electrical devices and gives a sequence of turn on/off operations for these devices.   The first line of each test case contains three integers n, m and c, where n is the number of devices (n <= 20), m the number of operations performed on these devices and c is the capacity of the fuse (in Amperes). The following n lines contain one positive integer ci each, the consumption (in Amperes) of the i-th device.   This is followed by m lines also containing one integer each, between 1 and n inclusive. They describe a sequence of turn on/turn off operations performed on the devices. For every number, the state of that particular devices is toggled, i.e. if it is currently running, it is turned off, and if it is currently turned off, it will by switched on. At the beginning all devices are turned off.   The input will be terminated by a test case starting with n = m = c = 0. This test case should not be processed. 

 The first line of input contains the two integers n and m where 0 < n, m <= 500. The next line contains p, the number of vertices in the polygon, where 3 <= p <= 8. Each of the next p lines contains two integers x and y where 0 < x < n and 0 < y < m, specifying the vertices of the polygon. The vertices are listed in clockwise order. You may assume that the polygon does not intersect itself, and that no three consecutive vertices are colinear. 

 The input file contains several descriptions of fastfood chains. Each description starts with a line containing the two integers n and k. n and k will satisfy 1 <= n <= 200, 1 <= k <= 30, k <= n. Following this will n lines containing one integer each, giving the positions di of the restaurants, ordered increasingly.   The input file will end with a case starting with n = k = 0. This case should not be processed. 

 The input consists of several heap descriptions. Each heap descriptions starts with a line containing a single integer n, the number of slides in the heap. The following n lines contain four integers xmin, xmax, ymin and ymax, each, the bounding coordinates of the slides. The slides will be labeled as A, B, C, ... in the order of the input.   This is followed by n lines containing two integers each, the x- and y-coordinates of the n numbers printed on the slides. The first coordinate pair will be for number 1, the next pair for 2, etc. No number will lie on a slide boundary.   The input is terminated by a heap description starting with n = 0, which should not be processed.  

 The input file contains several gametree descriptions. Each description starts with a line containing the number n of identifiers used in the description. The identifiers used will be the first n lowercase letters of the alphabet. The following n lines contain the definitions of these identifiers (in the order a, b, ...). Each definition may contain arbitrary whitespace (but of course there will be no spaces within a single integer). The right hand side of a definition will contain only identifiers from the first n lowercase letters. The inputs ends with a test case starting with n = 0. This test case should not be processed. 

 Input will consist of several pairs of nonzero numbers written in the Egyptian system described above. There will be one number per line; each number will consist of groups of symbols, and each group is terminated by a single space (including the last group). Input will be terminated by a blank line. 

 The input consists of a series of data sets.   The first line of each data set contains a positive integer value, N, greater than one (1) and less than 50.   There is one positive integer per line for the next N lines that constitute the set for which the pairs are to be examined. These integers are each greater than 0 and less than 32768.   Each integer of the input stream has its first digit as the first character on the input line.   The set size designator, N, will be zero to indicate the end of data.  

 The input consists of a series of data sets.   The first line of each data set contains a positive integer value, N, greater than one (1) and less than 50.   There is one positive integer per line for the next N lines that constitute the set for which the pairs are to be examined. These integers are each greater than 0 and less than 32768.   Each integer of the input stream has its first digit as the first character on the input line.   The set size designator, N, will be zero to indicate the end of data.  

 Each of the separate series to be examined is contained on a single line of input.   Each series to be analyzed consists of at least one and no more than 30 unsigned, non-zero integers. Each integer in a series has at least one digit and no more than four digits. The integers are separated from each other by a single blank character. Each of the series will be terminated by a single zero (0) digit. This terminator should not be considered as being part of the series being analyzed.   The set of series to be analyzed is terminated by a single zero (0) digit as the input on a line. This terminator should not be considered to be a series, and no output should be produced in response to its encounter. 

 The input consists of a series of digital images. Each image data set has the following format:   First line -  A single unsigned integer, N, with value greater than zero (0) and less than 13. The first digit of N will be the first character on a line.   Next N lines -  Each line has exactly 25 characters; one or more X's, then zero or more spaces, then one or more X's.   The end of data is signaled by a null data set having a zero on the first line of an image data set and no further data.  

 The input time data are given as floating point values measured in seconds. There will be no time-data values less than zero, and none greater than 600. Each line of input will have one floating-point value that should be read using the default float/real input format.   Process the input data stream until the end-of-file is encountered. 

 The input consists of a series of data sets having the following format:   First line -  A single unsigned integer, N, with value greater than zero (0) and less than eleven (11). The integer is left-justified on the input line.   Next N lines -  Each line has a string of seven (7) contiguous Y/N characters showing the light condition of the segments of the LED display. These successive lines supposedly represent a ``count down" sequence. The first of these seven characters, the illumination reading for the ``a" segment, will be the first character on a line.   The end of data is signaled by a null data set having a zero on the first line and no further data.   There is no information about where the ``count down" sequence begins for a given data set. There is no information that carries over from one data set to the next; each data set represents a different LED being tested. 

 The input consists of a series of single words, one per line. The words are at least one letter long and no more that five letters. Only the lower case alphabetic {a,b,...,z} characters will be used as input. The first letter of a word will appear as the first character on an input line.   The input will be terminated by end-of-file. 

 The input consists of a series of data sets. Each data set consists of four molecular chains of 12 fixed elements each. These 12 elements are given as contiguous capital letters. The molecule designators within the chains will be restricted to the sixteen letters, A...P. The first letter of a chain will appear as the first character on an input line.   The first molecule designator within the first chain of a data set will be the letter "Q" to indicate the end of data. 

 The first line of input will be the ``current'' date.   All dates will be specified in the form: dayname month date, where:   dayname is single character from the set { M, T, W, R, F } representing Monday, Tuesday, Wednesday, Thursday, and Friday, respectively.   month is an integer such that 1 <= month <= 12.   date is an integer such that 1 <= date <= 31.   The next line of input will contain two integers, n and t. n specifies how many meetings should be scheduled, while t indicates how long each meeting will last. t will be specified in increments of 15 minutes.   All times will be specified as zero padded 4 digit integers in military time. The first two digits indicate the hour (00 corresponds to midnight). The appointment times in the input will be in the range of 09 <= hour <= 17. The last two digits indicate the minute, and will be in the be from the set { 00, 15, 30, 45 } .   You may assume that date, while formally bounded by 31, will not be greater than the number of days in the month. You may also assume that all years will not be leap years.   The rest of the input will contain the schedules for at most 100 individuals. Each schedule will begin with a line specifying the individual's name, followed by a list of appointments for that individual, ending with the word ``done'' on a line by itself. No individual will have more than 100 appointments scheduled. Each appointment will be a date followed by a start time and an end time. No appointment will extend before 9am or after 5pm.   The last line of input will be the word ``done'' on a line by itself.   No appointment will be before the current date, or more than 1 year after the current date.  

 The first line of input will contain two integers. The first integer, n, specifies the number of criteria that will be measured for each year. This value will be such that (1 <= n <= 100). The second integer, y specifies how many years will be considered. The value of y will be such that (1 <= y <= 10).   The rest of the input will consist of sequences of possible configurations of supercomputers; each line will contain n floating point values. The supercomputer configurations will be grouped in sets of y , i.e., the first y lines (after the initial line of two integers) will be the yearly configurations for the first computer. The next y lines will be the yearly configurations for the second computer, etc.   The first number on the input line corresponds to the value on the first axis, the second number corresponds to the value on the second axis, and so on.   The final line of input will contain n floating point zeros.  

 The first line of input will consist of two integers separated by a space. The first integer specifies the number of polygons to be sorted. The second integer specifies the number of vertices for each polygon.   The rest of the input will consist of two lists of coordinates. The first is a list of coordinates describing the shape of each polygon in terms of the values on each of its axes (i.e., the values for r1 through r6 in the figure below).      The vertices of each polygon are distributed at equal angles around the origin, with the first vertex aligned at 12 o'clock. The vertices are given in clockwise order. The polygons in this list are unique with respect to rotation and dilation. That is, no polygon will be exactly like any other polygon (having the same vertices in the same locations), nor can any polygon be rotated about its center and/or uniformly scaled such that it will be exactly like another polygon in the list.   The second list of polygon coordinates corresponds to the polygons in the first list, but as measured by a camera. The vertices of each polygon in this case will be given as (x, y) pairs with respect to the camera's viewpoint origin and are given in clockwise order. The first vertex given is arbitrary, however.      Note that the camera's view of each polygon may include magnification or de-magnification (which may be different for each viewed polygon). Moreover, the camera can only resolve the polygon vertices to within plus or minus one pixel in its field of view, so there may be some jitter associated with the viewed vertex locations. For each polygon, the maximum amount of jitter at each vertex is guaranteed to be less than one percent of the distance from the origin to the vertex farthest away from the origin.   All of the polygons viewed by the camera will be right-side up.   

 The first line of input will specify the length (in characters) of the sides of the letter matrix (the matrix of letters will be square). The length, l, will be in the range 1 <= l <= 100. The next l lines of input will be the matrix itself, each line will contain l uppercase letters.   A list of words will follow. Each word will be on a line by itself; there will be 100 or fewer words. Each word will be 100 or fewer characters long, and will only contain uppercase letters.   The final line of input will contain a single zero character.  

 The input will describe the topology of a network connecting n processors. The first line of the input will be n, the number of processors, such that 1 <= n <= 100.   The rest of the input defines an adjacency matrix, A. The adjacency matrix is square and of size n x n. Each of its entries will be either an integer or the character x. The value of A(i,j) indicates the expense of sending a message directly from node i to node j. A value of x for A(i,j) indicates that a message cannot be sent directly from node i to node j.   Note that for a node to send a message to itself does not require network communication, so A(i,i) = 0 for 1 <= i <= n. Also, you may assume that the network is undirected (messages can go in either direction with equal overhead), so that A(i,j) = A(j,i). Thus only the entries on the (strictly) lower triangular portion of A will be supplied.   The input to your program will be the lower triangular section of A. That is, the second line of input will contain one entry, A(2,1). The next line will contain two entries, A(3,1) and A(3,2), and so on. 

 The input will consist of at most 100 lines of text, each of which contains a single VeryLongInteger. Each VeryLongInteger will be 100 or fewer characters in length, and will only contain digits (no VeryLongInteger will be negative).   The final input line will contain a single zero on a line by itself.  

 The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case consists of exactly one line with two positive integers separated by space. These are the reversed numbers you are to add. 

 The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case consists of exactly two lines. At the first line, there are two integers m and k, 1 <= k <= m <= 500. At the second line, there are integers p1, p2, ... pm separated by spaces. All these values are positive and less than 10000000. 

 The input consists of N cases. The first line contains only one positive integer N. Then follow the cases. Each case starts with a line containing four integers F, E, A, B, where F, 1 <= F < 50000000 determines the number of floors in the skyscraper (this means that there are floors 0 to F-1), E, 0 < E < 100 is the number of elevators and A, B, 0 <= A,B < F are numbers of the two floors between which the piece of furniture should be moved. Then follow E lines. Each of them contains description of one elevator. There are exactly two integers X and Y, X > 0, Y >= 0 at each line. Y determines, that the elevator starts on the Y-th floor and X determines, that it stops on every X-th floor, eg. for X = 3, Y = 7 the elevator stops on floors 7, 10, 13, 16, etc.). 

 The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case consists of exactly one line containing necklace description. Maximal length of each description is 10000 characters. Each bead is represented by a lower-case character of the english alphabet (a--z), where a < b ... z. 

 The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case consists of six real numbers a, b, c, d, h 1998 and f 1998, written in this order on three lines, two numbers per line, separated by one or more spaces. The numbers are given in the classical format, i.e. optional sign, sequence of digits, optional dot and optional sequence of digits. The text form of a number does not exceed 10 characters. Each case is followed by one empty line. 

 The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case begins with a line containing exactly two integers P and Q, 1 <= P,Q <= 1000000. P is the number of stops including CCS and Q the number of bus lines. Then there are Q lines, each describing one bus line. Each of the lines contains exactly three numbers - the originating stop, the destination stop and the price. The CCS is designated by number 1. Prices are positive integers the sum of which is smaller than 1000000000. You can also assume it is always possible to get from any stop to any other stop. 

 The first line of input consists of two positive integers, n and m. n is the number of declarations to follow and m is the number of test cases.   Each declaration takes the form name = expr. There are two forms for expr : zip name1 name2 and x0 x1 ... xi name3. In the first case, name is the result of zipping name1 and name2 together. The other case defines the first i + 1 non-negative integers in the list name (where i is at least 0) and name3 is the name of the list that continues it (mandatory--all lists will be infinite).   The test cases take the form name s e, where s and e are non-negative integers, s <= e and e - s < 250.   No line of input will be longer than 80 characters. Names consist of a single capital letter. 

 The input consists of a number of cases. The first line of each case contains the integer n, or 0 if there are no more cases. The next line contains the integers L and C. These are followed by n integers t1, t2, ..., tn. 

 The input consists of a number of cases. The first line of each case contains two integers n and m. The number of intersections is n (2 <= n <= 1000), and the number of streets is m. The next m lines contain the intersections incident to each of the m streets. The intersections are numbered from 1 to n, and each street is listed once. If the pair i j is present, j i will not be present. End of input is indicated by n = m = 0.  

 The first line will be a single positive integer that tells how many processors will be listed. For each processor there will be one line containing the name of the processor (a single capital letter) followed by a positive integer, N . The following N lines will contain the instructions that comprise the program for that processor.   An instruction is of the form ``Mode Action Target(s)'' where ``Mode'' can be ``B'' or ``N'', for blocking or non-blocking, respectively. ``Action'' can be ``S'' or ``R'', for send or receive, respectively. ``Target(s)'' will be one or more processor names to which the action is to be addressed. No processor will be listed twice and a processor will never attempt any sort of communication with itself . A send to multiple targets will not complete until matching receives have been performed by all of the targets (and vice versa). 

 No input

 Input will be in the form of 5 floating point numbers per line. The first number will be the length, in centimeters, of the sides of the hexagons. The next two numbers will be the x and y coordinates of point A, followed by the x and y coordinates for point B. The input will be terminated by a line containing five zeroes. Neither point A nor point B will ever be exactly on a border between hexagons.

 The input file will contain a list of positive integers, one per line. The end of the input will be indicated by an integer value of zero.

 Input consists of a series of piece descriptions. Each piece description consists of the following data:  Line 1 < nVertices > < pegRadius > < pegX > < pegY >  number of vertices in polygon, n (integer)  radius of peg (real)  X and Y position of peg (real)  n Lines < vertexX > < vertexY >  On a line for each vertex, listed in order, the X and Y position of vertex The end of input is indicated by a number of polygon vertices less than 3.

 The input will contain multiple lists, one per line. Each element of the list will be separated by a comma followed a space, and the list will be terminated by a period. The input will be terminated by a line containing only a single period. 

 The input file will contain a list of text strings, one per line. The text strings will consist only of uppercase alphanumeric characters and underscores (which are used in place of spaces). The end of the input will be signalled by a line containing only the word “END” as the text string. This line should not be processed.

 The input file will consist of the descriptions of one or more n-credible mazes. The first line of the description will specify n, the dimension of the n-teresting space. (For this problem, n will not exceed 10, and all coordinate values will be less than 10.) The next line will contain 2n non-negative integers, the first n of which describe the starting n-tersection, least dimension first, and the next n of which describe the ending n-tersection. Next will be a nonnegative number of lines containing 2n non-negative integers each, identifying paths between adjacent n-tersections in the n-teresting space. The list is terminated by a line containing only the value ï¿½. Several such maze descriptions may be present in the file. The end of the input is signalled by space dimension of zero. No further data will follow this terminating zero.  

 The input will contain the description of several networks. A network description will consist of pairs of integers, one pair per line, that identify connected nodes. Ordering of the pairs is irrelevant; 1 2 and 2 1 specify the same connection. All node numbers will range from 1 to 1000. A line containing a single zero ends the list of connected nodes. An empty network description flags the end of the input. Blank lines in the input file should be ignored.

 The first line contains an integer N between 1 and 10 describing how many tablets are represented. The next 6N lines represent the N tablets as described in the problem statement. 

 The first line contains an integer N between 1 and 10 describing how many instances of the game are represented. The remaining lines will describe N instances of the game by listing the holes which begin with pegs in them, in increasing order. A 0 will indicate the end of each sequence of unique numbers between 1 and 33 that represents an instance of the game. 

 The first line contains an integer N between 1 and 10 describing how many call forwarding systems will be simulated by your program. Each call forwarding system will be represented by 0 to 100 `source time duration target' lines. These lines represent the requests by the users to set up a call forwarding from the `source' to the `target' starting at the `time' for a length of `duration', and will be in the form `dddd dddd dddd dddd'. A line with 0000 in the `source' position indicates the end of this portion of the input. The call forwarding requests are listed in the order received. They will be followed by 1 or more `time extension' lines, in the form `dddd dddd', in non-decreasing order by `time' representing calls made into the system at `time' to `extension'. A line with 9000 in the `time' position indicates the end of this portion of the input. 

 The first line contains an integer N between 1 and 10 describing how many of Mr. Chip's classes are represented in the input. The first line for each class contains two integers S and T. S is the number of students in the class (1 < S < 31) and T is the number of tests the students took (1 < T < 11). The next S lines will each represent one student in the class. A student line first lists each of their T test scores as integers between 0 and 100 inclusive, and then lists their bonus points and their number of absences. 

 A list of N positive integers (none greater than 60,000), with 1 <= N < 100. A 0 will mark the end of the list.

 The first line will contain an integer from 1 to 10 inclusive that represents the number of data sets in the input file. Each data set represents a new shipping configuration.   The first line of data in a data set will contain three integers, say M, N, and P: M is an integer from 1 to 30 inclusive representing the number of warehouses in the data set; N is an integer from 0 to M*(M-1)/2 inclusive that represents the number of legs between warehouses in the data set; P is an integer from 0 to 10 inclusive that represents the number of shipping requests for which cost information is required.   The second line of data in a data set contains M two-letter code names for the M warehouses of the data sets. Only capital letters are used. A single blank separates code names.   N lines follow the line of code names, containing shipping leg information in the format: ``XX YY", with XX and YY being the codes for two distinct warehouses in the set that have a direct link (a shipping leg) between them. There will be a single blank between the warehouse codes.   The N lines of shipping leg information are followed by P lines of shipping requests, one request per line. Each shipping request will begin with an integer between 1 and 20 inclusive that represents the size of the shipment. The shipment size will be followed by a pair of code names in the format ``AA BB", with AA and BB being the code for two distinct warehouses in the set which represent the source and destination of the requested shipment.   The input will be valid and consistent. A shipping leg will only be represented once within a data set. Data about legs will always refer to warehouses that have been identified as belonging to the data set. See the example below for clarification of the input format. 

 The input consists of several testcases. The first line of each testcase contains the number of folds in the sequence of folds n (0 < n <= 1,000). The next line contains 3n real numbers, indicating the sequence of folds: a1 b1 d1 a2 b2 d2 â€¦ an bn dn.  The end of input is signified by a line consisting of a single 0.

 The first line contains an integer N between 1 and 10 describing how many strings of characters are represented. The next N lines each contain a string of 1 to 60 alpha characters. 

 The input consists of several test cases. In the first line of each test case there are 6 numbers n, p, s, x, y, o which are the number of thieves, the length of the Salman's first pat h (in hour), the stop time in which all thieves will stop, number of vertical and horizontal streets and finally the number of observations that Salman has done during his first path (n < 70, p < 100, s < 35000, x, y < 100) . After this line, there are p lines each consisting of two numbers. The line number l of this p lines shows the coordinates (x, y) of Salman at the starting minute of hour l. After this set of lines, there are o lines each consisting of 4 numbers (t, tm, tx, ty) which means that Salman h as seen thief t on time tm at the point (tx, ty). The test case starting with 6 zeros is the final test case and has no output. 

 Some 90 degree clockwise rotated figures of a number of mixed fractions are given in the input file. In the first line of each rotated mixed fraction n < 300 and m < 15000 , the length and the width of the figure, are written. In the next m lines the figure i s described ('-' is replaced with '|'). Note that each line will consists of exactly n characters so any number of spaces may be used in the shape, but anyway, the shape of the figure satisfies description explained above.  The input ends with a line containing two zeroes. 

 The input consists of several test cases. In the first line of each test case there are two integers m < 100 and d <= 1000, number of different integers in the key and number of given pairs, then in the next line there are m integers. The U+1th integer is the number of U's in the key . In the next d lines, in each line there is two integers x and y indicating that the pair ( x,y) is in the key. The test case with d=0 indicates the end o f file. If there is no solution for an input case you must report "Impossible!" as the output for this case. 

 The input consists of several test cases. In the first line of each test case there are 4 numbers n, k, p, d which are the number of airports, towers, planes and minimum expected number of towers to be damaged, respectively. In the I'th line of the next n lines there are two integers x and y indicating the position of the I'th airport. Then, in the I'th line of the next k lines the re are two integers x and y indicating the position of the I'th tower and finally in the I'th line of the next p lines there are 5 integers h, m, f, t, s indicating that the I'th plane leaves the airport f to airport t at time h:m(hour and minute of the flight) with speed s kilometers per second. The test case with n=k=p=d=0 represent the end of input file. All coordinates are in kilometer. (n<=50, k<=50, p<=90) 

 The input consists of several test cases. Each test case begins with a line containing m and n, the number of vertical and horizontal lines (streets) in the grid, which are in range 1 to 100. The second line of a test case contains two pairs of integer, which are x and y coordinates of the source (Mrs. Mahtaj's house) and x and y coordinates of the destination (David church). The horizontal and vertical lines in the grid are indexed from left to right and bottom to up from 0, so coordinates can be expressed using the indices. The third line of a test case contains a single numbe r N, which is the number of closed crossroads. It follows by N lines that each line contains x and y coordinates of a closed crossroad. The test case with m=n=0 indicates the end of the input file. 

 Each test case begins with a line containing 6 numbers, in the following order: number of vertices of the rail ro ad (less than 50), number of trains (less than 20), coordinates of the end point, velocity of trains and velocity of Ehsan's car. In next lines, vertices of the road polygon are listed in the same order as trains visit them. Then, each train is described in a separate line by three numbers: coordinates of its head (x, y) and its length. No two trains intersect. y coordinate of the starting point is 0 and its x-coordinate is same as the end point. The final test case is started with 6 zeros. 

 Each line of the input data contains a candidate which you are to classify.

 The input for this problem will be a set of extrapolation requests. For each request the input will contain first an integer n, which specifies the number of values in the sequence to be extended. When n is zero your program should terminate. If n is non-zero (it will never be larger than 10), it will be followed by n integers representing the given elements in the sequence. The last item in the input for each extrapolation request is k, the number of extrapolation operations to perform; it will always be at least 1.

 Your program is to read expressions, one per line, until a totally blank (or empty) line is read.  Blanks are to be ignored in evaluating expressions, and you are assured that ambiguous expressions like a+++b (ambiguous because it could be treated as a++ + b or a + ++b) will not appear in the input. Likewise, ++ or -- operators will never appear both before and after a single variable. Thus expressions like ++a++ will not be in the input data. 

 You will get several non-negative integer n (n <= 1,000,000) from input file. Each one is in a line by itself.  The input is terminated by a line with a negative integer.

 The input contains a list of integers (each <= 999), one per line, that represent several players' current scores. A value of zero or less will signify the end of the input file. 

 The input for this program consists of strands of DNA sequences, one strand per line, from which the protein it generates, if any, should be determined and output. The given DNA strand may be either the primary or the complementary DNA strand, and it may appear in either forward or reverse order, and the start and termination sequences do not necessarily appear at the ends of the strand. For example, a given input DNA strand to form the protein Ser-Ile-Lys could be any of ATACTCGTAATTCACTCC, CCTCACTTAATGCTCATA, TATGAGCATTAAGTGAGG, or GGAGTGAATTACGAGTAT. The input will be terminated by a line containing a single asterisk character. 

 One integer N (N <= 100).

 The input file for this program contains several puzzles (i.e. sets of puzzle pieces) to be solved. The first line of the file is the number of pieces in the first puzzle. Each piece is then specified by listing a single line with two integers, the number of rows and columns in the piece, followed by one or more lines which specify the shape of the piece. The shape specification consists of `0' and `1' characters, with the `1' characters indicating the solid shape of the puzzle (the `0' characters are merely placeholders). For example, piece `A' above would be specified as follows:    2 3  111  101   The pieces should be numbered by the order they are encountered in the puzzle. That is, the first piece in a puzzle is piece #1, the next is piece #2, etc. All pieces may be assumed to be valid and no larger than 4 rows by 4 columns.  The line following the final line of the last piece contains the number of pieces in the next puzzle, again followed by the puzzle pieces and so on. The end of the input file is indicated by a zero in place of the number of puzzle pieces.   

 For each dataset:  Line 1 < candidates > < ballots >  The number of candidates receiving votes  The number of ballots, b  b Lines One line per ballot. For each ballot, the names of the candidates are listed in order of preference. A candidate name is a string with no whitespace in it. A ballot may not contain votes for all candidates. No candidate will be repeated on a single ballot.  After the last dataset, a line of  0 0  will indicate the end of the input.

 The input consists of one or more galaxy descriptions. Each galaxy description begins with a line containing an integer N which specifies the number of planets in the galaxy. The next N lines contain descriptions of each planet, which consist of:     The letter used to represent the planet.   A space.   The relative value of the planet's export, in the form d.dd.   A space.   A string containing letters and/or the character `*'; a letter indicates a shipping line to that planet, and a `*' indicates a willingness to open a ThrustoZoom shipping line to Earth.  

 The input for your prototype program will consist of one base conversion per line. There will be three numbers per line. The first number will be the number in the base you are converting from. The second number is the base you are converting from. The third number is the base you are converting to. There will be one or more blanks surrounding (on either side of) the numbers. There are several lines of input and your program should continue to read until the end of file is reached.

 There are one or more classes of students, followed by a final line containing only the value -1. Each class starts with a line containing an integer, n, which is the number of students in the class, followed by n lines of student information. Each line of student information consists of three positive integers, representing the dimensions of the clay block, followed by the student's first name. There can never be more than 9 students nor less than 2 students in any class. Each student's name is at most 8 characters. Ms. Terry always gives each student at most 250 cubic units of clay. There is exactly one bully and one victim in each class. 

 The input consists of one or more field maps followed by a line containing -1 -1 to signal the end of the input data. A field map consists of one or more lines, each containing one garbage location, followed by a line containing 0 0 to signal the end of the map. Each garbage location consists of two integers, the row and column, separated by a single space. The rows and columns are numbered as shown in Figure 1. The garbage locations will be given in row-major order. No single field map will have more than 24 rows and 24 columns. The sample input below shows an input file with two field maps. The first is the field map from Figure 1. 

 There are from one to 20 data sets, followed by a final line containing only 0. A data set starts with a line containing nine blank-separated integers. The first is the number, n, of octagons that form the bracelet, where 4 <= n <= 11. The remaining eight numbers are the brightness for colors A through H, in order. Each brightness is positive and less than 256.   The next n lines each contain eight letters, all in the range from A through H. Each gives the edge colors for one octagon, in clockwise order. Individual colors may appear zero or more times in the octagons. Different colors may have the same brightness, but that does not make them the same color.  

 The input consists of one or more programs. Each program is implicitly numbered starting at 1. The first line contains a single integer n, which is the number of programs that follow. Each program is a sequence of samples. Each line of a program will contain exactly 30 samples, except the last line, which may contain fewer. The end of each program will be represented by a sample with the value 10.   Note that:    Any value from 0 to 9 may be a sample in the background music, but the starting bit sequence for a chirp "01" (middle, middle, low, high) will not occur in the background music.  Chirps consume time.  Each workout is less than 60 minutes long.  A chirp with speed 0 does not imply the end of the workout.  A chirp may be preceded by one or more samples with the value 4 or 5.  Chirps do not necessarily begin on an even second boundary.  Each chirp is well-formed (only proper 0 or 1 bits will occur)  

 The input contains one or more game boards, followed by a final line containing only two zeros. A game board starts with a line containing two integers, r and c, the number of rows and columns in the game board; r and c will always be at least 3. The total number of cells in any board will never be greater than 40. The rest of the data set consists of a graphical representation of the game board, where an upper case 'M' represents a mine and a period '.' represents an empty cell. There will always be at least one 'M' and at least one '.' on each game board. 

 The input will consist of one or more lists of numbers. There will be one list of numbers per line. Each list will contain from 2 to 15 unique positive integers. No integer will be larger than 99. Each line will be terminated with the integer 0, which is not considered part of the list. A line with the single number -1 will mark the end of the file. The example input below shows 3 separate lists. Some lists may not contain any doubles.

 There are from one to 24 data sets, followed by a final line containing only -1. A data set starts with a line containing three integers w, r, and g: the width of the fax in pixels, the total number of runs, and the number of run lengths grouped on one line, respectively. All three numbers are positive: w <= 1,000,000,000, r <= 1000, and g <= 40. The rest of the dataset consists of r run lengths, with a new line starting after each group of g run lengths. The last line (possibly the only line) of run lengths may contain fewer than g run lengths. The numbers on each line are blank separated. The first run length may be 0. All others run lengths are positive. No run length may be greater than 1,000,000,000. The total number of pixels in each fax will be a multiple of w, so the pixels form a rectangle. Though commas are shown in the long numbers above for human readability, the integers in the input and output files include no commas.

 The input will contain one or more lines of coefficients delimited by one or more spaces. There are nine coefficients per line, each coefficient being an integer with a magnitude of less than 1000. 

 The input data for the illustrated chamber would appear as follows.   2  4 2 7 8 9  7 3 4.5 6 7   The first line contains the number of interior walls. Then there is a line for each such wall, containing five real numbers. The first number is the x coordinate of the wall (0 < x < 10), and the remaining four are the y coordinates of the ends of the doorways in that wall. The x coordinates of the walls are in increasing order, and within each line the y coordinates are in increasing order. The input file will contain at least one such set of data. The end of the data comes when the number of walls is -1.  

 The first line of the input contains two positive integers. The first integer specifies N, the number of arrays defined in the data file, and the second integer specifies R, the number of array references for which addresses should be calculated. The next N lines each define an array, one per line, and the following R lines contain one array reference per line for which an address should be calculated.   Each line which defines an array contains, in the following order, the name of the array (which is limited to 10 characters), a positive integer which specifies the base address of the array, a positive integer which specifies the size in bytes of each array element, and D, the number of dimensions in the array (no array will have fewer than 1 or more than 10 dimensions). This is followed on the same line by D pairs of integers which represent the lower and upper bounds, respectively, of dimensions 1 . . . D of the array.   Each line which specifies an array reference contains the name of the array followed by the integer indexes i1, i2, . . ., iD where D is the dimension of the array.

 The input consists of one or more board layouts followed by which piece, either 'X' or 'O' (that's an ``oh'' not a zero), for which moves should be displayed for. Each board is specified as 8 lines of 8 characters each. Each board position will contain an 'X', an 'O' or a period. The 'X' and 'O' position represent the occupied positions, and the periods represent empty board positions. Immediately following each board is line containing a single 'X' or 'O' character, and it is for this piece that moves should be displayed. The end of the input is indicated by the end of the file.

 The input will consist of several equations to be solved. Each equation will contain from 1 to 20 operations with 2 to 21 integer operands (there will, of course, always be one more operand than operators). Integer operators in the input may have a leading sign (i.e. may be preceded by a unary operator). Spaces in the input line are optional; that is, spaces may be present between operators and operands, or they may not. The variable names will consist of 1 to 8 alphabetic characters.

 One triangle is described per line. Each line has six measurements taken to the nearest 0.001 in the order:  x1 y1 x2 y2 x3 y3  The final line of input will contain only a -1.  None of the test sets contain non-right angles in the range 88-92 degrees, nor do any of the test sets include any non-equal side lengths for one triangle within 0.01 of one another.

 Write a program that will read the elements of sets together with corresponding "multiplication" tables which denote possible binary operations. Your program should then determine if the set S with the defined operation constitutes a semigroup. If the set and corresponding table do not form a semigroup, your program should report that the pair do not form a semigroup and state why. If the set and operation pair do form a semigroup, your program should check to see if the semigroup is also a commutative semigroup.   Thus, for each set and corresponding table one of the following four results is possible:   NOT A SEMIGROUP: x#y = z  WHICH IS NOT AN ELEMENT OF THE SETNOT A SEMIGROUP: (x#y)#z IS NOT EQUAL TO x#(y#z)SEMIGROUP BUT NOT COMMUTATIVE  (x#y IS NOT EQUAL TO y#x)COMMUTATIVE SEMIGROUP  In the first three results you should substitute actual elements of the set that yield a counter-example to the definitions for a semigroup and a commutative operation. If more than one counter-example exist, choose the lexicographically first one.   The first line of the input file contains a single integer, n where (1 <= n <= 26).   The next line of the input file will contain n unique, lower case letters of the alphabet. These letters represent the elements of the set. Although each letter is unique (no duplicates), they are not necessarily arranged in alphabetical order.   The next n lines contain the body of the "multiplication" table that corresponds to the elements in the previous line. Each of these lines will contain n lower case letters. For example, the first such line corresponds to the first row of the body of the table. We will assume that the ordering of the rows and columns of the table coincide with the ordering in the line that defines the elements of the set.   After the table, the input file will contain a line with a single integer, n where (0 <= n <= 26). If n > 0 then there is another set and corresponding table contained in the next n + 1 lines that should be reported. If n = 0 then you have reached the end of the input file.   

 The first line of the input will contain three integers. These are the dimension of the puzzle (puzzles are always square), and the height and width of the pieces, respectively. The dimension of the puzzle can range from 2 to 10, and the height and width of each puzzle piece can range from 1 to 25. For example, the input "2 2 3" (without the quotes, of course) specifies a puzzle that is 2 * 2 pieces in size, with individual pieces that are 2 * 3 characters in size. All pieces have the same height and width.   The rest of the specifies the puzzle pieces in arbitrary order. Each piece is specified by an image of the piece followed by a line containing four integers ranging from -5 to +5. These values indicate the shape of the top, left, bottom and right edges of the puzzle piece, respectively. Values of 0 identify straight (i.e. outer) edges. Positive and negative edges of the same value are pairs that interlock (e.g. -5 interlocks with +5, -4 with +4, etc.). Puzzle pieces may not be rotated, and all pieces will be unique (that is, no two pieces will have the same values for all four edges). A blank line separates each puzzle piece.   Note that spaces (ASCII character 32) are valid characters in a puzzle piece. If they appear at the end of a line (or are the only characters on a line), then they will appear in the input file. All pieces will be a rectangular block of characters (ASCII codes 32 to 127), even if spaces at the end of a line make it appear differently. In short, spaces should be treated no differently than any other character.

 The input contains one or more grids. Each grid begins with a line containing m and n, the number of rows and columns in the grid, separated by a single space. If m = 0 it signals the end of the input; otherwise 1 <= m <= 100 and 1 <= n <= 100. Following this are m lines of n characters each (not counting the end-of-line characters). Each character corresponds to one plot, and is either `*', representing the absence of oil, or `@', representing an oil pocket.   

 The input contains one or more test cases, each on a line by itself. Each line contains four integers H, U, D, and F, separated by a single space. If H = 0 it signals the end of the input; otherwise, all four numbers will be between 1 and 100, inclusive. H is the height of the well in feet, U is the distance in feet that the snail can climb during the day, D is the distance in feet that the snail slides down during the night, and F is the fatigue factor expressed as a percentage. The snail never climbs a negative distance. If the fatigue factor drops the snail's climbing distance below zero, the snail does not climb at all that day. Regardless of how far the snail climbed, it always slides D feet at night.

 The input will contain one or more test cases, one per line. Each test case contains t, the total, followed by n, the number of integers in the list, followed by n integers x 1 , . . . , x n . If n = 0 it signals the end of the input; otherwise, t will be a positive integer less than 1000, n will be an integer between 1 and 12 (inclusive), and x 1 , . . . , x n will be positive integers less than 100. All numbers will be separated by exactly one space. The numbers in each list appear in nonincreasing order, and there may be repetitions.

 The input contains one or more lines, each of which contains an integer n. If n = 0 it signals the end of the input, and otherwise n is a nonnegative integer in skew binary.

 The input contains one or more lines, each of which contains a single haiku. A haiku will contain at least three words, and words will be separated by either a single space or a slash (`/'). Slashes also separate the three lines of a haiku, so each haiku will contain exactly two slashes. (The three lines of the haiku will be contained within one physical line of the file.) A haiku will contain only lowercase letters (`a'-`z'), forward slashes (`/'), and spaces, and will be no more than 200 characters long (not counting the end-of-line characters).   The haiku `e/o/i' signals the end of the input.   Each haiku is guaranteed to contain three lines, and each line will contain at least one word. Your job is to determine whether each line has the correct number of syllables (5/7/5). For the purposes of this problem, every contiguous sequence of one or more vowels counts as one syllable, where the vowels are a, e, i, o, u, and y. Every word will contain at least one syllable. (Note that this method of counting syllables does not always agree with English conventions. In the second example below, your program must consider the word `code' to have two syllables because the `o' and the `e' are not consecutive. However, in English the `e' is silent and so `code' actually has only one syllable.)

 The input contains one or more lines, each of which contains a single event. A ZZ event signals the end of the input. The events are all part of the same session.

 The input contains one or more test cases, followed by a line beginning with a dollar sign that signals the end of the file. Each test case begins with a line containing a question mark and is followed by four lines representing the board; formatting is exactly as shown in the example. The characters used in a board description are the period (representing an empty space), lowercase x, and lowercase o. For each test case, output a line containing the (row, column) position of the first forced win for x, or '#####' if there is no forced win. Format the output exactly as shown in the example. 

 For each power field there are several lines of data. The first line is the number of monuments: at least 4, and at most 15. For each monument there is a data line that starts with a one character label for the monument and is followed by the coordinates of the monument, which are nonnegative integers less than 100. The first label is A, and the next is B, and so on.   There is at least one such power field described. The end of input is indicated by a 0 for the number of monuments. The first sample data below corresponds to the diagram in the problem.  

 The input contains one or more commands, followed by a line beginning with a period that signals the end of the file. Each command is on a line by itself and is either an assertion or a query. An assertion begins with an exclamation point and has the format   ! m itema = n itemb   where itema and itemb are distinct item names and m and n are both positive integers less than 100. This command says that m of itema are worth n of itemb. A query begins with a question mark, is of the form   ? itema = itemb   and asks for the exchange rate between itema and itemb, where itema and itemb are distinct items that have both appeared in previous assertions (although not necessarily the same assertion).   

 Input consists of information for several loans. Each loan consists of one line containing the duration in months of the loan, the down payment, the amount of the loan, and the number of depreciation records that follow. All values are nonnegative, with loans being at most 100 months long and car values at most $75,000. Since depreciation is not constant, the varying rates are specified in a series of depreciation records. Each depreciation record consists of one line with a month number and depreciation percentage, which is more than 0 and less than 1. These are in strictly increasing order by month, starting at month 0. Month 0 is the depreciation that applies immediately after driving the car off the lot and is always present in the data. All the other percentages are the amount of depreciation at the end of the corresponding month. Not all months may be listed in the data. If a month is not listed, then the previous depreciation percentage applies. The end of the input is signalled by a negative loan duration - the other three values will be present but indeterminate.   For simplicity, we will assume a 0% interest loan, thus the car's initial value will be the loan amount plus the down payment. It is possible for a car's value and amount owed to be positive numbers less than $1.00. Do not round values to a whole number of cents ($7,347.635 should not be rounded to $7,347.64).   Consider the first example below of borrowing $15,000 for 30 months. As the buyer drives off the lot, he still owes $15,000, but the car has dropped in value by 10% to $13,950. After 4 months, the buyer has made 4 payments, each of $500, and the car has further depreciated 3% in months 1 and 2 and 0.2% in months 3 and 4. At this time, the car is worth $13,073.10528 and the borrower only owes $13,000.   

 The input contains one or more test cases, followed by a line containing only 0 (zero) that signals the end of the file. Each test case begins with a line containing the number of rules, which will be between 1 and 10. Each rule is specified by a pair of lines, where the first line is the find string and the second line is the replace-by string. Following all the rules is a line containing the text to edit.

 There will be one or more grids for robots to navigate. The data for each is in the following form. On the first line are three integers separated by blanks: the number of rows in the grid, the number of columns in the grid, and the number of the column in which the robot enters from the north. The possible entry columns are numbered starting with one at the left. Then come the rows of the direction instructions. Each grid will have at least one and at most 10 rows and columns of instructions. The lines of instructions contain only the characters N, S, E, or W with no blanks. The end of input is indicated by a row containing 0 0 0.

 Input to your program will consist of a series of commands and their arguments (exactly 1 per line). You are to start with a ``blank" piece of paper and read the input file formatting and flushing paper until end of file. 

 The input will contain one or more data sets. Each data set is a sequence of six lines with three integers from 1 to 100 separated by blanks on each line. Each line contains the numbers on the triangles in clockwise order. Data sets are separated by a line containing only an asterisk. The last data set is followed by a line containing only a dollar sign.

 The input consists of one or more potential passwords, one per line, followed by a line containing only the word 'end' that signals the end of the file. Each password is at least one and at most twenty letters long and consists only of lowercase letters.

 Input consists of information for one or more games. Each game starts with one line containing the number of players (1-4), the number of squares on the board (1-79), and the number of cards in the deck (1-200). This is followed by a single line of characters representing the colored squares on the board. Following this are the cards in the deck, one card per line. Cards can have only a single character, or two of the same character. The end of the input is signalled by a line with 0 for the number of players - the other two values will be present but indeterminate.

 The input will contain one or more data sets. Each data set is a sequence of one or more lines of capital letters.   The lines contain the leaves removed from a binary search tree in the stages described above. The letters on a line will be listed in increasing alphabetical order. Data sets are separated by a line containing only an asterisk ('*').   The last data set is followed by a line containing only a dollar sign ('$'). There are no blanks or empty lines in the input.

 The input for your program will be a series of integer triples, one per line, until the end-of-file flag of -1 -1 -1. Using the above technique, you are to calculate w(a, b, c) efficiently and print the result.

 The input for your program will be a series of words, two per line, until the end-of-file flag of -1.  Using the above technique, you are to calculate appx() for the pair of words on the line and print the result.  The words will all be uppercase.

 For the programming contest your program is judging, there are four problems. You are guaranteed that the input will not result in a tie between teams after counting penalty points.  Line 1 < nTeams >  Line 2 - n+1 < Name > < p1Sub > < p1Time > < p2Sub > < p2Time > ... < p4Time >     The first element on the line is the team name, which contains no whitespace.Following that, for each of the four problems, is the number of times the team submitted a run for that problem and the time at which it was solved correctly (both integers). If a team did not solve a problem, the time will be zero. The number of submissions will be at least one if the problem was solved. 

 There are three sections in the input file, the first lists the cities, the second lists the roads, and the third lists the queries.  The first line of input is the number of cities, c, followed by c lines each containing the name of a city. There is no whitespace in a city name.  The next line is the number of roads, r, followed by r lines describing a road. Each road description has the following form:  < RoadName > < CityA > < ABDistance > < ABTime > < CityB > [< BCDist > < BCTime > < CityC > [...]]  There is no whitespace in a road's name. Roads may pass through any number of cities. The cities appear in the order the road passes through them. No road passes through the same city multiple times. Roads are bidirectional. The distance and time (both real numbers) it takes to follow a road between each pair of cities is the distance and time listed between those two names.When following a road between multiple cities (A to C, for example), the distance and time is cumulative for all steps along the path.  The remainder of the lines in the file each list one query. Queries are of the form:  < querytype > < origin > < destination >  Querytype is one of time, distance, or turns and the origin and destination are the names of cities.  The queries end at end-of-file.

 The input consists entirely of your paper. Each line will be under 80 characters and will contain words, punctuation, and numbers. Words consist of the characters {a-z,A-Z,0-9}. Words are separated by whitespace, end-of-line, and punctuation. The punctuation that may be found includes the characters  ,.;\'`\"()/:-.No other characters will be found in the input.  The input ends at end-of-file.  Word comparisons are case-insensitive.

 Input consists of a series of trip descriptions. All time inputs will be presented in the form HH:MM:SS, where HH is a two digit integer indicating hours from 00-23, MM is a two-digit integer indicating minutes from 00-59, and SS is a two-digit integer indicating seconds from 00-59.  For each trip description:  Line 1 Maximum number of days for the trip (integer 1-10)  Line 2 Average paddling speed in miles per hour (positive real number)  Line 3 < sunrise > < interval >  Time of sunrise on day 1 of the trip (05:00:00-08:00:00)  Time between successive sunrises (23:45:00-24:15:00)  Line 4 < sunset > < interval >  Time of sunset on day 1 (17:00:00-20:00:00)  Time between successive sunsets (23:45:00-24:15:00)  Line 5 < lowtide > < interval >  Time of 1st low tide on day 1 (any time)  Time between successive low tides (11:00:00-13:00:00)  Line 6 Number of docks available along the way, not counting your trip starting point but including your final destination (positive integer)  7-end < distance > < inaccessible >  One line for each dock (including the starting dock at distance 0.0), containing:  Distance of that dock, in miles, from your trip starting point (real)  Number of hours before and after low tide when dock is inaccessible(integer 0-12) The final dataset is followed by a 0.

 Each input line consists of either:    A Roman numeral between I and MMMMCMXCIX, or  An arithmetic operation +, -, /, or *, or the print operator, = The input ends at the end-of-file. 

 The input will contain an indefinite number of lists of filenames. Each list will begin with a line containing a single integer (1 <= N <= 100). There will then be N lines each containing one left-justified filename and the entire line's contents (between 1 and 60 characters) are considered to be part of the filename. Allowable characters are alphanumeric (a to z, A to Z, and 0 to 9) and from the following set { ._- } (not including the curly braces). There will be no illegal characters in any of the filenames and no line will be completely empty.   Immediately following the last filename will be the N for the next set or the end of file. You should read and format all sets in the input.  

 Input consists of strings (one per line) each of which will consist of one to twenty valid characters. There will be no invalid characters in any of the strings. Your program should read to the end of file. 

 For each selection, you will be given a line of 22 integers. The first integer (1 <= N <= 50) tells how many people will participate in the lottery. The second integer (1 <= X <= N) is how many lucky "home" positions will be selected. The next 20 integers are the values of the first 20 cards in the deck. Card values are interpretted to integer values between 1 and 11 inclusive.  

 The first line of each scenario contains a single integer (0 <= N1 <= 100) that indicates the number of planes detected in the first sweep. The next N1 lines each contain the description of exactly one detected plane in sweep 1. Each description contains a squawk number, an azimuth, a distance, and a ground speed. The squawk number is an integer between 1 and 5 digits in length. The azimuth, distance and ground speed are all real numbers in the format XXX.XXX with leading and trailing zeroes as needed to fill all 6 places.    The squawk number (0 < S < 32767) is a globally unique integer that identifies each plane and is used to match planes from sweeps 1 and 2. The azimuth (000.000 <= A <= 359.999) is the angle in degrees from North (sweeping in a circle toward the East) where the plane was detected. Therefore, East is at 90 degrees; South is at 180 degrees; and West is at 270 degrees. The distance (000.000 <= D <= 010.000) is the distance from the radar to the plane (added distance due to altitude has been removed by the radar's sensing logic). The ground speed (000.000 <= G <= 999.999) is the speed at which the plane is moving (in any direction) relative to the radar.   Immediately following the lines with the descriptions of planes in the first sweep is a line with a single integer (0 <= N2 <= 100) indicating the number of planes detected in the second sweep. The next N2 lines each contain the description of exactly one detected plane in sweep 2.   The next scenario (if any) starts with N1 on the next line. You are to read and process scenarios to the end-of-file.   

 Input to your program will consist of a series of message routing scenarios. Input for each scenario starts with a single line that contains a single integer (1 <= M <= 10) indicating the number of MTAs in the scenario. Subsequent lines will contain a description for each of the M MTAs.   Each MTA description starts with a line containing the name of the MTA (a left justified alphabetic string of 1 to 10 characters with no embedded spaces) in columns 1-10 and an integer (0 <= I <= 9) in column 12 indicating the number of entries in the MTA's routing table. Each of the following I lines will then contain a valid name of an adjacent MTA in columns 1-10 followed by the Country, ADMD, PRMD, and Organization Name in columns 15-24, 30-39, 45-54, and 60-69 respectively. Each O/R name component will consist of 1 to 10 alphabetic characters left-justified in their field with no embedded blanks. Alternatively, an O/R name component may contain a single asterisk (*) in the first column in the field indicating a wild-card match in the field.   Following the description of the MTAs, there will be a single line containg a single integer (0 < N < 32768) indicating the number of messages to be sent in the simulation. Each of the subsequent N lines will contain the description of exactly one message. Each message description contains a valid name of one of the MTAs described above left-justified in columns 1-10 followed by the Country, ADMD, PRMD, and Organization Name in columns 15-24, 30-39, 45-54, and 60-69 respectively. Each O/R name component will consist of 1 to 10 alphabetic characters left-justified in their field with no embedded blanks and the MTA name is where the message is submitted and the simulation begins.   

 Each input set will be on a line by itself and will consist of 2 numbers. The first number (1 <= N <= 1000) is the maximum number in the complete list of prime numbers between 1 and N. The second number (1 <= C <= N) defines the C*2 prime numbers to be printed from the center of the list if the length of the list is even; or the (C*2)-1 numbers to be printed from the center of the list if the length of the list is odd. 

 Input to your program consists of an undetermined number of configurations to be analyzed. Each set starts with a single line of six integers. The first two integers are the x,y coordinates of the motor (1 <= x&y <= 300); the next two integers are the inside and outside radii of the motor gear respectively (1 <= ir&or <= 100); the fifth integer is the rotational velocity (1 <= abs(AV) <= 1000) of the motor in RPM's (negative representing counter-clockwise rotation and positive representing clockwise rotation); the sixth integer is the number of gears (1 <= NG <= 20) excluding the motor that are mounted on the board. Each of the following NG lines contain exactly 4 integers representing gears 1 through NG respectively. The first two integers represent the x,y coordinates (1<= x&y <= 300) of the gear and the second pair of integers represent the inside and outside radii of the gear respectively (1 <= ir&or <= 100).

 Each line of input will contain a pair of integers for STEP and MOD in that order (1<=STEP,MOD<=100000).

 Input to your program will consist of multiple sets of data. Line 1 of each set will contain exactly two integers. The first number (1 <= K <= 20) defines the number of keywords to be used in the search. The second number (1 <= E <= 20) defines the number of excuses in the set to be searched. Lines 2 through K+1 each contain exactly one keyword. Lines K+2 through K+1+E each contain exactly one excuse. All keywords in the keyword list will contain only contiguous lower case alphabetic characters of length L (1 <= L <= 20) and will occupy columns 1 through L in the input line. All excuses can contain any upper or lower case alphanumeric character, a space, or any of the following punctuation marks [".,!?] not including the square brackets and will not exceed 70 characters in length. Excuses will contain at least 1 non-space character.

 Input to this program will be a file with multiple sets of input. The first line of each set will contain two numbers. The first number (1 <= C <= 5) defines the number of chambers in the centrifuge and the second number (1 <= S <= 2C) defines the number of specimens in the input set. The second line of input will contain S integers representing the masses of the specimens in the set. Each specimen mass will be between 1 and 1000 and will be delimited by the beginning or end of the line and/or one or more blanks.

 Input to your program will consist of a series of simulation sets. The first line of each input set will be a single integer (1<=N<=10) representing the number of centipedes in the simulation. (Centipedes are numbered 0 through N-1 in the same order as the input.) The next N lines will each represent one centipede and will contain a single direction character followed by 3 integers. The direction character can be 'U', 'D', 'L', or 'R' for "Up", "Down", "Left", or "Right" respectively and indicate the direction of travel. The next integer (1<=L<=30) indicates the length of the centipede in segments. The second and third integers indicate the x,y coordinates of the lead segment (0<=x&y<=29). The next L-1 segments of the centipede occupy the L-1 board positions extending in the opposite direction from the direction of travel starting adjacent to the lead segment. You can be assured that no centipede segment will originate off the board nor will the original configuration involve any collisions.

 The input consists of a series of pizza constraints.  A pizza constraint is a list of 1 to 12 topping constraint lists each on a line by itself followed by a period on a line by itself.  A topping constraint list is a series of topping requests terminated by a single semicolon.  An topping request is a sign character (+/-) and then an uppercase letter from A to P. 

 The input contains only one case, the first line is a char C indicating which job you should do.   When C is 'A' , that means you should construct S' from S. The next line is an integer n(1 <=n<=10000), the length of S. The third line is the string S.   When C is 'B' , that means you should reconstruct S from S'. The next line is an integer n(1 <=n<=10000), the length of S'. The next line is the string S', the fourth line is an integer p.  

 Input to your program will consist of a series of country configuration test sets. Each test set will consist of a board description on lines 1 through 19. The representation avoids listing every national boundary twice by only listing the fact that country I borders country J when I < J. Thus, the Ith line, where I is less than 20, contains an integer X indicating how many "higher-numbered" countries share borders with country I, then X distinct integers J greater than I and not exceeding 20, each describing a boundary between countries I and J. Line 20 of the test set contains a single integer (1 <= N <= 100) indicating the number of country pairs that follow. The next N lines each contain exactly two integers (1 <= A,B <= 20; A!=B) indicating the starting and ending countries for a possible conquest.   There can be multiple test sets in the input file; your program should continue reading and processing until reaching the end of file. There will be at least one path between any two given countries in every country configuration.  

 Input to the program is a series of nonnegative integers not exceeding 10000, each on its own line with no other letters, digits or spaces. For each integer N, you should read the value and compute the last nonzero digit of N!. 

 Input to your program is a series of turns, and a turn consists of four horseshoe positions. Each line of input consists of two coordinate pairs representing the position of a toss. Each coordinate consists of a floating point (X,Y) coordinate pair (-100.0 <= X, Y <= 100.0) with up to 3 digits of precision following the decimal point; the first and second numbers are the X and Y coordinates of the centerpoint of the horseshoe semicircle (Point A) and the third and fourth numbers are the X and Y coordinates of the point (B) which bisects the horseshoe semicircle. You can be assured that the distance between points A and B for each horseshoe will be exactly 10 centimeters. The figure below illustrates the meanings of the values on each line.      The first four lines of input define the horseshoe positions for the first turn; lines 5 through 8 define the second turn, etc. There are at most 999 turns in the input file, and every turn contains four horseshoe positions. Your program should continue reading input to the end of file.  

 Input to your program consists of a series of input lines each defining one puzzle. Input for each puzzle is a single line of three positive integers: Ca, Cb, and N. Ca and Cb are the capacities of jugs A and B, and N is the goal. You can assume 0 < Ca <= Cb and N <= Cb <=1000 and that A and B are relatively prime to one another. 

 The input file consists of a given graph and several test cases. The first line contains an integer n indicating the number of vertices in the given graph,where 2 <= n <= 40. The vertices of a graph are labeled from 1 to n. Each vertex has a distinct label. The following n lines represent the adjacent vertices of vertex i, i = 1, 2, ... , n. For example, the second line of the sample input indicates that vertex 1 is adjacent with vertices 2 and 3. Note that any two integers in each line are separated by at least one space. After these n lines, there is a line which contains the      number of test cases. Each test case is shown in one line and represents a given subset D of vertices. You have to determine whether D is a geodetic set or not.  

 Input contains several nonnegative integers, one to a line. No integer exceeds 99999.

 The first line of the input file contains an integer N(1 <= N<=18). The next line contains a string representing the ticket number. If some digit is punched out it is denoted by "?" otherwise it is denoted by itself.

 Several sets of tiling blocks. The inputs are just a list of integers.For each set of tiling blocks, the first integer n represents the number of blocks within the game box. Following n, there will be n lines specifying parameters of blocks in B; each line contains exactly two integers, representing left and middle parameters of the i-th block, namely, li and mi. In other words, a game box is just a collection of n blocks B = {b1, b2, . . . , bn} and each block bi is associated with two parameters (li,mi).  Note that n can be as large as 10000 and li and mi are in the range from 1 to 100.  An integer n = 0 (zero) signifies the end of input.

 There is an integer number k, 1 <= k <= 100, in the first line to indicate the number of test cases. In each test case, the first line is also a positive integer N indicating that the binary image is an N * N array, where N <= 512 and N = 2 i for some positive integer i. Then, an N * N binary array is followed in which at least one blank is between any two elements.

 The input file contains several cases. Each test case begins with two integers n and m in a line, where n is the number of students, and m is the number of groups. You may assume that 0 < n <= 30000 and 0 <= m <= 500. Every student is numbered by a unique integer between 0 and nâˆ’1, and initially student 0 is recognized as a suspect in all the cases. This line is followed by m member lists of the groups, one line per group. Each line begins with an integer k by itself representing the number of members in the group. Following the number of members, there are k integers representing the students in this group. All the integers in a line are separated by at least one space.  A case with n = 0 and m = 0 indicates the end of the input, and need not be processed.

 The input consists of a number of test cases. The 1st line of a test case contains four positive integers n,m, s, t, separated by at least one space, where n is the number of caves (numbered 1, 2, ... , n), m is the number of tunnels (numbered 1, 2, ... ,m), s is the cave where Jing is located at time 0, and t is the cave where the terrorist leader is hiding. (1 <= s, t <= n <= 50 and m <= 500).  The next m lines are information of the m tunnels: Each line is a sequence of at most 35 integers separated by at least one space. The first two integers are the caves that are the ends of the corresponding tunnel. The third integer is the time needed to travel from one end of the tunnel to the other. This is followed by an increasing sequence of positive integers (each integer is at most 10000) which are alternately the closing and the opening times of the tunnel. For example, if the line is  10 14 5 6 7 8 9  then it means that the tunnel connects cave 10 and cave 14, it takes 5 units of time to go from one end to the other. The tunnel is closed at time 6, opened at time 7, then closed again at time 8, opened again at time 9. Note that the tunnel is being cleaned from time 6 to time 7, and then cleaned again from time 8 to time 9. After time 9, it remains open forever.  If the line is  10 9 15 8 18 23  then it means that the tunnel connects cave 10 and cave 9, it takes 15 units of time to go from one end to the other. The tunnel is closed at time 8, opened at time 18,then closed again at time 23. After time 23, it remains closed forever.  The next test case starts after the last line of the previous case. A 0 signals the end of the input.

 The test data begins with a number n in a line which is the number of test cases. In each test case, it begins with two numbers v and e in a line where v is the number of vertices (including human planets, Romulan planets, and shields) and e is the number of directed edges, 2<= v <= 100000 and 2 <= e <= 500000. For convenience,  the vertices are indexed starting with 1.  Next, a line beginning with 'human m' tells that there are m human planets. Following the string are m integers, which are the indices of human planets.  Same as above, a string 'romulan k' is used to tell the vertex indices of Romulan's planets.  A string 'shield x' begins the shield parameters, where x is the number of shields.  Each shield parameter is described by (s l u), where s is the shield's index, l is the lower bound of the range, and u is the upper bound of the range. The values of l and u is between 0 and 1000.  A string 'edge u' begins the directed edge data, where u is the number of edges.Each edge is described by (s d), where s is the index of the source vertex and d is the index of end vertex.  A string 'bomb p' begins with the data of deployed AI bombs, where p is the number of bombs and 1 <= p <= 10000. Each bomb is described by (h f i), where h is the index of a vertex (i.e., a human planets where the bomb is located), f is the initial frequency,and i is the interval to be increased/decreased.

 The first line contains a number m with 1 <= m <= 10 indicating the number of test cases. Each of the next m lines lists a test case. Each test case lists those l (1 <= l <= 5) input sequences separated by numbers 9999. Each test case ends with a number −9999. Two consecutive numbers in a sequence are separated by at least one single space. You may assume that each input sequence consists of at most 100 integers, each of which is between −100 and 100.

 All the input numbers are positive integers, < 500000, separated by a space or new line. The first line is the number of task sets. Then, the task sets are listed set by set. Each task set is listed by a line of the number of tasks, <= 100, and lines of task execution time and period pairs, execution time < period. The periods are harmonic, not sorted, and are different in a task set.

 Input consists of a sequence of lines, each containing a polynomial and an x value. Each polynomial  a nx n+a n-1x n-1+...+a 0 is represented by its degree followed by the non-negative coefficients an , ... , a0 of decreasing powers of x, where an is always 1. Degrees are between 1 and 100. The coefficients are followed on the same line by an integer value for the variable x, which is always either 1 or -1. The input is terminated by a single line containing the values 0 0.

 There will be multiple input sets. Each set will be 2 input lines. The first input line will hold the keyword, which will be no longer than 10 characters and will consist of all uppercase letters. The second line will be the ciphertext, which will be no longer than 100 characters and will consist of all uppercase letters. The keyword THEEND indicates end of input, in which case there will be no ciphertext to follow.

 Input will consist of multiple test cases. Each case will consist of two lines. The first line will contain three positive integers n, l and m, where n indicates the number of bead types, l is the length of the streamers and m indicates the number of bead combinations which the Sultan likes. The maximum values for n, l and m will be 26, 100 and 600, respectively. The next line will contain the m combinations.Each combination will be of the same length (between 1 and 10) and will be separated using a single space. All combinations will make use of only the uppercase letters of the alphabet. An input line of 0 0 0 will terminate input and should not be processed.

 Input consists of a number of test cases. Each case will be a line containing a single integer n, 1 <= n <= 300000. An input of 0 follows the last test case. Note that the portion of the EKG sequence that contains all integers <= 300,000 will not contain an integer >1,000,000.

 There will be multiple test cases. Input for each test case will consist of two lines: the first line will contain the integer n, indicating the number of towers. The next line will be of the form x1 y1 x2 y2 ... xn yn where xi yi are the coordinates of tower i. A pair of towers are considered "near" each other if the distance between them is no more than 20. There will be no more than 12 towers and no tower will have more than 4 towers near it. A value of n = 0 indicates end of input.

 There will be multiple data sets for this problem. The first line of each data set will be two integers giving the height and width of the room. (We'll visualize the room as if on a piece of paper, as drawn above.) Each dimension will be no more than 20. The next line will contain an integer n (0 < n <= 10) followed by n pairs of integers, each pair giving the location of a box as the distances from the top and the left walls of the room. The following lines will be of the form direction m, where direction is either down, left, up, right, or done and m is a positive integer. For example, left 2 would mean to try to move the right wall 2 spaces to the left. The "direction" done indicates that you are finished pushing this set of boxes around. There will be no integer m following the direction done, of course.  The data sets are followed by a line containing 0 0.

 Input will consist of multiple problem instances. Each instance will start with a single line containing two integers n and m, indicating the number of rows and columns in the image. The maximum values for these integers is 128. The next n lines will each contain m characters representing the image to process. A black pixel will be represented by a '1', and a white pixel will be represented by a '0'. The input line 0 0 will terminate input and should not be processed.

 Input consists of a sequence of test cases, each consisting of four (x, y) values giving the counterclockwise traversal of the cake's vertices as viewed from directly above the cake; the final test case is followed by a line containing eight zeros. No three points will be collinear, all quadrilaterals are convex, and all coordinates will have absolute values of 10000 or less.

 The first line of the input file contains three integer numbers: N -- the number of letters in Freish alphabet, M -- the length of all Freish sentences and P -- the number of forbidden words (1 <= N <= 50, 1 <= M <= 50, 0 <= P <= 10).   The second line contains exactly N different characters -- the letters of the Freish alphabet (all with ASCII code greater than 32).   The following P lines contain forbidden words, each not longer than min(M, 10) characters, all containing only letters of Freish alphabet.  

 Each of two lines of the input file contains eight pairs of numbers --the coordinates of centres of red and white draughts respectively. The draughts are considered to be cylinders of radius 0.4 and height 0.15. The coordinates are calculated so that the board is a square 8x8 with vertices (0, 0), (0, 8), (8, 0) and (8, 8). There will be no draught that overlaps or touches another one. Also each piece in the initial position is completely contained within the limits of the board.

 Input will contain m + n + 1 lines. The first line contains two positive integers m, n. (m is less than 200, and n is less than 1000). Then m lines follow, each with a deduction relation. The last n lines each contains a query.   You can see that there is no space between declarations in S1, S2 and Q. And there is one space between S1 and "=>" and between "=>" and S2. And it is confirmed that the number of declarations in S1, S2 and Q will not exceed 52.

 The first line of the input file contains three integer numbers -- N, M (2 <= M, N <= 10) and P (P <=100). Next N lines contain M characters each, and represent the grid. The following P lines contain words that are to be found on the fillword grid.   Fillword will always have at least one solution. All characters occurring in fillword will be capital English letters.  

 The first line of the input file contains an integer N(1 <= N<=30). The next N+1 line contains the point set S0,S1,...SN, that is, in the next i'th line, there are all the points coordinate in Si-1. One point is represented by x and y coordinate, separated by a comma. And every point is preceded a semicolon. Every line of Si configuration is ended by '#'. All coordinates are integers. See the sample input for detailed information.

 On the first line of the input, there is a single positive integer n, telling the number of test scenarios to follow. Each test scenario begins with a line containing a single positive integer p < 40000, the number of ports on the two functional blocks. Then follow p lines, describing the signal mapping:On the i:th line is the port number of the block on the right side which should be connected to the i:th port of the block on the left side.

 On the first line of the input, there is a single positive integer n, telling the number of test scenarios to follow. Each test scenario begins with a line containing a single positive integer m <= 100, the number of vases in the collection. Then follow m lines, one per vase, each with a pair of numbers, si and di, separated by a single space, where si ( 0 < si <= 36 ) indicates the shape of Mr Cheng's i:th vase, and di ( 0 < di <= 36 ) indicates its decoration.

 On the first line of input is a single positive integer n, telling the number of test scenarios to follow.Each test scenario consists of one line containing two non negative integers m and k, where m <= 50 is the number of obstacles, and k is the point of difficulty asked for.

 On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario begins with a line containing two positive integers m and q, where m (at most 30000) is the number of employees and q (at most 200) is the number of queries. The following m lines each list an employee by three integers on the same line: employee ID number (six decimal digits, the first one of which is not zero), yearly salary in Euros and finally height in μm (1 μm = 10 -6 meters - accuracy is important at TALL). The chairperson is the employee that earns more than anyone else and is also the tallest person in the company. Then there are q lines listing queries. Each query is a single legal employee ID.  The salary is a positive integer which is at most 10 000 000. No two employees have the same ID,and no two employees have the same salary. The height of an employee is at least 1 000 000 μm and at most 2 500 000 μm.

 On the first line of input is a single positive integer n, telling the number of test scenarios to follow.Each test scenario consists of two lines, each containing a string of the characters '0' and '1' of length at most 3000, both describing a correct exploration tour of a subway tree system.

 On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario begins with a line containing two non-negative integers m and r, 1 < m < 200 being the number of prisoners in each of the two prisons, and r the number of dangerous pairs among the prisoners. Then follow r lines each containing a pair xi yi of integers in the range 1 to m,which means that prisoner xi of the first prison must not be placed in the same prison as prisoner yi of the second prison.

 On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario begins with a line containing two positive integers m and s, 1 <= m <= 200,1 <= s <= 1000 being the number of junctions and streets, respectively. The following s lines contain the streets. Each street is described with three integers, xi, yi, and di, 1 <= xi,yi <= m, 0 <= di <= 1, where xi and yi are the junctions connected by a street. If di=1, then the street is a one-way street (going from xi to yi), otherwise it's a two-way street. You may assume that there exists a junction from where all other junctions can be reached.

 On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario consists of a single line containing the positive integer m < 1000000, the number initially written on the blackboard.

 Input will consist of one problem instance. The first line will contain a single integer n indicating the number of highway connections between brothers or between brothers and the park. The next n lines will contain one connection per line, of the form name1 name2 dist, where name1 and name2 are either the names of two brothers or the word Park and a brother's name (in either order), and dist is the integer distance between them. These roads will all be 2-way roads, and dist will always be positive.The maximum number of brothers will be 20 and the maximumlength of any name will be 10 characters.Following these n lines will be one final line containing an integer s which specifies the number of cars which can fit in the parking lot of the picnic site. You may assume that there is a path from every brother's house to the park and that a solution exists for each problem instance.

 Input will consist of multiple problem instances. Each instance will consist of 3 lines. The first line will be a non-negative integer n <= 50 indicating the number of types of polygonal numbers of interest in this problem. Note that this line may be longer than 80 characters. The next line will contain n integers indicating the indices of these polygonal numbers (all distinct and in increasing order). For example, if the first line contained the value 3, and the next line contained the values 3 6 10, then that problem instance would be interested in 3-gonal, 6-gonal and 10-gonal numbers. Each index k will lie in the range 3 <= k <= 1000. The last line of the problem instance will consist of a single positive integer s <= 10000, which serves as a starting point for the search for poly-polygonal numbers. A value of n = 0 terminates the input.

 The input will consist of multiple cases. Each case will be specified on one line, in the form m n f0 f1 ... f m+n-1where fi is the coefficient of x i in the power series expansion of f. You may assume that  1 <= m, 1 <= n <= 4, 2 <= m + n <= 10, and fi are integers such that |fi| <= 5. The end of input will be indicated by a line containing m = n = 0, and no coefficients for f. You may assume that there is a unique solution for the given input.

 This problem will consist of multiple problem instances. Each problem instance will consist of a positive integer n <= 11 indicating the number of rows in the SP that follows. (n = 0 indicates the end of input.)The rows of the SP will follow, one per line with entries separated by single spaces, delimited by a trailing 0. (The trailing 0 is, of course, not part of the input data proper and you may assume that each row given has at least one cube.) Each entry in the pattern proper will be a positive integer less than or equal to 20 and there will be no more than 20 entries in any row.

 Input will consist of multiple problem instances. Each instance will start with two integers r and w,indicating the number of Red and White pieces on the board (values of r = w = 0 indicates end of input, otherwise 1 <= r, w <= 12). The next line will contain r square numbers indicating the Red piece positions and the next line will contain w square numbers for the White piece positions. Positive square values will indicate that a normal piece lies on that square, while a negative value -sq will indicate that a promoted piece lies on square sq. The next line will contain a single integer m >= 1 indicating the number of moves to make, followed by a space and then a single character (either R or W) indicating whose move it is. The next m lines will contain the m moves, using the notation described above. (You may assume that there are no more than 13 square numbers listed in any one move.)  All board positions will be legal positions (e.g., there will never be two pieces occupying the same square). You may assume that pieces that have advanced to their promotion row are indeed promoted;that is, there will be no pieces on their promotion row that are not kings.

 Input will consist of multiple problem instances. The first line will consist of an integer n indicating the number of problem instances. Each instance will consist of two lines: the first will contain two integers m and T (1 <= m <= 50, 1 <= T <= 40), where m is the size of the board excluding the Start and End squares, and T is the target number of turns. The next line will contain instructions for each of the m interior squares on the board. Instructions for the squares will be separated by a single space, and a square instruction will be one of the following: +n, -n, L or 0 (the digit zero). The first indicates a right move of n squares, the second a left move of n squares, the third a lose-a-turn square, and the fourth indicates no instruction for the square. No right or left move will ever move you off the board.

 Input will consist of one problem instance. The first line will contain a positive integer n <= 20 indicating the number of objects in the scene. The next n lines will contain a description of these objects using the formatm x1 z1 x2 z2 ... xm zm, where m is the number of vertices in the object and the remaining values are the vertices of the intersection of the object with the xz-plane. All objects will have between 3 and 6 vertices. Objects are assumed to be labeled "A", "B", "C", ... in the order they are defined. Next in the input will be a positive integer p <= 10 indicating the number of planes used to create the BSP tree. The last p input lines will contain a description of each plane of the form x1 z1 x2 z2 representing two points on the intersection line of the plane and the xz-plane. You may assume that no line will intersect any object (including edges and vertices) and that no plane is parallel to the z-axis.All coordinates will be integers.

 Input will consist of multiple problem instances. The first line of input will contain a positive integer indicating the number of problem instances. The input for each problem will consist of multiple lines. The first line of input for a problem will contain the integer n (20 <= n <= 500) which is equal to the number of characters in the ciphertext. The following lines will contain the ciphertext, all upper case in groups of 5 letters separated by a single space. (The last group of letters may contain fewer than 5 letters.) There will be 10 groups of letters per line, except possibly for the last line of ciphertext. The input line following the last line of ciphertext will contain the crib; a single word consisting of between 4 and 10 (inclusive) upper case characters.

 The input contains three two-character locations for the white king, white queen, and black king, in that order, separated by spaces.  The input position is a valid chess position for the white's turn, i.e. all figures occupy different spaces, kings are not located in the neighboring squares, and the black king is not under the check.

 In the input, there are three integers, N (1 <= N <= 100), W and E, (0 <= W, E <= 100*N) separated by spaces.   Process to the end of file.

 The first line of the input contains the number of existing posts N (2 <= N <= 100). The second line contains N integers in range form 1 to 9999 - the prices for the posts. The third line contains N integers in range from 0 to 99 - the values of BK for each K. All numbers in a line are separated by spaces.

 The first line of input contains a floating-point number A (0.1 <= A < 10) with the precision of up to 15 decimal digits. The second line contains the integer limit L. (1 <= L <= 100000).

 第一行是测试数据的数目t（0 <= t <= 20）。以下每行均包含二个整数M和N，以空格分开。1<=M，N<=10。

 The first line of the input contains the number of cards N (3 <= N <= 100). The second line contains N integers in the range from 1 to 100, separated by spaces.

 In the first line of input there are two numbers W and H (1 <= W <= 100, 1 <= H <= 100), separated by spaces. Next H lines contain W characters each. Characters in these lines are either '*' (ASCII 42) or '.' (ASCII 46).

 The input contains one or more lines of the sticker text. The first line is an integer indicating the lines to follow. Text contains only the following characters: "A" to "Z", "a" to "z", ",", ".", "!", "?", spaces and line ends. The text length is less or equal than 10000 characters. The text always contains some non-space characters, and the first of them is always a letter.

 The first line of input is an integer t (1 <= t <= 20), the number of the test polygons. Each of the following lines contains a string composed of digits 1-9 describing how the polygon is formed by walking from the origin. Here 8, 2, 6 and 4 represent North, South, East and West, while 9, 7, 3 and 1 denote Northeast, Northwest, Southeast and Southwest respectively. Number 5 only appears at the end of the sequence indicating the stop of walking. You may assume that the input polygon is valid which means that the endpoint is always the start point and the sides of the polygon are not cross to each other.Each line may contain up to 1000000 digits.

 Input consists of multiple datasets, one per line, of the form:  diameter revolutions time  The diameter is expressed in inches as a floating point value. The revolutions is an integer value. The time is expressed in seconds as a floating point value. Input ends when the value of revolutions is 0 (zero).

 The first line of input contains a single integer t (1 <= t <= 20), the number of test cases. The first line of each test case contains an integer N (1 <= N <= 20,000), the number of congruence. The next N-1 lines each contains two space-separated node numbers that are the endpoints of an edge in the tree. No edge will be listed twice, and all edges will be listed.

 The first line of the input is an integer t (1 <= t <= 100), representing the number of commands. In each of the following lines, there is a command. Assume all the commands are legal which means that they won't try to paint/test the grids outside the board.

 第一行是测试数据的组数t（0 <= t <= 20）。以下每行是一组测试数据，每组包括棋盘上的两个位置，第一个是起始位置，第二个是目标位置。位置用"字母-数字"的形式表示，字母从"a"到"h"，数字从"1"到"8"。  

 第一行是数列的数目t（0 <= t <= 20）。以下每行均包含四个整数，表示数列的前四项。约定数列的前五项均为不大于10^5的自然数，等比数列的比值也是自然数。

 The first line contains a single integer t (1 <= t <= 20) that indicates the number of test cases. Then follow the t cases. Each case contains two lines. The first line contains the integer n (1 <= n <= 10000), and the second line gives the initial permutation.

 第一行是测试数据的组数T(0 ≤ T ≤ 20)。每组数据包括两行，第一行是整数N(2 < N < 10)，第二行是N个整数，x1, x2,..., xn(0 ≤ xi ≤ N)。

 The first line of the input is an integer t (1 <= t <= 20), representing the number of ropes. Each of the following lines describes a rope.   We describe the rope by pointing out the cross-point (See Figure_2). We first number all the cross-point. Then, our fingers go along the rope from one end to the other, whenever we encounter a cross-point we will record its number on the paper. If the rope goes above the point, we write down a positive number. If the rope goes under the point, we write down a negative number. In the end, we put a zero as an end sign. For example, the rope shown in Figure_2 is recorded as:   +1 -2 +3 -4 +5 -6 -7 +8 +2 -1 -10 +9 -8 -3 +4 -5 +6 +7 -9 +10 0      Figure_2  

 第一行是测试数据的组数t（0 <= t <= 20）。每组测试数据的第一行是四个整数N，X，Y，MAX，用空格分隔。N是平台的数目（不包括地面），X和Y是Jimmy开始下落的位置的横竖坐标，MAX是一次下落的最大高度。接下来的N行每行描述一个平台，包括三个整数，X1[i]，X2[i]和H[i]。H[i]表示平台的高度，X1[i]和X2[i]表示平台左右端点的横坐标。1 <= N <= 1000，-20000 <= X, X1[i], X2[i] <= 20000，0 < H[i] < Y <= 20000（i = 1..N）。所有坐标的单位都是米。   Jimmy的大小和平台的厚度均忽略不计。如果Jimmy恰好落在某个平台的边缘，被视为落在平台上。所有的平台均不重叠或相连。测试数据保证问题一定有解。  

 第一行是测试数据的组数t（0 <= t <= 20）。以下每行是一组测试数据，每行仅有的一个数字是这摞硬币的枚数M，0< M< 10^8。

 The first line of the input is N, the number of test cases for this problem. In each of the N following lines, there is x, and y representing the coordinates (x, y) of a point.

 The input may describe more than one game. For each game, the input begins with the number N of students,followed by N (even) candy counts for the children counter-clockwise around the circle. The input ends with a student count of 0. Each input number is on a line by itself.

 The first line of input is the number of datasets to follow. Each dataset should be processed the same.  The input for each dataset consists of 7 lines; each line consists of 7 characters from the set {x, e, o, E, O} with blanks between them. You are guaranteed that exactly one 'E' or 'O' will appear, and that two or more 'o' or 'O' will appear.

 Input consists of multiple datasets, one per line. Each correct line contains three pieces of information:  1. Tax rate  - A tax rate always has a '%' after it if it is a whole number (i.e. 5%).  - A tax rate never has a decimal point in it.  - A tax rate may contain a fraction but its denominator must only be a 2, 4, or 8.  - A tax rate must have a numerator that is less than its denominator.  2. Contract End Date  - A contract end date is a numerical representation of the month (one or two digits) and the last two digits of the year. The month and year may be separated by a single hyphen (i.e. 12-05 or 1205 would refer to 15DEC05).  3. Contract Start Date  - A contract start date is a numerical representation of the month (one or two digits) and a two -digit day of the month. The month and day may be separated by a single hyphen (i.e. 12-05 or 1205 would refer to 05DEC03).  - A contract start date must start on or after the current date. For example, the cur rent year is 2003. If the start date is 305 it is assumed that the year the contract starts will be 2004.  Note: There may be 0 or more spaces between each of the three fields.  Note: The Kalii calendar consists of the twelve months familiar to you, but all months have 31 days.  Note: The maximum tax rate is 99.875%

 The first line of the input consists of a positive integer n, which is the number of datasets (lines) that follow. Each dataset consists of a single line containing the two input expressions to be tested. The input expressions consist of any of 26 variables named a-z, the binary operators |, &, ^, (OR, AND and XOR respectively), the unary ~ (NOT),and parenthesis. The expressions should be evaluated ignoring all other characters and with operator precedence as in the C language (parenthesis, ~, &, ^, |). The two expressions will be input in sequence and it is up to your program to determine where one expression ends and the next begins.  Most logic manipulation programs would convert each expression into a normal form and check if the two normalized expressions are identical. Fortunately for you, each expression will consist of no more than 100 operations using no more than 10 different variables. For that many cases, you can test for equivalence by simply evaluating the two input expressions for all possible inputs and comparing the results.

 Input consists of a sequence of board descriptions and starting points. The first line of the input is  Nrows Ncols Nblocks StartX StartY  where Nrows is the number of rows in the rectangular array, Ncols is the number of columns in the rectangular array, Nblocks is the number of blocked off squares on the board and (StartX, StartY) is the position on the board where the path is to start (and end). StartX and StartY are 0 based (StartX ranges from 0 to Ncols - 1). Following the first line there are Nblocks lines giving the coordinates of the blocked off squares, one per line. The coordinates of these points are 0 based and are of the form X Y. The final line of each board description is a blank line.  The last line of the input is line of 5 zeroes.

 Input will consist of a sequence of integers N, one per line, ending with a 0 (zero) to indicate the end of the data. N is the number of lines in a poem.

 The input will be a sequence of positive integers n, one per line followed by a zero (0) (on another line) indicating the end of the input.

 The first line of the input consists of a positive integer n, which is the number of datasets that follow. Each dataset consists of 3 lines; each line contains two floating point values which represent the (two -dimensional) coordinate of one vertex of a triangle. So, there are total of (n*3) + 1 lines of input. Note: All input triangles wi ll be strongly non-degenerate in that no vertex will be within one unit of the line through the other two vertices.

 The first line contains a single integer t (1 <= t <= 20) that indicates the number of test cases. Then follow the t cases. Each case contains exactly 7 integers r, x1, y1, x2, y2, x3 and y3. r is the radius of the cake, (xi, yi) is the coordinates of i-th berry. The center of the cake is at (0, 0) and it's confirmed that all the berries will be on the cake.

 The first line of the input is a single integer t (1 <= t <= 20), the number of test cases. Each case contains three lines, indicating the time on the accurate accutron and the time on the slow accutron, separated by a blank column. (Please refer to the Sample Input.)

 The first line of the input contains two integers g and w (1 <= g <= 5, 1 <= w <= 30), the number of girls and the number of wishes respectively. The next g lines each contain a word in lowercase, representing the name of a girl. Then the next w lines each contain a string of letters and punctuations, namely the wish, which will contain at most 200 characters.   Each wish contains one or more sentences, and each sentence is terminated by a '!'. The first letter of each sentence is in uppercase, and other letters will be always in lowercase. No other characters apart from '!', spaces and letters will appear in the sentence. You may assume that each wish is correct in grammar.  

 The first line contains a single integer t (1 <= t <= 20) indicating the number of test cases. Then follow the t cases. Each case contains exactly two lines. The first line contains three integers, n, a, b (2 <= n <= 10000, 0 < a < b <= 100); the second line contains n integers, the numbers in the pool, any of which lies in [-9999, 9999].

 The input contains several test cases. The first line contains a single integer t (between 1 and 10), which is the number of test cases. Rest of the input file contains t test cases. The first line of each test case contains 2 positive integers, which are the length and the width of the rectangle respectively. The second line contains a single integer n, which is the number of obstacles in the museum (between 0 and 50). After it, there are n lines, which contain the obstacle data. Each obstacle data is in a single line, which begins with an integer m, which is the number of vertices of the obstacle (between 4 and 50), followed by 2m numbers, which are the x, and y coordinates of the vertices listed in clockwise order. Every coordinate in the input is a positive integer less than 1,000,000. Upper-left corner of the rectangle is the coordinate origin.

 The first line contains a single integer t (1 <= t <= 20), the number of test cases. Each case represents a graph. It begins with a line containing two integers n and m (1 <= n <= 100), the number of nodes and edges. Each of the following m lines contains a triple (xi, yi, wi), indicating that xi and yi are connected by an edge with weight = wi. For any two nodes, there is at most one edge connecting them.

 The first line of the input is a single integer t (1 <= t <= 20), the number of test cases. Each of the following line contains two integers n and i (1 <= n <= 15), the value of N in line 4 and which line of the program's output to print.

 The first line contains a single integer t (1 <= t <= 20) that indicates the number of test cases. Then follow the t cases. Each test case begins with a line contains an integer n (1 <= n <= 15), representing the size of wall. The next n lines represent the original wall. Each line contains n characters. The j-th character of the i-th line figures out the color of brick at position (i, j). We use a 'w' to express a white brick while a 'y' to express a yellow brick.

 The input consists of T test cases. The first line contains the number T (1 <= T <= 10). Then follow the T test cases. Each test case is started with a line contains three integers n, m and k (1 <= n, m, k <= 100), representing the number of clans on gorges X, gorge Y and gorge Z. The next three lines will contain the height of clans on the three gorges, the heights are positive integer less than 100. Test cases are separated by a blank line. The clans are named as described in the comment of figure 1. Their names also refer to their altitude. So the input of a case is of the form:   n m k  x1 x2 x3 ... xn  y1 y2 y3 ... ym  z1 z2 z3 ... zk  

 The first line includes the number of test cases (at most 20). First line of each test case includes two positive integers; the first one being N (1 <= N <= 7), the number of item kinds, and the second is M (1 <= M <= 7), the number of guests. In each of the next N lines, there is one string of length M, representing one group (different items of the same kind). The rest of the input includes several lines of statements. Each statement is of form i j X k r, which means that the jth item of the ith group and the rth item of the kth group belong to the same guest (if X is R) or do not belong to the same guest (if X is N). The last line of each test case is a dummy statement 0 0 R 0 0.

 The first line of input contains the test case number T (1 <= T <= 20). For each test case, the first line contains three integers, M, N and K (1 <= M, N <= 50, 0 <= K <= 20000). Each of the following M lines contain N integers. None of the integers will exceed 3000. (M * N) describes the peanut field. The j-th integer X in the i-th line means there are X peanuts on the point (i, j). K means Dodo must return to the road in K units of time.

 First line of the input file contains a single integer N indicating the number of DDL programs to follow (1 <= N <= 20). The first line of each test case contains a single integer indicating number of statements in that program which is in the range (1...100). There are no blank lines between test cases. Statements of each DDL program come one after the other in separate lines without any blank lines in between. Statements are not explicitly labeled, but they are implicitly labeled by the number of their line beginning from 1 for the first statement in each program. There is no syntax error in programs and they are guaranteed to terminate, and no overflow or underflow errors will occur during execution. In each line of the program, tokens (e.g. GOTO, =, etc.) are separated by at least one blank character. Also there may be some blank characters in the beginning or at the end of each line.

 The input file contains several test cases. The first line of the input consists of a single integer t (between 1 and 20), the number of test cases. Following the first line is the data for t test cases. The first line of each test case contains four real numbers xs, ys, xt, yt which are x and y coordinates of the source and destination respectively. The second line of the test case contains the color sequence: the first number is the length of the sequence (between 1 and 30), and the rest of the line is the sequence itself. Each color in the sequence is an integer in the range 1...100. The third line contains a single integer n in the range 1...60 which is the number of tunnels followed by n lines each containing five numbers. The first two numbers are the x and y coordinates of one end of the tunnel. The third and fourth numbers are the x and y coordinates of the other end. Coordinates are real numbers. The fifth number is an integer in the range 1...100 

 The first line of the input contains an integer N (1 <= N <= 20) that is the number of test cases. Following the first line, there are two lines for each test case. A test case consists of two arithmetic expressions, each on a separate line with at most 80 characters. There is no blank line in the input. An expression contains one or more of the following:    Single letter variables (case insensitive).  Single digit numbers.  Matched left and right parentheses.  Binary operators +, - and * which are used for addition, subtraction and multiplication respectively.  Arbitrary number of blank or tab characters between above tokens.  Note: Expressions are syntactically correct and evaluated from left to right with equal precedence (priority) for all operators. The coefficients and exponents of the variables are guaranteed to fit in 16-bit integers.  

 The first line of the input consists of a single integer N (1 <= N <= 20), which is the number of test cases. The test cases appear with no blank lines in between. The first line of each test case consists of the number of cities (between 1 and 50) followed by pairs of integers (x, y) which are location of cities (each pair in one line), followed by number of faces in a separate line (between 1 and 50), followed by face information on each line. Face information consists of number of cities making the face and the city numbers in clockwise (or counterclockwise) order.

 The first line includes the number of test cases (at most 20). Each test case data has an integer N (1 <= N <= 20), the number of plastic rings, in its first line. Following the first line there are N lines, each containing three integers, the first and second being the x and y coordinates of the circle of the ring, and the third is its radius. Coordinates are positive integers less than 1000 and the radius is in the range 1...100.

 The input consists of several test cases. The first line of the file contains a single number M, which is the number of test cases (1 <= M <= 10). Each of the following M lines, is exactly one correct expression. There may be arbitrarily space characters in each line. The length of each line (including spaces) is at most 255 characters.

 The first line of the input file contains an integer M which is the number of test cases to solve (1 <= M <= 10). For each test case, the first line contains an integer N, the number of rectangles, followed by N lines describing the rectangles. Each rectangle R is specified by 5 integers in one line: the y and x coordinates of the upper left corner of R, the y and x coordinates of the lower right corner of R, followed by the color-code of R.  Note that:    Color-code is an integer in the range of 1 .. 20.  Upper left corner of the board coordinates is always (0,0).  Coordinates are in the range of 0 .. 99.  N is in the range of 1..15.  

 The first line of the input is the number M, which is the number of test cases (1 <= M <= 10). Each test case has three lines. The first line contains N1 and N2, the number of integers on the first and the second row respectively. The next line contains N1 integers which are the numbers on the first row. The third line contains N2 integers which are the numbers on the second row. All numbers are positive integers less than 100.

 The first line of the input contains a single number M, which is the number of test cases in the file (1 <= M <= 10), and the rest of the file consists of the data of the test cases. Each test case begins with a line containing s (1 <= s <= 100), the number of line segments in the figure. It follows by s lines, each containing x and y coordinates of two end points of a segment respectively. The coordinates are integers in the range of 0 to 1000. 

 The first line is an integer T (1 <= T <= 20), which shows the number of the test cases. Each of the following T lines contains an integer W (1 <= W <= (3^20-1)/2), expressing the weight of an object.

 The input describes several trees. The first line of this file is M, the number of trees (1 <= M <= 10). Description of these M trees comes next in the file. Each tree has N < 200 nodes, labeled 1, 2, ... N, and each node can have any possible number of children. Root has label 1. Description of each tree starts with N in a separate line. The following N lines describe the children of all nodes in order of their labels. Each line starts with a number p (1 <= p <= N, the label of one of the nodes), r the number of the immediate children of p, and then the labels of these r children.

 The input file contains M instances of this problem (1 <= M <= 10). The first line of the input file is M. The descriptions of the input data follows one after the other. Each instance starts with N in a single line (N <= 30). Each line i of the following N-1 lines contains D[i , j], for all i=1..N-1, and j=i+1..N.

 The first line of the input is M, the number of test cases to be solved (1 <= M <= 10). For each test case, the first line is N, the number of plants in that test case (1 <= N <= 50), followed by N lines for each plant data. Each plant data consists of three integers: the first number is the unique plant index (1..N), followed by two positive integers x and y representing the coordinates of the plant. Plants are sorted by the increasing order on their indices in the input file. Suppose that the values of coordinates are at most 100.

 The input consists of several test cases. The first line of the file contains a single number M, which is the number of test cases in the file (1 <= M <= 10). The rest of the file consists of the data of the test cases. Each test case data begins with a line containing the number of rows and the number of columns in the grid, which are in the range 1 to 80. The second line of a test case contains two pairs of integers, which are  y and x coordinates of the source point (where the Pegasus landed) and the y and x coordinates of the destination point (where you may find the king). The horizontal and vertical lines in the grid are indexed from left to right and top to bottom from 0, so the coordinates can be expressed using these indices.  Following the first two lines, there are lines that describe the map of the region. Each line consists of a string of 0's and 1's, describing squares of the corresponding row. A 1 in the string tells you that the corresponding square in the grid belongs to a stronghold. The width of the region is the length of all strings, and its height in the number of strings.  

 The input consists of several test cases. Each test case begins with a line containing the number of truck types, N, 2 <= N <= 2 000. Each of the following N lines of input contains one truck type code (a string of seven lowercase letters). You may assume that the codes uniquely describe the trucks, i.e., no two of these N lines are the same. The input is terminated with zero at the place of number of truck types. 

 The first line of the input contains a single integer T (1 <= T <= 20), the number of test cases. Then T cases follow. Each test case begins with a single line containing an integer N (1 <= N <= 20), the number of films. Each of the following n lines is in the form of "F1 F2 F3 F4 F5 F6 F7 D W". Fi (1 <= i <= 7) is 1 or 0, representing whether the film can be made on the i-th day in a week (a week starts on Sunday): 1 means that the film can be made on this day, while 0 means the opposite. Both D (1 <= D <= 50) and W (1 <= W <= 50) are integers, and Alice should go to the film for D days and the film must be finished in W weeks.

 The first line is an integer T (1 <= T <= 20), which shows the number of the cases. Then T test cases follow. The first line of every test case contains an integer N (1 <= N <= 10), which represents the number of segments. The following N lines express N segments, respectively. Assuming that the length of any segment is between 1 and 20.

 The first line of the input contains a single integer T (1 <= T <= 20), the number of test cases. Then T cases follow. The first line of each case contains N, and the second line contains N integers giving the time for each people to cross the river. Each case is preceded by a blank line. There won't be more than 1000 people and nobody takes more than 100 seconds to cross.

 The first line of the input contains a single integer T (1 <= T <= 20), the number of test cases. Then T cases follow. The first line of each test contains M (1 <= M <= 10000), a and b (0 <= a, b <= 100). The second line contains K1, K2, K3, ..., Km (0 <= Ki <= 20, i = 1..M).

 The first line of the input file contains integers N, L, K, Q separated by spaces. The second line consists of N integers c1, c2, ... , cn, separated by spaces, in the given order, where ci is the color of the circle number i. The third line consists of a single integer M (0<=M<=10000) denoting the total number of segments. Then follow M lines, each containing a description of one oriented segment. Each segment is described by three integer numbers Aj, Bj, Cj, separated by spaces, where A and B are the numbers of the circles connected by the j-th segment with direction from Aj to Bj, and Cj represents the color of this segment. 

 The first line of the input contains a single integer T (1 <= T <= 20), the number of test cases. Then T cases follow. Each test case begins with a line with two integers N and M, followed by M lines each containing one message as described above. 

 The first line of the input contains a single integer T (1 <= T <= 20), the number of test cases. Then T cases follow. Each test case contains two lines. The first line consists of one integer N (1 <= N <= 1000), indicating the number of chessmen. The second line contains N different integers P1, P2 ... Pn (1 <= Pi <= 10000), which are the initial positions of the n chessmen.

 There are several test cases in the input. Each starts with the integer N (1<= N <= 10) representing the number of prioritized pools. Then the following lines describe the IIC performance - blocks sequences requested by CPU, in such format:  0x12345678 2  The 8-bit hex-decimal number represents the address of the block CPU requested and followed an integer representing the number of times this block is sequentially requested.  For example, the block request sequence is: 0x11111111 0x11111111 0x11111111 0x22222222 0x22222222 0x22222222 0x22222222 0x33333333... will be given in such format:  0x11111111 3  0x22222222 4  0x33333333 1  The block sequence will be ended with # and the test case will be ended with N = 0.  

 The input file contains a single integer k (1<=k<=20). 

 The first line of the input file consists of the single integer number L (4<=L<=50) denoting the desired crossword length. The second line consists of the single positive integer N (at most 1000) indicating the number of words in the list. Each of the followings N lines consists of a string of 20 or less (but at least 2) latin lowercase alphabetic characters. The words in the list are arranged in lexicographic order and no word is repeated. 

 The input contains a single integer number N (2<=N<=100). 

 The input file consists of two positive integer numbers M (not greater than 4) and N (not greater than 8) separated by a single space. 

 The first line of the input file contains identifiers of the airports of origin and of destination and starting time of the journey separated by spaces. The starting time is the time when pop star arrives to the airport of origin.   The second line of the input file contains single integer N. This integer represents the number of international airports and is not less than 2 and not greater than 100.   The rest of the input file consists of descriptions of international airports. Each description starts with a headline and may contain some complementary lines.   The headline consists of the airport identifier, airport time zone, boarding time and integer M separated by spaces. Time zone is time difference between local time and Greenwich Mean Time and has a format of "shh:mm", where "s" is the sign of time difference and are either "+" or "-". Boarding time is the time delay needed for boarding or airplane change in that particular airport. Integer M defines a number of flights in the airport schedule (not greater than 300), each flight is described on its separate line following the headline.   The description of the flight consists of the flight identifier, destination airport identifier, departure time and travel time, separated by spaces. The travel time is the time gap between departure and landing (arrival).   The task will always have a solution for the given data.  

 You will be given multiple arrow sequences to provide foot guides for. Every sequence consists of a line containing from 1 to 70 characters, representing the arrow that must be hit at each time unit. The possible characters are U, L, D, and R, signifying the four arrows, or a period, indicating that no arrow need be hit. Assume that your left and right feet start on the Left and Right arrows for the first time unit of a sequence.  There are at most 100 sequences. Input is terminated by a line consisting of a single #.  

 The input file will contain an image of a part of the sheet that contains the polyomino P, represented by the characters '.' (dot) denoting empty spaces and '*' (asterisk) denoting squares that belong to the figure (because it is impossible to put infinite squared sheet in a file, the input file describes only part of it; all the omitted squares are considered empty). There will be no other characters in the lines of the input file. The input file will not contain lines that are longer than 100 characters and there will be no more than 100 lines. There will be always at least one solution for the given input file. 

 There are two integers n, k (separated by a single space) in the first line The integer n, 3 < n <= 500, is the number of all chambers in a cave and k is the number of all its outer chambers, k >= 3. The chambers are numbered from 1 to n. Chamber 1 is the entrance chamber. Chambers 1, 2, ..., k are outer chambers. They do not have to appear on the outer circle in this order.   The next 3n / 2 lines contain descriptions of the passages. Each description consists of three integers a, b, c separated by single spaces. The integers a and b are numbers of chambers at the ends of a passage. The integer c equals 0 or 1, where 0 means that the passage is easy to walk through and 1 that it is hard.  

 The first line of the file standard input contains integer n in the decimal representation. n does not exceed the number of elements of X.

 The first line of the input contains the number of intervals n, 1 <= n <= 10000. Each of the following n lines contains two integers a, b separated by a single space, 0 <= a < b <= 10000. They are the beginning and the end of an interval. 

 The first line of the input contains an integer n, 1 <= n <= 1000. This is the number of dominoes laid out on the table.   Each of the next n lines contains two integers a, b separated by a single space, 0 <= a, b <= 6. The integers a and b written in the line i + 1 of the input file, 1 <= i <= 1000, are the numbers of dots on the i-th domino in the row, respectively, in the top line and in the bottom one.  

 The first line of the input contains the number of data blocks x, 1 <= x <= 5. The following lines comprise the x blocks. The first block starts on the second line of the input file; each subsequent block starts directly after the previous one.   The first line of each block contains an integer n, 5 < n <= 1000, the number of poles.   Each of the following n lines in the block contains two integers a, b separated by a single space, 1 <= a, b <= 5. The integers in line i + 1 (in the block), 1 <= i <= n, describe the behaviour of the pole i. 

 The first line of the input contains the number of data blocks x, 1 <= x <= 5. The following lines constitute x blocks. The first block starts in the second line of the input file; each next block starts directly after the previous one.   The first line of each block contains two integers r and c separated by a single space, 2 <= r <= c <= 1000. These are the numbers of rows and columns, respectively. Each of the next c lines in the block contains two integers separated by a single space. The integers in the input line i + 1 in the block, 1 <= i <= c, are labels of rows with white squares in the i-th column.  

 The first line of the input contains the integer N, 1 <= N <= 1000, the number of squares.  Each of the following N lines describes a square by specifying integers X, Y and L separated by single blank characters, 1 <= X, Y, L <= 10000. X and Y are coordinates of the lower left corner (the corner with the least X and Y coordinates) and L is the side length.  

 The first line of the input contains two integers separated by a single blank character : the odd integer N, 1 <= N <= 1000, the number of cards, and the integer S, 1 <= S <= 1000, the number of double shuffle operations.  The following N lines describe the final order of cards after all the double shuffles have been performed such that for each i, 1 <= i <= N, the (i+1) st line of the input file contains pi (the card at the position i after all double shuffles).  

 The first line of input is the number of cases which follow. Each case begins with a line containing the number n of events and the number m of causes, 1 <= n, m <= 100000. Next follows n lines containing the t and x coordinates for each event. 

 The first line of the input contains two integers separated by blank character : the integer N, 1 <= N <= 100, the number of integers in the original sequence, and the target integer T, -10000 <= T <= 10000.  The following N lines contain the starting sequence : for each i, 1 <= i <= N, the (i+1) st line of the input file contains integer ai, 1 <= ai <= 100.  

 The first line of the input contains the integer N, 1 <= N <= 10000, the number of soldiers.  The following N lines of the input contain initial positions of the soldiers : for each i, 1 <= i <= N, the (i+1) st line of the input file contains a pair of integers x[i] and y[i] separated by a single blank character, representing the coordinates of the ith soldier, -10000 <= x[i],y[i] <= 10000.  

 The first line of the input contains the integer K, 0 <= K <= 10000, maximum number of coins that Bob can spend on his way.  The second line contains the integer N, 2 <= N <= 100, the total number of cities.   The third line contains the integer R, 1 <= R <= 10000, the total number of roads.   Each of the following R lines describes one road by specifying integers S, D, L and T separated by single blank characters :    S is the source city, 1 <= S <= N  D is the destination city, 1 <= D <= N  L is the road length, 1 <= L <= 100  T is the toll (expressed in the number of coins), 0 <= T <=100  Notice that different roads may have the same source and destination cities. 

 The input contains 12 lines. For each i, 1 <= i <= 12, the i th line describes the i th tile by specifying 5 numbers from the set {0, 1, 2} separated by single blank characters. This sequence shows the edge marking of the i th tile starting from an arbitrary edge (called the ith reference edge) going in the clockwise direction. 

 Each test case consists of one line of input containing five non-negative numbers separated by white space and giving integers S, x, y, dx, and dy. An input line containing five zeroes follows the last test case.

 Input will consist of several test cases. Each test case will consist of n, followed by n lines with n characters representing a map of the town. In the map, Jack's house is represented by 'H', Jack's school is represented by 'S', Jill's house is represented by 'h', Jill's school is represented by 's', impassable locations are represented by '*', and all other locations are represented by '.' You may assume the normal cartographic convention that North is at the top of the page and West is to the left. A line containing 0 follows the last case. 

 Each test case is given by a line of input containing x. The value of x will have magnitude at least 2 and be within the range of a (32-bit) int in C, C++, and Java. A line containing 0 follows the last test case. 

 Input contains a single line with all labels of the requested goods (in random order). Each kind of goods is represented by the starting letter of its label. Only small letters of the English alphabet are used. The number of orders doesn't exceed 200.  

 The first line of input contains the call number, the transcription of which you have to find. The number consists of at most 100 digits. The second line contains the total number of the words in the dictionary (maximum is 50000). Each of the remaining lines contains one word, which consists of maximally 50 small letters of the English alphabet. The total size of the input doesn't exceed 300KB.

 The first line of input contains one number, which is the length of the sequence of zeroes and ones. This length is less or equal to 1000000000. In the second line, there is one positive integer which is the number of questions asked and answers to them. The number of questions and answers is less or equal to 5000. The remaining lines specify questions and answers. Each line contains one question and the answer to this question: two integers (the position of the first and last digit in the chosen subsequence) and one word which is either `even' or `odd' (the answer, i.e. the parity of the number of ones in the chosen subsequence, where `even' means an even number of ones and `odd' means an odd number).

 The first line of input contains two positive integers: the number of crossing points N<=100 and the number of roads M<=10000. Each of the next M lines describes one road. It contains 3 positive integers: the number of its first crossing point, the number of the second one, and the length of the road (a positive integer less than 500).

 The starting game position is described in the first 4 lines of input. There are 4 symbols in each line, which define the colour of each stone in the row from the left to the right. The lines describe the rows of the chessboard from the top to the bottom. Symbol `0' means a white stone and symbol `1' a black one. There is no space symbol separating the symbols in the line. The fifth line is empty. The next 4 following lines describe the final game position in the same way.

 The first line of input contains two positive integers K, L -- the width and the length of the table (expressed as numbers of bricks). Neither the width nor the length of the table is greater than 100000 bricks. The following lines of the input file contain the description of the front view of the town. The description consists of a series of heights of visible buildings on each square from the left to the right (the height is measured by the number of the blocks, too). There is only one number on each line, i.e. the number of the lines with the front view description of the town equals K -- the width of the table. Similarly the next L lines of the input file contain the right sight view of the town. The heights of the wooden block towers are now specified from the front line to the back line. You may suppose there is no building in the town with height exceeding 5000 blocks. The maximal number of blocks needed for building the entire town does not exceed 2000000000.

 The input contains several test cases. The first line of each test case contains the integer N. The following n integers represent the sequence of notes.  The last test case is followed by one zero.  

 The input contains several test cases. Each test case contains an integer n, denoting the number of vertices. You may assume that 1<=n<=50. The last test case is followed by one zero.

 The input contains several test cases. The first line of each test case contains an integer n, denoting the number of piles. The following n integers describe the number of stones in each pile at the beginning of the game.  The last test case is followed by one zero.  

 The input contains several test cases. The first line of each test case contain two integer numbers n,m, denoting the number of rows and columns of the farm. The following n lines each contains m characters, describe the farm. A '#' means a blocked square, a '.' means a unblocked square.  The last test case is followed by two zeros.  

 The input contains several test cases. The first line of each test case contains an integer number n, denoting the number of piles. The following n integers describe the number of stones in each pile at the beginning of the game, you may assume the number of stones in each pile will not exceed 100.  The last test case is followed by one zero.  

 The input contains several test cases. The first line of each test case contains two integers n, k. (n<=10000) The following n-1 lines each contains three integers u,v,l, which means there is an edge between node u and v of length l.  The last test case is followed by two zeros.  

 The input contains several test cases. The first line of each test case contains two integers n(1<=n<=100),m(m<=100000).The second line contains 2n integers, denoting A1,A2,A3...An,C1,C2,C3...Cn (1<=Ai<=100000,1<=Ci<=1000). The last test case is followed by two zeros.

 The first line of the input file contains two integers, N and K (1 <= N <= 10000, 2 <= K <= 100) separated by a space.  The second line contains a sequence of N integers separated by spaces. Each integer is not greater than 10000 by it's absolute value.  

 The input contains a single line with three numbers Q, P and K, separated by spaces. Q is a real number (10 <= Q <= 1000000) given with no more than two digits to the right of the decimal point. This value represents the amount of the loan in dollars. One one-hundredth of a dollar is a cent. P and K are integers (0 <= P <= 100, 1 <= K <= 100). 

 The input contains a single integer N (1 <= N <= 100). 

 The first line of the input contains two integers N and M, separated by a space. N (1 <= N <= 1000) is the number of files of the server, and M (1 <= M <= 100) is the number of messages exchanged between the clients in their effort to determine the full file name.   Each of the next N lines contain one full file name. Full file names are given in a manner similar to MS-DOS 8.3 format. Each full file name is represented in name.extension form, where both the name and the extension consist of only capital, alphabetic characters and decimal digits. The name part will have at least one character and at most eight. The extension part will have at most three characters and may be empty. If extension is empty then separating dot may be omitted.   Each full file name appears in the input file no more than once.  

 The input has the fllowing structure:  N  x1 y1  x2 y2  ...  xN yN  L  N is the number of towers in the shire (excepting the implicit tower – Mordor), (x1, y1) ... (xN, yN) are coordinates (abscise, ordinate) of each of the N towers, and L is number representing the maximum length of a complete tour of the polygon.  There are some restrictions:  • 0 < N <= 50  • 0 <= xi, yi <= 200  • 0 < L < 1000  

 The input consists of a number of lock requests, each request on a different line. Requests have the following format:   MODE TRID ITEM   Where MODE is a single capital letter S or X denoting requested lock mode. TRID and ITEM are transaction identifier and data item identifier correspondingly. Both TRID and ITEM are integers, both are greater than zero, and both consist of at most 9 decimal digits.   There are at least one and at most 10000 requests in the input file.   The last request is followed by a line consisting of a single character '#'.  

 The input consists of at least one and most 100000 words. Each word consists of at least one and at most 10 lower-case letters. There will be no leading or trailing spaces. There will be no blank lines between the words, but there may be an arbitrary number of blank lines at the end of the file. 

 The input consists of two parts. The first part describes all towns in the country, and the second part describes all of the highways that have already been built.   The first line of the input file contains a single integer N (1 <= N <= 750), representing the number of towns. The next N lines each contain two integers, xi and yi separated by a space. These values give the coordinates of i th town (for i from 1 to N). Coordinates will have an absolute value no greater than 10000. Every town has a unique location.   The next line contains a single integer M (0 <= M <= 1000), representing the number of existing highways. The next M lines each contain a pair of integers separated by a space. These two integers give a pair of town numbers which are already connected by a highway. Each pair of towns is connected by at most one highway.  

 The first line of the input contains two integers K and N (1 <= K, N <= 1000) separated by a space. K is the minimal number of advertisements that every jogger must see, and N is the total number of joggers.   The following N lines describe the path of each jogger. Each line contains two integers Ai and Bi (both numbers are not greater than 10000 by absolute value). Ai represents the first billboard number seen by jogger number i and Bi gives the last billboard number seen by that jogger. During a run, jogger i will see billboards Ai, Bi and all billboards between them.  

 The input consists of 4 lines with 4 characters "w" or "b" each that denote game field position.

 The first line of the input file contains two integers, N and K, separated by a space.   Starting from the second line there is a description of a buffers' state. The state of each buffer is represented by a single character:    0 - when the corresponding buffer is free.  1 - when the corresponding buffer is occupied and has worthiness of 1.  2 - when the corresponding buffer is occupied and has worthiness of 2.  ...  9 - when the corresponding buffer is occupied and has worthiness of 9.  * - when the corresponding buffer is locked.   Those characters are situated on the consecutive lines grouped by 80 characters per line without any spaces. Thus, each line starting from the second one contains exactly 80 characters with a possible exception for the last line.  

 The first line of the input file contains integer number N (1 <= N <= 100), denoting the number of contestants. Then N lines follow, each line contains three integers Vi, Ui and Wi (1 <= Vi, Ui, Wi <= 10000), separated by spaces, denoting the speed of ith contestant in each section.

 The first line of the input file contains a single integer N (2 <= N <= 100) representing the total number of pieces in the domino set. The following N lines describe pieces. Each piece is represented on a separate line in a form of two digits from 1 to 6 separated by a space. The digits of a piece can be written in any order.

 The input file consists of a single line with two integers i and L (0 <= i < 10000 and 1 <= L <= 14), separated by a space.

 The first line of the input file contains two integers N and M, separated by a space. N (3 <= N <= 50) is a total number of guard towers on the Lilliputian frontier. M (0 <= M <= 1000) is a total number of historical monuments that are situated inside Lilliputia.   Next N lines contain guard towers' coordinates in a clockwise order followed by M lines that contain historical monuments' coordinates. All coordinates are represented as two integers (for X and Y correspondingly) separated by a space. Coordinates are given in a kilometer scale and each coordinate does not exceed 10000 by an absolute value. All guard towers are located at distinct points.  

 Input contains several testcases. For each testcase, the first line contains only one integer n, (0 < n <= 1,000), representing the number of tasks Tom has received. Then n lines follow. Each line contains n integers, 0 or 1, separated by white spaces. If the j th integer in the i th line is 1, then the machine can smoothly move from task i to task j, otherwise the machine can not smoothly move from task i to task j. The tasks are numbered from 1 to n.  Input is terminated by end of file.

 The input file consists of a single line with two numbers N and A separated by a space. N (3 <= N <= 1000) is an integer representing the number of lamps in the garland, A (10 <= A <= 1000) is a real number representing the height of the leftmost lamp above the ground in millimeters.

 The first line of the input contains one integer n (1 <= n <= 2000) being the number of submissions during the contest. Each of the next n lines describes one submission and contains a submission time (measured in seconds from the beginning of the contest), a team identifier, a problem identifier and a result of evaluating the submission separated by single spaces. The submission time is a positive integer not greater then 18000. The team identifier is a non-empty string consisting of at most five small letters or digits. The problem identifier is a capital letter A, B, ..., or I. The result is a capital letter A (the submission is accepted) or R (the submission is rejected).   Submissions are given in nondecreasing order according to submission times and there are 62 teams competing.   Please note that if a problem is accepted all further submission of this problem by the same team are possible but they should not be taken to the statistics.  

 The first line of the input contains two integers t and n separated by a single space. Integer t (1 <= t <= 1500) is the number of templates in the bundling profile. Integer n (1 <= n <= 100000) is the number of instructions to be bundled.   Each of the next t lines specifies one template and contains 3 capital letters t1,t2,t3 with no spaces in between followed by a space and an integer p. Letter ti (A < = ti<= J) is an instruction type allowed in the i-th slot. Integer p (0 <= p <= 2) is the index of the slot after which the stop is positioned (0 means no stop within the bundle).   Each of the next n lines specifies one instruction. The i-th line of these n lines contains one capital letter ci and an integer di, separated by a single space. Letter ci (A <= ci<=J) is the type of the i-th instruction. Integer di (0 < = di < i) is the index of the last instruction (among the previous ones) that the i-th instruction is dependent on (0 means that the instruction is not dependent on any former instruction).   You can assume that for each instruction type c describing an instruction in the instruction sequence there is at least one template containing c.  

 The first line of the input contains one integer n (3 <= n <= 250 000) being the number of sections of the route. The second line of the input contains a sequence of n characters N, E, S or W with no spaces in between. Each character is a description of one section of the route. Character N, E, S or W means that Mirek walks 10 meters north, east, south or west respectively. You may assume that at least one shortcut exists for the given route.  

 The first line of the input contains six integers l1, l2, l3, l4, l5, l6 (1 < = li < = 50) separated by single spaces. Integer li is the number written on a side having originally i dots. The second line of the input contains four integers x1, y1, x2, y2 ( -10 9 < = x1, x2 < = 10 9, 1 <= y1, y2 < = 4) separated by single spaces. Integers x1, y1 are the column and the row number of the starting square respectively. Integers x2, y2 are the column and the row number of the target square respectively. 

 The first line of the input contains one integer n (1 <= n < = 40000) being the number of segments of the roof. Each of the next n lines describes one segment of the roof and contains four integers x1, y1, x2, y2 (0 <= x1, y1, x2, y2 < = 1000000, x1 < x2, y1<>y2) separated by single spaces. Integers x1, y1 are respectively the horizontal position and the height of the left end of the segment. Integers x2, y2 are respectively the horizontal position and the height of the right end of the segment. The segments don't have common points and there are no horizontal segments. You can also assume that there are at most 25 segments placed above any point on the ground level.  

 The first line of the input contains one integer n being the number of vertices of the polygon. The second line of the input contains n integers a1, a2,..., an separated by single spaces. Integer ai (equal 1 or 2) is the number of green pieces adjoining the i-th vertex of the polygon. The side of the polygon connecting the n-th and the first vertex always lies between two hexagons. 

 The first and only line of the input contains one integer n (0 <= n < = 2 30) - the identifier of some binary tree 

 The first line of the input contains an integer n (1 <= n <= 16) being the number of instructions of the program. Each of the next n lines contains one instruction of the program in the format given above. You may assume that the only white characters in the program are single spaces between successive tokens of each instruction. 

 Input contains several testcases. For each testcase, the first line contains only one integer k (0 < k <= 100), representing the number of positive integers. Then there are k positive integers p1, p2 ... pi ... pk (1 < pi < 2 31, 1 <= i <= k) in the second line, representing the given numbers.  Input is terminated by end of file.

 The first line of the input contains two integers n and m (2 <= n <= 50000, 1 <= m <= 500000) separated by a single space. Integer n is the number of inputs and integer m is the number of sorters in the pipeline. The initial sequence of sorters is described in the next m lines. The k-th of these lines contains the parameters of the k-th sorter: two integers ik and jk (1 <= ik < jk <= n) separated by a single space. 

 There are several testcases in the input. Each begins with a line containing two integers N, M (0 < N, M <= 200), representing the number of the energy levels and the number of the different photons that this kind of atom can emit or absorb respectively. The two numbers are followed by exactly N + M lines, which contain one positive integer each. These N+M positive integers are not greater than 1,000,000. The first N distinguishing integers are the energy of the atom in the N different energy states in ascending order. The next M integers correspond to the energy of the M different photons, which can be emitted or absorbed by atoms of this element. If the difference in energy of any two states equals to the energy of one of the M photons, the atom can transit between these two states directly.  There is no blank line between two data sets. The last testcase is followed by a line containing two zeros.

 The input consists of several testcases. Each testcase is in a single line as the following:     n f1 f2 ... fn  It means, there are totally n floors at which the elevator need to stop, and n = 0 means no testcases any more. f1 f2 ... fn are the floors at which the elevator is to be stopped (n <= 30, 2 <= f1 < f2 ... fn <= 31). Every number is separated by a single space.

 The input contains several testcases. The first line of each testcase is an integer N (N <= 15),representing the size of the board. Then, four lines follow, representing the numbers in the 1st group, 2nd group â€¦ and so on.  The input is terminated by a single zero.

 The input consists of a sequence of testcases. Each begins with a routing table of an application proxy and then the incoming requests of the application proxy.  A routing table includes, in order, a line with an integer M (1 <= M <= 32,768), the number of lines in the routing table; M lines, each of which has a routing line. Each routing line contains a unique destination computer name (1 to 15 alphanumeric characters in the routing table), and then the outgoing port number (0 to 32,767 integer), separated by a space, and the computer names are case sensitive.  The incoming requests of the application proxy include several request sessions from the connected computers. A line starts with a number sign "#" and then an integer P (-1, 1 to 32,767),means the following input is from port P, P < 0 means the testcase finishes. The commands in request sessions will not be broken by the "#" lines. To simplify the input handling, data commands in our input file will just contain "0"-"9", "a"-"z", "A"-"Z", "@", "#", "_", "+", "-", "*","/" , "\", "?", ",", "." and < LF >.  The input is terminated by a single zero

 The input contains several test cases. Every test case starts with three integers N1, N2, D. You may assume that 1<=N1,N2<=50000 and 0<=D<=100000. The first DVD contains N1 packages, identified by the numbers 1, 2, ..., N1. The second DVD contains N2 packages, identified by the numbers N1+1, N1+2, ..., N1+N2. Then follow D dependence specifications, each consisting of two integers xi, yi. You may assume that 1<=xi,yi<=N1+N2 for 1<=i<=D. The dependence specification means that the installation of package xi requires the previous installation of package yi. You may assume that there are no circular dependences. The last test case is followed by three zeros. 

 The input contains several test cases, each on a separate line. Every test case denotes a proposition and may contain arbitrary amounts of spaces in between. The input file terminates immediately after the newline symbol following the last test case. 

 The input contains several test cases. Every test case is specified by an integer n. You may assume that 1<=n<=6. The last test case is followed by a zero. 

 The input contains several test cases. Each specifies a number n, denoting the number of persons participating in the game. To make things more difficult, it always has the format "xyez" with the following semantics: when n is written down in decimal notation, its first digit is x, its second digit is y, and then follow z zeros. Whereas 0<=x,y<=9, the number of zeros is 0<=z<=6. You may assume that n>0. The last test case is followed by the string 00e0. 

 The input consists of letters (both upper- and lower-case), digits, spaces, and punctuation. Every line is terminated with a newline character and no other characters appear in the input. 

 The input contains several test cases. Every test case starts with three integers m, N, k. You may assume that 1<=m<=40, 1<=N<=1000, and 1<=k<=100. Then follow k fractions f1, ..., fk. For each fraction, first its numerator is given, followed by its denominator. You may assume that both are positive integers less than 1000 and their greatest common divisor is 1. The last test case is followed by a zero. 

 The input contains several test cases. Every test case starts with an integer n. You may assume that 1<=n<=200. Then follow 2n+1 non-negative integers denoting frequencies. Let s be the sum of all frequencies. You may assume that 1<=s<=1000000. The probabilities p1,...,pn and q0,...,qn are calculated in this order by dividing the frequencies by s. The last test case is followed by a zero. 

 The input contains several test cases. Every test case starts with an integer n. You may assume that 1<=n<=50000. Then follow n pairs of strings and numbers l1/p1,...,ln/pn denoting the label and priority of each node. The strings are non-empty and composed of lower-case letters, and the numbers are non-negative integers. The last test case is followed by a zero. 

 The input consists of a series of deals. Each deal begins with a line containing a single letter representing the dealer ("N", "E", "S", "W") followed by two lines representing the deck, card by card, as shown below. The first card given in the input is the first one to be dealt. The file is be terminated by a line consisting of a single hash character ("#"). 

 Each line of the input contains five integer numbers separated by a single space describing one situation to solve. The first integer on the line P, 1 <= P <= 10 000, is the coffee price in cents. Next four integers, C1, C2, C3, C4, 0 <= Ci <= 10 000, are the numbers of cents, nickels (5 cents), dimes (10 cents), and quarters (25 cents) in Charlie's valet. The last line of the input contains five zeros and no output should be generated for it. 

 The input consists of several blocks. The first line of each block contains a single number P, 1 <= P <= 100 000. P is the number of posts which have been built. Each of the following P lines contains two integers X and Y, 0 <= X, Y <= 10 000, which represent coordinates of the posts in MFF internal units (which no one else is able to understand). No two posts have the same coordinates.   Each block is followed by a single empty line and the input is terminated by a line containing a single number 0.  

 The input file consists of several lines. Each line contains one code, i.e., the string consisting of decimal digits. The maximum length of any code is 35, the minimum length is 1. The last line of the input file contains a single hash character ("#"). 

 The input consists of several test cases. Each of them is specified by six positive integer numbers, A,B,C,D,E,F, on one line separated by a space. The numbers are:  A and B are the size of a rectangular grid, 1 <= A,B <= 1 000,  C and D are the dimensions of a card in cms, 1 <= C,D <= 1 000, and  E and F are the dimensions of a paper sheet in cms, 1 <= E,F <= 1 000 000.  The input is terminated by a line containing six zeros. 

 The input consists of a series of tasks, each of them given on one separate line. The line contains two integer numbers X and Y, separated by a space, 1 <= X, Y <= 1 000 000, X != Y. These numbers identify two different cells. The last task is followed by a line containing two zeros. This line terminates the input. 

 The first line of the input contains the number of test cases to solve. Each test case starts with the line containing three integer numbers, B, G, N, 1 <= B <= 1 000, 1 <= G <= 1 000 000, 1 <= N <= 1 000 000, separated by a single space. B is the number of bays in the storehouse, G the number of types of goods stored in the storehouse and N the number of trucks coming to the storehouse. The test case continues by N lines. On the i-th line, there is a number ti, 1 <= ti <= G, specifying the type of goods the i-th truck wants to load. 

 The first line contains the number of scenarios.  In each scenario, you are first given a line with two integers n and m, the number of blue and red peasants, respectively (1 <= n,m <= 30 000).  The next n lines describe the blue peasants followed by m more lines for the red peasants. Each line consists of two integer i and j separated by a space, indicating the peasant's position i and the position j he threw his grappling hook to (1 <= i, j <= n + m).

 The first line contains the number of scenarios.  For each scenario, the first line contains the number n of strings with 1 <= n <= 15. Then these strings with 1 <= length <= 100 follow, one on each line, and they consist of the letters "A", "C", "G", and "T" only.

 The first line contains the number of fractions. For each fraction you are first given the base b as a decimal number with 2 <= b <= 36, and then the numerator x and the denominator y of the fraction to that base separated by single blanks. It is guaranteed that the denominator satisfies 0 < y <= 100 000 10. Digits not in the range of 0 . . . 9 are represented by letters starting from "a" or "A" in the usual way, where case does not matter.

 The first line contains the number of scenarios (city plans). For each city the number n of street crossings (1 <= n <= 1000) and number m of streets are given on the first line. The following m lines contain triples of integers specifying start and end crossing of the street and the maximum allowed weight, which is positive and not larger than 1000000. There will be at most one street between each pair of crossings.

 The first line contains the number of scenarios. For each scenario follows a line containing a real number R and an integer n, with 1 <= R <= 100 and 2 <= n <= 100.

 The first line contains the number of scenarios.  For each scenario, the first line contains width w and height h of the racing track (1 <= w, h <= 1000).The following h lines contain the layout of the racing track where road, non-road-space, start/goal line, and wall are represented by "x", ".", "s", and "W", respectively. The upper left corner of the racing area is (0, 0), the lower right corner (w-1, h-1), where coordinates are given as pairs (x, y) where x-direction is horizontal and y-direction is vertical.  A line containing the number n of cars to simulate follows the track description. For every car there are two lines:    a line containing the initial x- and y-coordinate x and y, direction d, and maximum speed m of the car, as integers separated by single blanks, where 0 <= x <= w-1, 0 <= y <= h-1, 0 <= d <= 7, 1 <= m  a line containing a string whose single characters each encode one command for this car, where "m","a", "b", "l", and "r" represent move-on, accelerate, brake, left, and right, respectively; the number of commands for a car is at least 1 and at most 10000.  It is guaranteed that the initial car position is not on a wall. It is also guaranteed that the car does not leave the track area without crashing.

 The first line of the input contains the number of scenarios, i.e. the number of plates which have to be deciphered.  For each such plate, you are first given the number l (0 <= l <= 1000) of lines of text on the plate to be deciphered in a single line. In the following l lines, this text is given, with no line exceeding 1000 characters. After that, there is a line containing the number r (0 <= r <= 1000) of rules which have to be applied. The subsequent r lines contain these rules, in the format described above.  The words of the text are considered to be sequences of arbitrary characters (not just letters!), separated by single blanks. No line of the given text will start or end with a blank, but it might be empty altogether.

 The first line contains the number of scenarios.  For each scenario you are given a line containing x1 y1 z1 x2 y2 z2, defining the two corners (x1, y1, z1), (x2, y2, z2) of the initial axis aligned box b. All numbers are separated by single blanks.  The following line contains the numberm(m <= 2000) of boxes in S whose colour was changed by the laser device, followed bymlines each containing x1 y1 z1 x2 y2 z2, defining the two corners (x1, y1, z1),(x2, y2, z2) of one of the axis aligned boxes in S. All numbers are separated by single blanks.  All coordinates are in the range from 0 to 1000, and the coordinates in each line satisfy x1 <= x2, y1 <= y2 and z1 <= z2.

 The first line contains the number of scenarios.  For every scenario, you are given a line containing first the length N (1 <= N <= 1000) of the sequence,followed by the N elements of the sequence (each element is an integer in [-1000000, 1000000]). All numbers in this line are separated by single blanks.

 The first line contains the number of scenarios (Wednesday meetings).  For each scenario, there is one line containing the names of the present friends. Names are separated by single blanks and consist of letters only. The same name will not occur more than once on the same line.

 The first line of the input contains the number of scenarios. For each scenario, there is a line containing the units of remaining petrol, i.e an integer u satisfying 0 <= u <= 9. If more than 9 units of petrol remain, the customer will ignore the display anyway.

 The first line contains the number of scenarios.  For each scenario, there is one line containing either a Mayan longcount or a Gregorian date in the following formats:    A Mayan longcount consists of 5 non-negative integers separated by dots.  A Gregorian date consists first of three integers d, m, and y, separated by slashes, and satisfying 1 <= d <= 31, 1 <= m <= 12, and 0 < y. The values may or may not be zero padded, but will never exceed two characters for d and m, and four for y. This representation is always followed by a single blank and either "BC" or "AD".  We will neither ask for dates preceding August 13th 3114 BC, nor for dates after 13.0.0.0.0 which is the last day in the Mayan longcount calendar. Also, you will never be given invalid dates in either calendar.

 The first line contains the number of scenarios.  For each scenario, there is one line containing the integers a and p separated by a single blank, where 2 < p < 10 9 is an odd prime, and a satisfies both a !â‰¡ 0 (mod p) and |a| <= 10 9.

 The first line contains the number of scenarios. For each scenario, there is one line containing first the number N of distinct points in that scenario (0 <= N <= 10000) and after that N pairs of integers, each pair describing one point (xi, yi) with -100000 <= xi, yi <= 100000. All these numbers are separated by single blanks.

 The first line contains the number of test cases T (1 <= T <= 20). Then follow T test cases. For each test case, the total number of points K (0 < K <=10000), N (0 < N <= 1000), M (0 < M <= 100, M <= N) are given in the first line; and the following K lines give the x-coordinate and y-coordinate of the K potential mines. (Notice that the coordinates will be floats)

 The first line contains the number of test cases T (1 <= T <= 20 ), then the following T lines each contains an integer number N (2 <= N < 2 54).

 The first line of the input contains an integer n ( n <= 30 ), which represents the number of test case. Then n cases follow. Each case contains three lines: there are two integer m (1 <= m <=20 ) and k ( 1 <= k <= 5 ) in the first line, and m is the number of balls on the table while k is the number of balls in player's hand; the second line contains m capital letters (there is no space between letters), which represent the color and order of the balls on the table; the third line contains k capital letters, which represent the color of the balls in player's hand.

 The first line of input is the number of test cases. For each test case, there are two lines describing two shapes. A line of "R x1 y1 x2 y2" represents a rectangle with top-left corner at (x1, y1) and bottom-right corner at (x2, y2). A line of "C x y r" represents a circle with center at (x, y) and radius r.   You can assume that all the numbers mentioned above are integers between 0 and 10.  

 The first line of the input contains a single integer T (1 <= T <= 20), the number of test cases. Then T cases follow. Every case gives a polynomial in a single line. 

 The first line of the input contains three integers N (2<=N<=200), S and T ( 1 <= S, T <= N , and S is not equal to T).Each of the following N lines contains N integers. If i knows j's number, then the j-th number in the (i+1)-th line will be 1, otherwise the number will be 0.   You can assume that the number of 1s will not exceed 5000 in the input.  

 The first line of input contains two integers N (0 < N <= 100000) and M (0 < M <=100), representing the number of word patterns and the number of words. Each of the following N lines contains a word pattern, assuming all the patterns are numbered from 0 to N-1. After those, each of the last M lines contains a word.   You can assume that the length of patterns will not exceed 6, and the length of words will not exceed 20.  

 The input file will consist of one or more input scenarios. Each scenario begins with a single integer n, 1 <= n <= 10, giving the number of vehicles in the scenario. Then there will be 6 lines of input, each containing 6 characters. Each character is either a dot (".") representing an empty square, or a lowercase letter representing a vehicle. Your own vehicle is always oriented horizontally and represented by "x" characters. The other vehicles use the letters sequentially, beginning with "a".   The last scenario will be followed by a line containing a single zero.  

 The input contains n and k separated by one space.

 The input has the following structure:    the first line contains N ( N <= 1000), the number of disks;  the next N lines contain N real numbers representing the radii of the disks, in the order they are fixed in the configuration.  

 The input contains a succession of expression definitions (each definition on a new line), terminated (on a separate line) with the tag EOD, after which follows a succession of interrogations (one interrogation per line), ended (on a separate line) with the tag EOE.   Constrains and specifications:   The number of definitions is smaller than 30  The number of interrogations is smaller than 30  The number of symbols from a list, different from spaces and brackets, is smaller than 50.  The sign = from a definition, respective the sign ? from an interrogation are bordered by one space.  The name of an expression is at most 8 characters long.  The natural numbers are smaller or equal than 30000  The name of a symbolic expression may appear in the definition of that expression.  In the input file there is a single definition for each symbolic expression.  The order of the definitions in the input file does not matter.  The names of the symbolic expressions are not case sensitive. 

 The input contains:   Input  N K  L1 P1 S1  L2 P2 S2  ...  LK PK SK    Semnification  N -the number of the planks; K ? the number of the workers  Li -the maximal number of planks that can be painted by worker i  Pi -the sum received by worker i for a painted plank  Si -the plank in front of which sits the worker i  

 In the first line of the input there are two integers: N and K (1 <= K <= N <= 50), representing the total number of workers and the maximal number of workers that can work in the same shift. 

 On the first line of input, there will be the numbers N (3 <= N <= 16 000) representing the number of the rooms and P (3 <= P <= 200 000) representing the number of the instructions.   The next P lines will contain the number c representing the type of the instruction:    if c is 1 then it will be followed (on the same line) by 2 other numbers, i and M, representing the number of the first room distributed to the group and the number of the members  if c is 2 then it will be followed (on the same line) by 2 other numbers, i and M, representing the number of the first room that will be released and the number of the members of the group that is leaving  if c is 3 then it will not be followed by any number on that line, but the program should output in the output file the maximal length of a sequence of free and consecutive rooms  

 On the first line of the input are two integers: N (3 <= N <= 30) and S (1 <= S <= 1000), representing the number of piles used in the game and the number of initial configurations of game, described in the following lines. Each of the next S lines contains N integer values from the interval [0, 4] which sum is 2*N, representing an initial configuration of the game.

 The input has the stucture:   on the first line is: the natural number m (1 <= m <= 20);  on the second line are: the numbers n1, n2, ..., nm separated by a space (n1 <= 12). 

 The input consists of several test cases. In the first line of each test case, there are one positive integers N (1<=N<=200000), indicating the number of available squares. The following N lines contain the information of the N squares, one per line. In one line, there are three integers x y v separated by one blank. (x, y) is the location of this square, and v is its value. All the x and y lie in the range of signed 16-bit integer. The value v is a nonnegative integer that is less than 10000. The test case starting with one zero is the final test case and has no output.

 The input consists of several test cases. In the first line of each test case, there are two positive integers N and M (1<=N<=50000, 1<=M<=50000), indicating the number of monsters and the range of numbers the monsters possibly get on the cards. Then there are N integers d[i] (1<=d[i]<=M) in the following lines, which are the numbers those monsters got. And in the rest lines of one test case, there are other N positive integers s[i] (1<=s[i]<=20000), indicating the strength of each monsters. The test case starting with 2 zeros is the final test case and has no output.

 The input consists of several test cases. In the first line of each test case, there are one positive integers N (1<=N<=50000), indicating the number of monkeys in the mountain. Then there are N pairs of integers in the following N lines indicating the locations of N monkeys, one pair per line. Two integers are separated by one blank. In a point (x, y), the values of x and y both lie in the range of signed 32-bit integer. The test case starting with one zero is the final test case and has no output.

 The only line contains in the first line a positive integer S (0< S <= 100000) which represents the sum to be obtained.

 第一行为测试数据的个数。  接下来每个测试点的第一行是两个正整数n,m( 1 <= n <= 1024 , 1 <= m <= 160) ，接下来的m行每行有一个正整数Ci。  

 输入第一行有一个数K，表示以下有K组测试数据。  每组测试数据的格式如下：  第一行 一个数N（0 < N < 29）  第二行 N个0或者1的数，表示开始时N个开关状态。  第三行 N个0或者1的数，表示操作结束后N个开关的状态。  接下来 每行两个数I J，表示如果操作第 I 个开关，第J个开关的状态也会变化。每组数据以 0 0 结束。  

 第一行是一个正整数m，表示测试数据的组数，每组测试数据只有一行，一个正整数s( 1<=s<65536)。

 第一行是一个正整数m，表示有m组测试数据。   每组测试数据一共3行，第一行是一个正整数n (0 < n < 128)，后两行每一行描述一种状态，n个数（0或1），用空格隔开。  

 第一行是一个正整数m，表示测试数据的个数，下面是m组测试数据，每组测试数据第一行是2个正整数n( 1 <= n < 1024 )和k(1<=k<=64)，第二行有n个正整数，是1，2 … n的一个排列。

 第一行是一个正整数num,表示测试数据的组数，下面是num组测试数据。  每组测试数据的第一行是两个正整数n1, n2表示第一类和第二类线段的个数（2<=n1<=16,0<=n2<32768），下面有n2行，每行描述一条第二类线段，有四个正整数k1 p1 k2 p2，k1和k2分别表示此线段的起点和终点所在的第一类线段的编号，p1和p2分别表示此线段起点和终点的y坐标（0<=p1，p1 < 32768 ）。  

 第一行一个正整数m，表示测试数据的组数。每组测试数据第一行是一个正整数n(1<=n<=10000)表示宇航员行走的次数，下面n行每行输入一次相对行走，格式如上所述，其中( 1 <= x <= 10000 为正整数)。

 On the first line of the input is written the number of the soldiers n. On the second line is written a series of n floating numbers with at most 5 digits precision and separated by a space character. The k-th number from this line represents the height of the soldier who has the code k (1 <= k <= n).   There are some restrictions:  • 2 <= n <= 1000  • the height are floating numbers from the interval [0.5, 2.5]  

 The input has the following structure:  • the first line contains the number C (2 <= C <= 20) and the number G (2 <= G <= 20);  • the next line contains C integer numbers (these numbers are also distinct and sorted in ascending order) in the range -15..15 representing the repartition of the hooks; each number represents the position relative to the center of the balance on the X axis (when no weights are attached the device is balanced and lined up to the X axis; the absolute value of the distances represents the distance between the hook and the balance center and the sign of the numbers determines the arm of the balance to which the hook is attached: '-' for the left arm and '+' for the right arm);  • on the next line there are G natural, distinct and sorted in ascending order numbers in the range 1..25 representing the weights' values.  

 The only line contains the two natural numbers A and B, (0 <= A,B <= 50000000)separated by blanks.

 The input has the following structure:  Nr K  x(1) y(1)  y(2) y(2)  ...  x(Nr) y(Nr)  Nr is the number of banana trees. K is the number of zones which can be connected. x(i) is the row of the i-th banana tree, while y(i) is the column of the i-th banana tree.  There are Constraints:  • 1 <= Nr <= 16000;  • 1 <= x(i), y(i) <= 10000;  • In the tests used for grading k will never be bigger than the number of regions;  • Two positions are horizontally neighbours if they are on the same row and consecutive columns, respectively vertically neighbours if they are on the same column and on consecutive rows.  

 The first line of the input contains three integers N, K, M; 1 <= N,K <= 1000, 1 <= M <= 20. The second line contains integer D â€“ the number of clashing pairs among the animals.   Each of the following D lines contains three mutually different integers A, B, C. The pair (A, B) represents a clashing pair, and the pair (C, B) represents a friendly pair of animals. The second animal in each pair is always the weaker one.   A stronger animal of a clashing pair cannot be a weaker animal in any other pair (the first number A cannot occur as a second number anywhere). A weaker animal of a clashing pair has exactly one friendly protecting animal (the third number C is uniquely determined by the first two numbers A and B).  

 The only line of input contains the 5 coefficients a1, a2, a3, a4, a5, separated by blanks.

 The first line of the input consists of two natural numbers F and B; 1 <= F <= 2000, 1 <= B <= F, F is the number of flowers in the meadow and B is the number of bees available for collecting pollen.   Each of the next C lines contains two natural numbers X and Y, 1 <= X,Y <= 10000, the coordinates of a flower.  

 The first line of the input contains three integers N, P and K (2 <= N <= 5000, 2 <= P <= N, 0 <= K <= N-2). Number K denotes the total number of cars parked in the garage excluding Ralph's car, which is parked in the parking place #P. Each of the following N lines contains data about parking places. The line (i+1) contains data about parking places directly connected to the parking place #i located one floor beneath it:  T A1 A2 ... AT  There are T such parking places and A1, A2, ..., AT are their numbers. The last line of the input file contains K integers denoting occupied parking places, not counting Ralph's.  

 From the input, you will read the integer value n(3 <= n <= 100), representing the number of cities of the county.

 The first line of the input contains integers N, A and B, separated by a single blank character, 2 <= N <= 100, 1 <= A, B <= N, N is the number of intersections in the network, and intersections are numbered from 1 to N.   Each of the following N lines contain a sequence of integers separated by a single blank character. First number in the i-th line, Ki (0 <= Ki <= N-1), represents the number of rails going out of the i-th intersection. Next Ki numbers represents the intersections directly connected to the i-th intersection.Switch in the i-th intersection is initially pointing in the direction of the first intersection listed.  

 The input has the following structure:  N  x(1) y(1)  x(2) y(2)  ...  x(N-1) y(n-1)  N (3 <= N <=100) is the number of vertices. x(i) and y(i) (x(i), y(i) are integers, 1 <= x(i), y(i) <= N) represent the two vertices connected by the i-th edge.  

 The first line of the input contains two integers: N and S, 1 <= N <= 100000, 1 <= S <= N. N is the total number of intersections; S is ordinal number of the snow plovers starting intersection. Intersections are marked with numbers 1...N.   Each of the next N-1 lines contains three integers: A, B and C, meaning that intersections A and B are directly connected by a street and that street's length is C meters, 1 <= C <= 1000.  

 The only line contains a word. There are some constraints:  • The word is maximum 10 letters length  • The English alphabet has 26 characters.  

 Input will consist of a number of test cases, followed by a line containing -1. Each test case consists of a single line containing five real numbers: r, x, y, X, Y. r is the radius of the island; x,y are the coordinates of the landing place; X,Y are the coordinates of the spot marked X. The landing place and the spot marked X are distinct. 

 The first line of input contains one integer giving the number of cases that follow. The data for each case start with two integer numbers: the length of the pole (in cm) and n, the number of ants residing on the pole. These two numbers are followed by n integers giving the position of each ant on the pole as the distance measured from the left end of the pole, in no particular order. All input integers are not bigger than 1000000 and they are separated by whitespace. 

 Input contains several test cases. Each test case begins with 1 < n <= 100; the number of rocks to be added as ballast. Consider the rocks to be numbered 1 through n. n lines follow; the ith line gives the weight in kg of the ith rock - a positive real number not greater than 100. A line containing 0 follows the last test case. 

 The first line of input gives n, the number of test cases. For each test case, one line of input follows, containing a string of up to 8000 lowercase letters.

 Input consists of several test cases. Each case begins with two integers: 4 <= n <= 50 giving the number of types of coins available, and 1 <= t <= 10 giving the number of tables to be designed. n lines follow; each gives the thickness of a coin in hundredths of millimetres. t lines follow; each gives the height of a table to be designed (also in hundredths of millimetres). A line containing 0 0 follows the last test case. 

 The input consists of more scenarios. The description of each scenario begins with two integer numbers R and C separated with a single space, 1 <= R,C <= 1000. These numbers give the number of rows and columns in the game field.   After these two numbers, there are R lines, each of them containing C characters. Each character is either hash ("#") or dot ("."). Hashes denote ships, dots water.   Then, the next scenario description begins. At the end of the input, there will be a line containing two zeros instead of the field size.  

 The input consists of several test cases. The first line of each test case contains three positive integers (separated by blanks): the first one represents the maximum load that the bridge can sustain b (in tonnes); the second one represents the length of the bridge l (in kms); and the third one is the number of vehicles (n) in the convoy.   Each of the next n lines of input contains a pair of positive integers, wi and si (separated by blanks), where wi is the weight of the vehicle (in tonnes) and si is the maximum speed (in kmph) with which this vehicle can travel over the bridge. The weights and speeds of the vehicles are specified in the same order as the order in which the vehicles are queued up. You can assume that 1 <= n,b,l,s <= 1000 and any i in [1..n]: wi <= b.   After the last vehicle, the next test case description begins. The last test case is followed by a line containing three zeros. 

 The input consists of several game descriptions. The first line of each description contains four integer numbers R1, C1, R2, and C2separated with a space, 1 <= R1, C1, R2, C2 <= 7. (R1,C1) is the position (row and column) of the game piece, (R2,C2) is the position of the target. Note that these positions can sometimes be shifted during the move, as specified above. After these numbers, there is one blank line.   The next three lines describe the first row of the game field. Each of these lines contains 27 characters: three for the card in the first column, one space, three characters for the card in the second column, etc. Thus, every card is represented by a square of nine (3 * 3) characters. The middle one of these nine characters is always capital letter "O". The four characters in the corners are always dots ("."). The both left and right characters are either a dot (".") or a dash ("-"). Dashes mean the path pattern leading to the left or right edge. The top and bottom characters are either a dot or a pipe ("|"). The pipe means the path pattern leading to the corresponding edge.   After the first row, there is one blank line and three other lines describing the second row. Then follow one other blank line and three lines for the third row, etc. After the seventh row, there is a blank line and three other lines containing exactly three characters each. This is the description of the extra card, given in the same way as the cards in the field.   The input is terminated by a line containing four zeros instead of piece and target coordinates.  

 The input consists of several assignments. Each assignment begins with a line containing a single integer number N, 1 <= N <= 20000. It is followed by N lines, each containing two integer numbers Xi and Yi separated with a space, -10 5 <= |Xi,Yi| <= 10 5. These are the Cartesian coordinates of the i-th point in the set.   Since no two bodyguards occupy the same place, no point will appear twice in the same assignment. However, note that a bodyguard can be in the same place as the V.I.P.   After the last assignment, there is a line containing zero instead of the number of points. This line should not be processed.  

 The first line of the input contains four numbers: N - the number of currencies, M - the number of exchange points, S - the number of currency Nick has and V - the quantity of currency units he has. The following M lines contain 6 numbers each - the description of the corresponding exchange point - in specified above order. Numbers are separated by one or more spaces. 1<=S<=N<=100, 1<=M<=100, V is real number, 0<=V<=10 3.  For each point exchange rates and commissions are real, given with at most two digits after the decimal point, 10 -2<=rate<=10 2, 0<=commission<=10 2.  Let us call some sequence of the exchange operations simple if no exchange point is used more than once in this sequence. You may assume that ratio of the numeric values of the sums at the end and at the beginning of any simple sequence of the exchange operations will be less than 10 4.  

 The first line of the input contains two integer numbers: N - the number of hubs in the network (2 <= N <= 1000) and M - the number of possible hub connections (1 <= M <= 15000). All hubs are numbered from 1 to N. The following M lines contain information about possible connections - the numbers of two hubs, which can be connected and the cable length required to connect them. Length is a positive integer number that does not exceed 10 6. There will be no more than one way to connect two hubs. A hub cannot be connected to itself. There will always be at least one way to connect all hubs. 

 The first line of the input contains one integer N (1 <= N <= 100) - the number of stripies in a colony. Each of next N lines contains one integer ranging from 1 to 10000 - the weight of the corresponding stripie.

 The first line of the input file contains A - the given sequence of digits. The number of digits in A does not exceed 200. There are no spaces in the input file.

 The first line of the input file contains cards of the first player separated by spaces. The second line contains the last laid face up card.  The card description consists of two characters. The first of them corresponds to the card value (2-9 for digits, T for 10, J for Jack, Q for Queen, K for King and A for Ace). The next describes the suit of the card and may be one of the following: S for Spades, C for Clubs, D for Diamonds or H for Hearts. Joker is represented by a character '*'. If the last laid card is Queen, it is followed by a suit letter. If the last laid card is a joker, then the '*' is followed by an actual card description (the card specified by the player who laid the Joker).  

 The input contains several test cases followed by a line contatining 0. Each test case begins with 1 < k <= 100, the number of observations that follow. Each observation consists of integers 0 <= n <= 100 and 0 <= w <= 1. The input will contain at least two distinct values of n and of w.

 The first line of input contains n, the number of test cases. Each test case consists of two lines of input; each a pattern. Patterns consist of lowercase words, and placeholders containing lowercase words. No pattern exceeds 100 characters. Words contain at most 16 characters. A single space separates adjacent words and placeholders. 

 The first line of input contains t, the number of test cases. Each test case consists of two lines, each specifying a tree in the notation described above. Each line will contain at most 200 characters, and no white space.

 There are several test cases, followed by a line containing 0. Each test case is a line of the input file containing a natural number 3 <= n <= 10000 followed by a colon and then followed by n distinct numbers separated by whitespace. All n numbers are natural numbers smaller than n. 

 The input contains several test cases followed by a line containing 0. Each case begins with n, the number of questions in the test. n lines follow, each containing the names of five distinct activities, followed by the candidate's answer - one of the five alternatives. Each activity is named by a single upper case letter. 

 The input consists of several lines, each containing two integers a and b (a,b <= 10000), denoting numbers of cells. The integers are always positive, except in the last line where a=b=0 holds. This last line terminates the input and should not be processed. 

 The input data set consists of several trials. Each trial is described by eight integers. The first integer is n (n <= 50), as described above. The second integer is d (d <= 100). The remaining six integers-x1, y1, z1, x2, y2, z2-represent the origin and a point on the path of the bullet (-100 <= x1, y1, z1, x2, y2, z2 <= 100). The origin and the point on the path of the bullet are not the same. After the last trial, the integer 0 terminates the data set. 

 The input file begins with a line containing a string of no more than 20 non-blank characters that names the first maze. The next line contains six integers delimited by single spaces. These integers are, in order, the number of rows in the maze (an integer from 1 to 10, call this value R), the number of columns in the maze (an integer from 1 to 10, call this value C), the starting row, the starting column, the number that should be on top of the die at the starting position, and finally the number that should be facing you on the die at the starting position. The next R lines contain C integers each, again delimited by single spaces. This R * C array of integers defines the maze. A value of zero indicates an empty location in the maze (such as the two empty squares in the center column of the maze in Figure 3), and a value of -1 indicates a wild square. This input sequence is repeated for each maze in the input. An input line containing only the word "END" (without the quotes) as the name of the maze marks the end of the input. 

 The input contains several test cases, each of which describes a hypothetical forest. Each test case begins with a line containing a single integer n, 2 <= n <= 15, the number of trees in the forest. The trees are identified by consecutive integers 1 to n. Each of the subsequent n lines contains 4 integers xi, yi, vi, li that describe a single tree. (xi, yi) is the position of the tree in the plane, vi is its value, and li is the length of fence that can be built using the wood of the tree. vi and li are between 0 and 10,000.  The input ends with an empty test case (n = 0).  

 The input describes several test cases. The first line of input for each test case contains a single integer w, the number of workyards in the test case (1 <= w <= 50).  This is followed by w lines, each describing a pile of pruls. The first number in each line is the number b of boxes in the pile (0 <= b <= 20). Following it are b positive integers, indicating the prices (in florins) of the pruls in the stack, given from top to bottom.   The input is terminated by a description starting with w = 0. This description should not be processed.  

 The input consists of three integer numbers N , S P, and S Q separated by spaces (1 <= N <= 2 20, 1 <= S P <= 2 10, 1 <= SQ <= 2 10). 

 The input data will contain multiple test cases. Each test case includes, in order, the number of links, N, their lengths, len1, ..., len N, and the proposed angles to which the servos (starting with servo1) are to be set. The lengths and servo angles are real numbers, and the number of links is an integer. There will be no more than 10 links in any robot arm. The last test case is followed by a negative integer. 

 The input contains descriptions of MTAs followed by an arbitrary number of messages. Each MTA description begins with the MTA designation and its name (1 to 15 alphanumeric characters). Following the MTA name is the number of users that receive mail at that MTA and a list of the users (1 to 15 alphanumeric characters each). The MTA description is terminated by an asterisk in column 1. Each message begins with the sending user's name and is followed by a list of recipient identifiers. Each identifier has the form user@mtaname. The message (each line containing no more than 72 characters) begins and terminates with an asterisk in column 1. A line with an asterisk in column 1 instead of a sender and recipient list indicates the end of the entire input. 

 The input consists of a sequence of region descriptions. Each begins with a pair of integers, m and n, each less than 30, giving the dimensions of the rectangular region in 10-meter units. Immediately following are m lines of n integers giving the elevations of the squares in row-major order. Elevations are given in meters, with positive and negative numbers representing elevations above and below sea level, respectively. The final value in each region description is an integer that indicates the number of cubic meters of water that will collect in the region. A pair of zeroes follows the description of the last region. 

 The input contains data for several maps in the following form:    The first line contains two integers, separated by one or more spaces. The first integer n represents the number of streets, and the second integer m represents the number of avenues, 1<= n <=20, 1<= m <=20.  The next n lines contain the altitudes of grid points. Each line represents a street and contains a sequence of m integers separated by one or more spaces. These integers represent the altitude in meters of the grid points along that street. Even if a particular street and avenue have no intersection, the altitude is still given for that grid point.  One or more lines follow that define the one-way roads. Each road is represented by two pairs of integers, separated by one or more spaces, in the form:   street avenue street avenue  The first street and avenue define the starting point of the road and the second pair define the ending point. Since Greenhills is a strict grid, if the two points are not adjacent in the grid, the road passes through all the intervening grid points. For example,   5 7 5 8 5 8 5 9 5 9 5 10   represents roads 5-7 to 5-8, 5-8 to 5-9, and 5-9 to 5-10. Road definitions are terminated by a line containing four zeroes in the above format.  Finally, one or more lines will follow that contain pairs of grid points between which Jill wants to find an optimal path, in the form:   street avenue street avenue  As before, the integer pairs are separated by one or more spaces. The end of the input set is defined by a line containing four zeroes, formatted as before.   You may assume that all street and avenue numbers are within the bounds defined by the first line of input, and that all road definitions are strictly north-south or east-west.   

 The input defines a succession of ball clocks. Each clock operates as described above. The clocks differ only in the number of balls present in the queue at one o'clock when all the clocks start. This number is given for each clock, one per line and does not include the fixed ball on the hours indicator. Valid numbers are in the range 27 to 127. A zero signifies the end of input. 

 The first line of the input contains N -- the number of bones (1 <= N <= 24). Next N lines contain bones descriptions: each line contains a non-empty sequence of di#erent capital letters, representing labels marking the joints of the corresponding bone. 

 The input will contain one or more data sets, one per line. Each data set consists of an integer value for R (between 2 and 10), an integer value for N (between 2 and 26), and the integer frequencies f1 through fN, each of which is between 1 and 999. The end of data for the entire input is the number 0 for R; it is not considered to be a separate data set. 

 Your solution must accept multiple input data sets. Each data set represents a different race course to be evaluated for a single sailboat. The data set begins with a line with 4 numbers: wind direction (real), wind speed (real), tack penalty (real), and number of marks n (integer). The next line contains six real numbers: point angle, point speed ratio, reach angle, reach speed ratio, downwind angle, downwind speed ratio.  The subsequent n lines of the data set represent the n race marks in the order in which they must be reached. Each line begins with a 2-character mark id followed by the x-coordinate then y-coordinate of the mark.   The end of input is denoted by a line of four 0's.  

 The first line of each data set contains the integer S, representing the maximum of stamps that an envelope can accommodate. The second line contains the integer N, representing the number of sets of stamp denominations in the data set. Each of the next N lines contains a set of stamp denominations. The first integer on each line is the number of denominations in the set, followed by a list of stamp denominations, in order from smallest to largest, with each denomination separated from the others by one or more spaces. There will be at most S denominations on each of the N lines. The maximum value of S is 10, the largest stamp denomination is 100, the maximum value of N is 10.  The input is terminated by a data set beginning with zero (S is zero).  

 Input will consist of a series of labyrinths. Each labyrinth will contain a series of cavern descriptors, one per line. Each line will contain a cavern identifier (a single upper case character) followed by a colon (:) and a list of caverns reachable from it (in counterclockwise order). No cavern will be connected to itself. The cavern descriptors will not be ordered in any way. The description of a labyrinth will be terminated by a line starting with a @ character, followed by two pairs of cavern identifiers. The first pair indicates the passage in which Theseus starts, and the second in which the Minotaur starts. The travel in a starting passage is toward the cavern whose identifier is the second character in the pair. Theseus and Minotaur will never start in the same corridor. The file will be terminated by a line consisting of a single #.    A final encounter is possible for each input data set.  

 All input values are real numbers. Data for each scenario are in the following format.      d1 d2 ... dn 0.0      For a single route, the list of distances (in miles--there are 5,280 feet in a mile) from each station to the metro center hub,separated by one or more spaces. Stations are listed in ascending order, starting with the station closest to the metro center hub (station 1) and continuing to the outermost station. All distances are greater than zero. The list is terminated by the sentinel value 0.0.     v      The maximum train velocity, in feet/minute.     s      The constant train acceleration rate in feet/minuteÂ².     m      The number of minutes a train stays in a station.      The series of runs is terminated by a data set which begins with the number -1.0. 

 There will be no more than 10000 different words in the input. The end of the input is signified by the number 0 on a line by itself. The terminating 0 merely indicates the end of the input and should not be part of the output produced by your program. 

 The input data for any test consists of a sequence of one or more non-negative integers, all of which are less than or equal to 32,767, representing the heights of the incoming missiles (the test pattern). The last number in each sequence is -1, which signifies the end of data for that particular test and is not considered to represent a missile height. The end of data for the entire input is the number -1 as the first value in a test; it is not considered to be a separate test.

 Each puzzle solution in the input starts with a line containing two integers r and c (1 <= r <= 10 and 1 <= c <= 10), where r (the first number) is the number of rows in the puzzle and c (the second number) is the number of columns. The r rows of input which follow each contain c characters (excluding the end-of-line) which describe the solution. Each of those c characters is an alphabetic character which is part of a word or the character "*", which indicates a black square. The end of input is indicated by a line consisting of the single number 0. 

 There are multiple data sets. Each set is divided into two parts. The first one describes the packages which are listed in the catalogue. The second part describes individual customer requests. The 4 sizes of light bulbs are identified in the input file by the characters ``a", ``b", ``c", and ``d".  The input is divided into two parts. The first one describes the packages which are listed in the catalogue. The second part describes individual customer requests. The 4 sizes of light bulbs are identified in the input file by the characters "a", "b", "c", and "d".  The first part of the each data set begins with an integer n (1<= n <=50) indicating the number of packages described in the catalogue. Each of the n lines that follows is a single package description. A package description begins with a catalogue number (a positive integer) followed by a price (a real number), and then the sizes and corresponding numbers of the light bulbs in the package. Between 1 and 4 different sizes of light bulbs will be listed in each description. The listing format for these size-number pairs is a blank, a character ("a", "b", "c", or "d") representing a size, another blank, and then an integer representing the number of light bulbs of that size in the package. These size-number pairs will not appear in any particular order, and there will be no duplicate sizes listed in any package. The following line describes a package with catalogue number 210 and price $76.95 which contains 3 size "a" bulbs, 1 size "c" bulb, and 4 size "d" bulbs.           210 76.95 a 3 c 1 d 4 The second part of the input file begins with a line containing a single positive integer m representing the number of customer requests. Each of the remaining m lines is a customer request. A listing of sizes and corresponding numbers of light bulbs constitutes a request. Each list contains only the size-number pairs, formatted the same way that the size-number pairs are formatted in the catalogue descriptions. Unlike the catalogue descriptions, however, a customer request may contain duplicate sizes. The following line represents a customer request for 1 size "a" bulb, 2 size "b" bulbs, 2 size "c" bulbs, and 5 size "d" bulbs.   a 1 d 5 b 1 c 2 b 1 

 Your program consumes a file of cloning requests, one per line. Here is the format of a cloning request:   < request > = clone_< name >_from_< name >< genelist >  < genelist > = NULL | _mutating_< gene >< genes >  < genes > = NULL | _< gene >< genes >  < gene > = 3 upper case alphabetical characters  < name > = 1 to 10 upper case alphabetical characters  _ = one blank   A typical cloning request is   clone BOB from ADAM mutating BLD HEM   Note: there is always exactly one space between words; the last character on a line is immediately followed by EOLN. There can be zero to ten mutations in a request. If there are no mutations in the request, the keyword "mutating" does not appear, e.g.,   clone BOB from ADAM   The input is guaranteed to satisfy the syntactic format specifications, and it is guaranteed to contain at most one cloning request per clone, i.e., "clone BOB" will appear no more than once as the beginning of an input line. Furthermore, you are to process requests as though only those definitions which precede it are in effect. Therefore, if you have the following input segment   clone BOB from ADAM  clone MIKE from TIM  clone TIM from BOB   your output would include   clone MIKE from TIM has no connection to ADAM   because at the time MIKE was cloned, there was no connection to ADAM. If an clone is not consistent and safe, then all subsequent clones from that clone should be reported as having no connection to ADAM. For example, if you have the following input segment   clone BOB from ADAM mutating BLD  clone CHARLIE from BOB mutating BLD  clone DAVID from CHARLIE   your output would include   clone BOB from ADAM is consistent and safe  clone CHARLIE from BOB was at least twice mutated with BLD  clone DAVID from CHARLIE has no connection to ADAM   You are also guaranteed that no gene is listed twice in the same request.   

 Your solution must accept multiple input data sets. Each set will begin with an integer, p (0<= p <=8), specifying the number of programmes to be ordered. When a data set beginning with 0 is encountered, your solution should terminate. Following p on the same line will be p integers specifying the lengths of the programmes in minutes. There is no significance to the order in which these are given.  The next line of input specifies the alignment points. The total number of such points, a (0<= a <=8), appears first followed by a pairs of integers. The first integer in each pair, i (1<= i <=5), gives the importance of the alignment point. Alignment points marked 1 are most important; those marked 2 are of secondary importance, etc. The second integer in each pair, t, specifies the time when the alignment point occurs. No two alignment points in the same data set will have the same value of t.  

 Your solution must accept multiple input data sets. Each set will begin with an integer, p (0<= p <=8), specifying the number of programmes to be ordered. When a data set beginning with 0 is encountered, your solution should terminate. Following p on the same line will be p integers specifying the lengths of the programmes in minutes. There is no significance to the order in which these are given.  The next line of input specifies the alignment points. The total number of such points, a (0<= a <=8), appears first followed by a pairs of integers. The first integer in each pair, i (1<= i <=5), gives the importance of the alignment point. Alignment points marked 1 are most important; those marked 2 are of secondary importance, etc. The second integer in each pair, t, specifies the time when the alignment point occurs. No two alignment points in the same data set will have the same value of t.  

 The input starts with the font width table. These data give the widths of 10-point characters in six different fonts. The first line contains the number of characters in the table, N (0<= N <=100). Each of the next N lines contain a character in column 1 and then 6 integers representing the width of that character in each of the 6 different fonts. Widths are given in an arbitrary measurement called "units." The width of each 10-point character will be greater than zero units, and less than 256 units. Character widths scale linearly with point size. Thus if a 10-point "A" is 12 units wide, a 20-point "A" is 24 units wide.   The remainder of the input consists of paragraphs to be typeset. Each paragraph begins with a line containing two integers, L and W. L is the number of input lines of text for the paragraph (these immediately follow the first line), and W is the width allowed for each typeset line, in units. The initial font at the beginning of each paragraph is always font 1, and the initial point size in which characters are to be set is 10. Fonts are numbered 1 through 6, corresponding to columns 1 through 6 in the font width table. An empty paragraph (one for which L is 0) will mark the end of the input data. No output is to be produced for this empty paragraph.   The words in each paragraph are sequences of no more than 8 non-blank characters separated by spaces (that is, blanks--no tab characters will appear in the input). Spaces at the ends of input lines are irrelevant, and spaces between words are significant only to the extent that they separate words. Each character in each word will appear in the width table. Case is significant for all characters in the input data.   The special tokens "*f1", "*f2", "*f3", "*f4", "*f5", and "*f6" are used to select a particular font to be used in setting the text that follows it. The token "*sN", where N is an integer in the range 1 to 99 indicates that N point characters are to be used in setting the following text. These tokens will always be separated from words and other tokens by at least one blank. Note that style and size changes made in one paragraph do not carry over to the next paragraph, and that many such changes may appear in a single paragraph.   For each paragraph, try to set as many words per line as possible, ensuring that each word is followed by at least the width of a blank (which will always appear in the font width table) with the same point size and style as the characters in the preceding word, except for the last word on the line. The last word in a typeset line must not have any following space.   When scaling fonts, round the scaled character widths to the nearest integer, rounding upward in cases where the rounded value is half way between two consecutive integers. Thus, if a particular 10 point character occupies 9 units of space, a 15 point character would occupy 14 units of space, as would a 16 point character. A 14 point character, however, would occupy only 13 units of space.  

 The input file for the computer program include a Port Specification to provide the description of the traffic patterns within the port and a Traffic List which contains the sequence of vessels entering the port and their intended tracks. The end of the input is indicated by a Vessel Name beginning with an ``*"   Port Specification:Number of Waypoints in Port (an integer N)Waypoint ID List (N single-character designators)Waypoint Connection Matrix (N rows of Nreal values specifying the distances between waypointsin nautical miles)Traffic ListVessel Name (alphabetic characters)Time at first waypoint (on 24-hour clock):Planned Transit Speed (in knots)Planned Route (ordered list of waypoints)

 Your program is supposed to read the input from the standard input and write its output to the standard output. The first line of the input contains one integer N ( 0 < = N < = 100 000). N lines follow, the i-th of them contains two real numbers xi, yi ( -10 9 < = xi, yi < = 10 9) separated by a single space - the coordinates of the i-th house.   Each of the following lines contains four real numbers X1, Y1, X2, Y2 ( -10 9 < = X1, Y1, X2, Y2 < = 10 9) separated by a single space. These numbers are the coordinates of two different points [X1, Y1] and [X2, Y2], lying on the highway.

 The input data consists of several data sets. The first line of each data set has an integer which is the number of lines recorded by the device. Each subsequent line in the data set consists of the four numbers recorded by the device during a particular time interval. The end of data is indicated by a data set whose first line consists of the number 0.   In the first data set of the sample input, the patient entered through the door (at time 0.0) and for the first 5 seconds was traveling due north at 3 ft/sec. From time t = 7 to t = 9 he traveled at a speed of 2 ft/sec with a compass bearing of 30 °. He then stopped, changed his bearing to 60 °, and then traveled at 4 ft/sec from time t = 10 to time t = 100. Ten seconds later (at time t = 110) he headed due north at 2 ft/sec until t = 200.  

 The first line contains B (2 <= B <= 9) and the second line contains an integer number x given in a usual decimal scale of notation, 0 <= x <= 10 100. 

 The first line of input contains N --- the number of star systems in the galaxy, M --- the number of tunnels, K --- the number of supercomputers to be delivered, S --- the number of the solar system (the system where planet Earth is) and T --- the number of the star system where planet Eisiem is (2 <= N <= 50, 1 <= M <= 200, 1 <= K <= 50, 1 <= S, T <= N , S != T ).   Next M lines contain two different integer numbers each and describe tunnels. For each tunnel the numbers of star systems that it connects are given. The tunnel can be traveled in both directions, but remember that each day only one ship can travel through it, in particular, two ships cannot simultaneously travel through the same tunnel in opposite directions. No tunnel connects a star to itself and any two stars are connected by at most one tunnel.  

 The input contains valid trivial program. Size of each case does not exceed 2000 bytes.

 The first line of the input contains N -- the number of king's sons (1 <= N <= 2000). Next N lines for each of king's sons contain the list of the girls he likes: first Ki -- the number of those girls, and then Ki different integer numbers, ranging from 1 to N denoting the girls. The sum of all Ki does not exceed 200000.   The last line of the case contains the original list the wizard had made -- N different integer numbers: for each son the number of the girl he would marry in compliance with this list. It is guaranteed that the list is correct, that is, each son likes the girl he must marry according to this list.   

 The input consists of a single real number H (0.00 <= H <= 6.00) with 2 digits after decimal point. 

 The first line of the input contains two integer numbers x and y -- the dimensions of Bill's field (1 <= x, y <= 1000). Let Bill's field be positioned on the plane in such a way that its corners are located in points with coordinates (0, 0), (x, 0), (x, y) and (0, y). The second line of the case contains N -- the number of circles left by UFOs on Bill's field (0 <= N <= 100). Next N lines describe circles: each line contains three positive integer numbers xi, yi and ri -- coordinates of the center and radius of the circle. Circles may touch, overlap or contain each other. All circles are completely located within the field bounds. 

 The first line of the input contains N and M (2 <= N <= 200, 0 <= M <= 100). 

 The first line of input contains N -- the number of planets in the Galactic Federation (1 <= N <= 1000). Next N lines contain four integer numbers xi, yi, zi, and pi each and describe the planets: xi, yi, and zi specify the coordinates of the planet in space, pi = 0 if the industrialists have the majority on the planet and pi = 1 if the ecologists have the majority. All coordinates do not exceed 10 000 by their absolute value. No two planets occupy the same point. 

 The first line of the input file contains N -- the number of light sources (3 <= N <= 30). Next N lines contain two integer numbers each -- the coordinates of the light sources. All coordinates do not exceed 100 by their absolute value. No two sources coincide.

 The input contains multiple lines. Each line of input contains three non-negative numbers: the initial lenth of the rod in millimeters, the temperature change in degrees and the coefficient of heat expansion of the material. Input data guarantee that no rod expands by more than one half of its original length. The last line of input contains three negative numbers and it should not be processed. 

 Each line of input contains a number n, which is a positive integer with no more than 19 digits. The last line of input contains 0 and it should not be processed. 

 The first line of input consists of a single positive integer representing the number of cases to follow. Each case begins with three positive integers separated by spaces: N - your starting workload, M - your target workload, and L - the number of work reduction agencies available to you, (1 <= M <= N <= 100000, 1 <= L <= 100). The next L lines have the format "[agency name]:A,B", where A and B are the rates as described above for the given agency. (0 <= A,B <= 10000) The length of the agency name will be between 1 and 16, and will consist only of capital letters. Agency names will be unique. 

 The first line of input contains an integer t, the number of scenarios to be processed. The data for each scenario occupy 5 lines. The first line contains an integer n<=10 which is the number of horizontal and vertical streets. The second line contains an integer which is the grid unit size in miles, smaller than 100. The third and fourth lines contain n integers each, specifying the speed limits on the horizontal and vertical streets, respectively. The largest speed limit is 50. The last line of data for a scenario contains 6 integers. The first four are xs, ys, xt, and yt. The last two integers give the shortest and the longest allowed time to travel in minutes, inclusive, both not bigger than 1000. 

 The input contains a number of cases. Each case starts with the number n followed by n lines. Each line contains at least three numbers which are: v the number of a vertex, followed by the number of marbles originally placed at vertex v followed by a number d which is the number of children of v, followed by d numbers giving the identities of the children of v.  The input is terminated by a case where n = 0 and this case should not be processed. 

 The first line contains the number of scenarios. Scenarios are implicitly numbered starting from 1. For each scenario there are three tables:  1. Angelo's recipe book.  2. A table of ingredients.  3. A table of cocktail orders.  The recipe book consists of:    One line with the total number of cocktails in the book.  Following it, for each cocktail two lines:   The first line contains the name of the cocktail and the number of different ingredients.  The second line contains the ingredient names and their amounts in centi-liters separated by blanks.   The table of ingredients consists of:    One line containing the number of available ingredients.  For each ingredient a line containing the name, the available amount of that ingredient in centi-liters and the price in Lira per centi-liter.  Finally, the table of cocktail orders consists of:    One line containing the number of orders.  For each order the name of the cocktail.  Names of cocktails and ingredients are strings containing only alphanumeric characters or underscores (no whitespace). All values are integer values smaller which are at most 10000.

 The first line contains the number of scenarios.  For each scenario, you are given three lines corresponding to the three equations, with the coefficients of the matrix A and the coordinates of the vector b arranged as follows:     a11 a12 a13 b1   a21 a22 a23 b2   a31 a32 a33 b3  All numbers are integers in the range {âˆ’1000, . . . , 1000}. They are separated by single blanks.

 The input begins with the number n of scenarios on a single line by itself.  Next follow n scenarios. Each scenario consists of three lines containing integer numbers. The first line specifies the length l of a side of the chess board (4 <= l <= 300). The entire board has size l * l. The second and third line contain pair of integers {0, ..., l-1}*{0, ..., l-1} specifying the starting and ending position of the knight on the board. The integers are separated by a single blank. You can assume that the positions are valid positions on the chess board of that scenario.

 The first line contains the number of scenarios in the input.  For each scenario the first line contains the strength d of the gas bomb in the scenario (1 <= d <= 50). The second line contains the number n (1 <= n <= 20000) of rat populations. Then for every rat population follows a line containing three integers separated by spaces for the position (x, y) and "size" i of the population (1 <= i <= 255). It is guaranteed that position coordinates are valid (i.e., in the range between 0 and 1024) and no position is given more than once.

 The input will begin with a line containing a single number n. After this line follow n pairs of lines containing Schuttelreims. The first line of each pair will be of the form     s1<s2>s3<s4>s5  where the si are possibly empty strings of lowercase characters or blanks. The second line will be a string of lowercase characters or blanks ending with three dots "...". Lines will we at most 100 characters long.

 The first line contains the number of scenarios.  For each scenario, you find the number n, 1 <= n <= 20, of teams in the first line and the (unique) names of the teams in the n following lines. A team name is a single word of length at most 8 containing letters and digits only, and for your convenience the teams are listed in alphabetical order. The next line contains the number k of problems and the number m of solutions that were submitted (1 <= k < 10, 0 <= m <= 2000). Each of the following m lines describes one such solution, in the format "problem time correctness team", where 1 <= problem <= k is the number of the problem,0 <= time < 300 is the number of minutes elapsed since the contest was started, correctness is either "Yes" or "No" and team is the name of the team that submitted the solution. You can assume that the lines in the log file are sorted by time.

 The first line contains the number of scenarios.  For each scenario, you find the time d of latest possible arrival. For your convenience, this time is given in minutes starting from midnight (300 <= d <= 1440). Then the number d of data sets containing drift data is given (1 <= d <= 100). A drift data set has the form "m s" where m and s are integers. Value m specifies the minute from which the given speed and direction hold and s gives the new tide speed and direction (0 <= m <= 10000, -10 <= s <= 10). Positive values of s stand for drift from Hamburg to Cuxhaven, negative values specify drift in the opposite direction.  Time values are given in minutes only, speed in km/h, distances in km. You may assume that a solution exists and that the data set begins with an entry for time 0 specifying the initial drift speed at starting time.

 The first line of the input file hanoi.in consists of the number N (N <= 100000) of disks. The second line consists of three integers s1, s2, s3 with 0 <= s1, s2, s3 <= N and s1+s2+s3 = N, the number of disks on each of the three pegs. Lines three to five each contain the sizes of the disks for one peg. More precisely:  The (i + 2)-th line of the input file consists of integer numbers m i,1 . . .m i,si with 1 <= m i,j <= N, the sizes of the disks on peg i. The disks are given from bottom to top, thus m i,1 > m i,2 > . . . > m i,si .  Note that an empty stack is given by an empty line. The set of N disks have different sizes. All numbers are separated by a single space.

 The first line of the input contains one integer t, the number of test cases. Then t cases follow. For each test case, the first line consists of an integer N (0 <= N <= 20), the number of folds, and the following N lines give two points on each fold line as x1, y1, x2, y2. The following line gives two points on the cut line in the same way. 

 There are several test cases. The first line of each case is N (1 <= N <= 10000) representing the number of riders (excluding Charley). N = 0 ends the input. The following N lines are information of N different riders, in such format:   Vi [TAB] Ti   Vi is a positive integer <= 40, indicating the speed of the i-th rider (kph, kilometers per hour). Ti is the set off time of the i-th rider, which is an integer and counted in seconds. In any case it is assured that there always exists a nonnegative Ti.  

 The input may have several sets of test data. Each set is one line containing two integers N and M (1 <= N <= 100, 0 <= M <= 10000), separated by a space. The test data is followed by a line containing two zeros, which indicates the end of input and should not be processed as a set of data.

 The input consists of several test cases. The first line of each case contains two integers N and M (1 <= N, M <= 100), where N is the height of the map and M is the width of the map. This is followed by N lines each containing M characters representing the map. A '#' represents a rock, a '.' is a free block, 'p' is the starting position of the player, 't' is the position of the treasure, 'n' is the initial position of a non-aggressive monster, and an 'a' stands for the initial position of an aggressive monster.  The cell (i, j) is the j-th cell on the i-th row counting from left to right. The rows are counted from 1 to N starting from the first line of the matrix. We can number all the monsters as 1, 2, 3… according to their initial position, sorting first by row, then by column.  The (n+2)-th line contains an integer p (0 <= p <= 100), which is the total number of monsters (i.e. the total number of 'n's and 'a's in the matrix). It is followed by p lines each specifying a monster's position sequence in the following format: the i-th (1 <= i <= p) line corresponds to monster i, which begins with an integer s (1 <= s <= 100), meaning the length of position sequence. Then s pairs of integers x1, y1, x2, y2, …, xs, ys are followed, separated by blanks. Each pair is a free block in the map, (i.e. a monster never goes to a rock cell).  It is assured that none of the aggressive monsters' initial position is around the player. Two consecutive cases are separated by a blank line. The input is terminated by a line containing a pair of zeros.  

 The first line of the input contains the number of test cases K (1 <= K <= 20). Each case starts with a line containing a single integer N (2 <= N <= 5000), the number of buildings (including the apartment and the tower). N lines follow and each line contains two integers Xi, Yi, (0 <= Xi, Yi <= 1000000) the position and height of the building. The first building is always the apartment and the last one is always the tower. The input is sorted by Xi value in ascending order and no two buildings have the same X value.

 The first line of the input contains one integer T (1 <= T <= 10), the number of test cases. T cases then follow. For each test case, the first line consists of two integers: N and M where(1 <= N <= 100, 0 <= M <= N*(N-1)/2), is the number of tanks and pipes. The following N lines give the initial amount of contaminant for each tank, which are nonnegative real numbers and no larger than 100. Then the next M lines give the tanks that each pipe connects, as "A B" (1 <= A, B <= N, A != B) denotes there is a pipe between tank A and tank B.

 The input has several sets of test data. Each set is one line containing four numbers separated by a space. The first three indicate the lengths of the edges of the triangle field, and the fourth is the length of the rope. Each of the four numbers have exactly four digits after the decimal point. The line containing four zeros ends the input and should not be processed. You can assume each of the edges are not longer than 100.0000 and the length of the rope is not longer than the perimeter of the field.

 The input consists of one or more positive integers, each less than one billion, without leading zeroes, and on a line by itself. Following is a line containing only "0" that signals the end of the input.  

 Input will consist of several test cases. Each test case will have one or more lines as described above. Each test case will be terminated by a line containing '-'. An additional line containing '-' will follow the last test case. 

 There are several test cases. For each test case there is one line of input of the form "0.dddd..." where dddd is a string of 1 to 9 digits, not all zero. A line containing 0 follows the last case.

 Input consists of several test cases. Each test case consists of three lines containing:    f, the number of features  f coordinate pairs giving the vertices of the first polygon  f coordinate pairs giving the vertices of the second polygon   The vertices for both polygons correspond to the same set of features in the same order; for example, right ear tip, chin cleft, right eye, nose, left eye, left ear tip, space between front teeth. Each polygon has f vertices; each vertex is given as an x and y coordinate pair. There are at least three and no more than ten features. Coordinates are integers between -1000 and 1000. A line containing 0 follows the last test case. 

 The input consists of several test cases. Each test case begins with n, the number of rooms. The rooms are numbered from 1 (the start room) to n (the finish room). Input for the n rooms follows. The input for each room consists of one or more lines containing:    the energy value for room i  the number of doorways leaving room i  a list of the rooms that are reachable by the doorways leaving room i   The start and finish rooms will always have enery level 0. A line containing -1 follows the last test case. 

 Input consists of multiple cases, each describing a city. The first line will give N, the number of Conserval neighborhoods in the city; the following N lines will contain the street and avenue number of the southwest corner of each neighborhood. The next line will contain S, the number of street boundaries, and the S street numbers that they lie on, in increasing order. The final line will consist of A (at least 2), the number of avenue boundaries you must place. Input will be terminated by a line containing -1.

 The input consists of two lines; the first line is Alice's list, the second line is Bob's list.  Each list consists of 1 to 80 lower case letters with no spaces inbetween. 

 The first line of the standard input contains two integers n and k separated by a single space (2 <= n <= 50000, 1 <= k <= n), n is the number of cities in Byteland and k is the number of the first city on Byterider's path. Each of the following n-1 lines contains the description of one road in Byteland. Line (i + 1) (for 1 <= i <= n-1) contains three integers ai , bi and di separated by single spaces (1 <= ai ; bi <= n, 1 <= di <= 1000), ai and bi are the cities connected by the road, and di is the length of the road. Line (n + 1) contains one integer j -- the number of cities which Byterider would like to visit (1 <= j <= n-1). The next line contains j different integers m i separated by single spaces -- the numbers of the cities that Byterider would like to visit (1 <= mi <= n, mi != k). 

 The input contains several testcases. Each is specified by two strings s, t of alphanumeric ASCII characters separated by whitespace.The length of s and t will no more than 100000.

 The input file contains several test cases. Each test case starts with the number of slices n the pizza is cut to. Input is terminated by n=0. Otherwise, 1<=n<=10. Then follow 9 floating-point numbers px, py, r, tx, ty, ux, uy, vx, vy specifying the coordinates of the center p of the pizza, its radius, and the coordinates of three points t, u, v. They define the three corners of the slice-shaped table in counter-clockwise order, with t being the center.   The pizza is a homogeneous two-dimensional circular object. There is always a cut from its center parallel to the x-axis towards increasing x-values. The remaining pizza stays connected during the whole process, no matter what slices are removed. The distances from t to u, v are equal except for very small rounding errors. Tables are never larger than a half-circle.  

 The input contains several testcases. Each starts with the number of stones n. Input is terminated by n=0. Otherwise, n is even and 2<=n<=32. The next n integers identify the stones. A test case is further subdivided into k (sub-) test cases, k being the next number in the input file. Then follow k times a bit string b (encoding a non-negative integer) and n/2 distinct integers identifying the set of chosen stones. No invalid stones will be chosen and the length of b will not exceed 30. 

 The input contains several testcases. Each starts with the number n of countries involved. You may assume that n>=3 is an odd number. Then follow n pairs of x- and y-coordinates denoting the locations of the Foreign Offices. The coordinates of the Foreign Offices are integer numbers whose absolute value is less than 10 12. The countries are arranged in the same order as they appear in the input. Additionally, the first country is a neighbour of the last country in the list. 

 See the input specification of Problem 1939 for the format, and the output specification of Problem 1939 for the meaning of the input. 

 The input contains several testcases. Each is specified by two unsigned 32-bit integers n and m, denoting the size of the rectangle. As you can observe, the number of lines of the corresponding grid is one more in each dimension. Input is terminated by n=m=0. 

 The input contains several test cases. Each test case starts with the number of fountains n. Input is terminated by n=0. Otherwise, 1<=n<=100. Then follow n numbers pi denoting the time each fountain is on and off, where 0<=pi<=10. A value of 0 for pi indicates that fountain i is out of order (i.e. constantly off). Then follow n numbers qi denoting the offset of each fountain, where 0<=qi<2*pi, unless the fountain is out of order, in which case qi is meaningless. Otherwise it means that fountain i will be on at time qi, but off just one second before. 

 The input starts with a line containing the number of record pairs that follow. The number is given with at most three digits.   Each record pair consists of two lines of layout records and a line containing a hyphen. Each layout record consists of a sequence of letters a, b, c, d, e, and f. Note that a layout record may be an empty sequence if a queen bee laid only one egg by some reason. You can trust Taro and Hanako in that any of the paths in the input does not force you to visit any cell more than once. Any of lines in the input contain no characters other than those described above, and contain at most one hundred characters.  

 * Line 1: Two integers, N and P (the number of communication pairs, 1 <= P <= 10,000)   * Lines 2..P+1: two integers describing a pair of barns between which communication is desired. No pair is duplicated in the list.  

 A single line with one integer: P.  

 A single line with three integers: N, E, and D  

 * Line 1: Two integers, N and P   * Lines 2..N: N-1 lines, each with two integers I and J. Node I is node J's parent in the tree of roads.  

 There is no input.

 * Line 1: A single integer N   * Lines 2..N+1: N lines, each with a single integer representing one fence segment's length. The lengths are not necessarily unique.  

 * Line 1: One integer, N   * Lines 2..N+1: N lines, each with several space-separated integers. Line 2 contains chore 1; line 3 contains chore 2, and so on. Each line contains the length of time to complete the chore, the number of the prerequisites, Pi, (0 <= Pi <= 100), and the Pi prerequisites (range 1..N, of course).  

 One line with a single integer, N  

 A single line to be krunched.  

 The first line contains the number of scenarios.  For each scenario, you are give a dart score as a single positive integer on a line by itself.

 * Line 1: N (1 <= N <= 5000), the number of days for which stock prices are given   * Lines 2..etc: A series of N space-separated integers, ten per line except the final line which might have fewer integers.  

 The first line contains the number of scenarios.  For each scenario, you are given a single positive integer less than 45 on a line by itself.

 The first line contains the number of scenarios (maps).  For each map the first line contains the number of rows and columns of the map (both less than or equal to 15) separated by a blank. Then follows the map where 'X' indicates a square with a wall on it, 'T' indicates a target square and '.' indicates an empty square.  In the next line follows the starting position of Jimmy (row and column separated by a blank), then follows the number of boxes in the line after that. The following lines contain the starting positions of the boxes (one box per line, row and column separated by a blank).  The numbering of rows and columns starts with 0 in the upper left corner.

 The first line contains the number of scenarios. Each scenario consists of two sections. The first section describes the starting state of the cube and the second describes the turns to be made.  The starting state describes the colors of the facelets and where they are positioned. The colors are identified by single characters, and one character is given per facelet. Characters are separated by blanks and arranged in a certain pattern (see Fig. 2). The pattern identifies all six sides of the cube and can be thought of as a folding pattern. As shown in Fig. 2, the description of the top side of the cube is placed right over the description of the front side. This is done by indenting the lines with blanks. The next three lines contain the descriptions of the left, front, right and back side as shown in Fig. 2. The descriptions are simply concatenated with a blank character used as separator. After that the description of the bottom side follows, using the same format as the one used to describe the top side. This concludes the description of the starting state.  Then follows the second section of the scenario containing the turns which have to be performed. The description of the turns starts with a line containing the number of turns t (t > 0). Each turn is given in a separate line and consists of two integer values s and d which are separated by a single blank. The first value s determines the side of the cube which has to be turned. The sides are serially numbered as follows:left '0', front '1', right '2', back '3', top '4', bottom '5'. The second value d determines in which direction      the side s has to be turned and can either be '1' or '-1'. A '1' stands for clockwise and a '-1' for counterclockwise.The direction is given under the assumption that the viewer is looking directly at the specific side of the cube.

 The first line contains the number of scenarios.  For each scenario, you are first given an integer f âˆˆ {200, 400, 600, 800, 1000, 1200} on a line by itself,indicating the desired flow in liters per minute. The next line contains two integers n and m, separated by a single blank, where 1 <= n <= 20 is the number of pipes to be used, and 1 <= m <= 400 is the number of segments with a constant slope.  The followingmlines describe thesemsegments, each containing integers l and s, separated by a single blank, where l > 0 is the length in meters and s is the slope measured in per cent (s = 10 means that pipes of a length of 100 meters ascend by 10 meters, s = -50 means they descend 50 meters; -100 <= s <= 100).  It is guaranteed that the m given lengths add up to n times 20 meters.

 The first line of the input contains the number of scenarios.  For each scenario, you are first given the number m of team members in a single line, with 2 <= m <= 20.For every team member, there will be a line containing the number n of entries in this members calender (0 <= n <= 100), followed by n lines in the following format:   YYYY MM DD hh mm ss YYYY MM DD hh mm ss some string here Each such line contains the year, month, day, hour, minute, and second of both starting and ending time for the appointment, and a string with the description of the appointment. All numbers are zero padded to match the given format, with single blanks in-between. The string at the end might contain blanks and is no longer than 100 characters. The dates are in the range January 1, 1800 midnight to January 1, 2200 midnight. For simplification, you may assume that all months (even February) have 30 days each, and no invalid dates (like January 31) will occur.  Note that the ending time of a team member's appointment specifies the point in time where this team member is ready to join a meeting.

 The input consists of several test cases. Each test case consists of two lines. The first one contains N (2 <= N <= 1 000 000) â€“ the size of the string S.The second line contains the string S. The input file ends with a line, having the  number zero on it.

 Your program has to be ready to solve more than one test case. The first line of the input will contains only the number T of the test cases. Each test will start with the number N of enterprises (5<=N<=20000). Then some number of lines (no more than 200000) will follow with one of the commands:  E I – asking the length of the path from the enterprise I to its serving center in the moment;  I I J – informing that the serving center I is linked to the enterprise J.  The test case finishes with a line containing the word O. The I commands are less than N.

 In the first line there is an integer T (T<=20) – the number of different maps. For each map in first line there is an integer N (N<=1000) – the number of corridors. It is known that no two vertical corridors have common point and no two horizontal corridors have common point.So the next N lines contain such information: the line starts with one of the characters V or H –vertical or horizontal corridor. Then one Y-coordinate and two X-coordinates are given for a horizontal corridor or one X-coordinate and two Y-coordinates for a vertical corridor. The last line for each map contains X and Y coordinates of the entry point (start and end point of travel) and the direction (W – left, E – right, N – up and S – down). You may assume that: entry point is not located in the cross-point of two corridors, and explorer can always moves forward by the direction given in the input. All coordinates are integers and do not exceed 32767 by absolute value and there is no more than 500 vertical corridors and no more than 500 horizontal corridors.

 The input has multiple data sets, each starting with a line consisting of a single integer n, the number of applications in the data set. Then, it is followed by n lines, each of which represents one application with a period [i, j] and an asking price w yen in the following format.   i j w   A line containing a single zero indicates the end of the input.   The maximum number of applications in a data set is one thousand, and the maximum asking price is one million yen.  

 The first line of the input contains an integer K – determining the number of datasets. Next lines contain the area descriptions. One description is defined in the following way: The first line contains two integers-area length M<=1000 and width N<=1000, separated by a blank space. The next M lines contain N symbols that mark the reserved or free grid units,separated by a blank space. The symbols used are:  R – reserved unit  F – free unit  In the end of each area description there is a separating line.

 The input consists of large positive integers of up to 150 decimal digits.Each number is on its own separate line of the input file. The input file may contain empty lines. Numbers can be preceded or followed by whitespaces but no line exceeds 255 characters.

 Write a program that reads several data sets from the standard input and computes the safety factor for the cable networks encoded by the data sets. Each data set starts with two integers: 0<=n<=50,the number of relays in the net, and m, the number of cables in the net. Follow m data pairs (u,v), u < v, where u and v are relay identifiers (integers in the range 0..n-1). The pair (u,v) designates the cable that interconnects the relays u and v. The pairs may occur in any order.Except the (u,v) pairs, which do not contain white spaces, white spaces can occur freely in input. Input data terminate with an end of file and are correct.

 Each data set in the input stands for a particular set of treasures. For each set of treasures the input contains the number of treasures, and the list of pairs place - deadline in increasing order of the locations. White spaces can occur freely between the numbers in the input.The input data are correct.

 On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario begins with a line containing one positive integer 2 < m < 50, being the number of vertices of the simple polygon. The following m lines contain the vertices of the polygon in the order they appear along the border, going either clockwise or counter clockwise, starting at an arbitrary vertex. Each vertex is described by a pair of integers x y obeying 0 <= x <= 10 000 and 0 <= y <= 10 000.

 Each data set in the input stands for a particular set of bookets. For each set of booklets the input contains the number of schools, the school specified by Bob's boss, the number of booklets (less than 3000), the number of pages of each booklet (fits in integer). White spaces can occur freely between the numbers in the input.The input data are correct.

 The input list contains a single number per line and will be terminated by endof-file.

 The first line of the input contains a single integer t (1 <= t <= 11), the number of test cases, followed by the input data for each test case. Each test case consists of 19 lines, each having 19 numbers. A black stone is denoted by 1, a white stone is denoted by 2, and 0 denotes no stone. 

 The first line of the input contains a single integer t (1 <= t <= 10), the number of test cases. It is followed by the input data for each test case.  The first line of each test case contains an integer n (1 <= n <= 1000). Each of the next n lines, contains 2 space-separated integers x and y (the coordinates of a point) with magnitude (absolute value) of no more than 1000000000.  

 * Line 1: Two space-separated integers: N and M* Lines 2..M+1: Each line contains four space-separated entities, F1,        F2, L, and D that describe a road. F1 and F2 are numbers of        two farms connected by a road, L is its length, and D is a        character that is either 'N', 'E', 'S', or 'W' giving the        direction of the road from F1 to F2.* Line M+2: A single integer, K (1 <= K <= 10,000), the number of FB's        queries* Lines M+3..M+K+2: Each line corresponds to a query from Farmer Bob        and contains three space-separated integers: F1, F2, and I. F1        and F2 are numbers of the two farms in the query and I is the        index (1 <= I <= M) in the data after which Bob asks the        query. Data index 1 is on line 2 of the input data, and so on.

 The first line of the input contains a single integer t (1 <= t <= 11), the number of test cases, followed by the input data for each test case. The first line for each test case contains an integer n (1 <= n <= 10,000), the number of dice. In the next lines, each line contains six integers for a die, by the order A, B, C, D, E, F, as in the following figure. There is a single space between two numbers. The number of dice is less than or equal to 10,000. It is possible for two dice to be the same.     

 The first line of the input file contains a single integer t (1 <= t <= 11), the number of test cases, followed by the input data for each test case. The first line of each test case contains two integers n (1 <= n <= 100), and m (1 <= m <= 100). The input for this test case will be followed by n lines. Each line contains two integers which specify how much time in seconds it will take for the specified employee to complete one subproject of each project. So if the line contains x and y, it means that it takes the employee x seconds to complete a subproject from the first project, and y seconds to complete a subproject from the second project.

 The first line of the input contains a single integer t (1 <= t <= 11), the number of test cases, followed by the input data for each test case. The first line of each test case contains three integers m, n, and k (1 <= m,n,k <= 131072). The input for this test case will be followed by k lines. Each line contains two integers which specify the row and column of a stone. No stone will be given twice.

 The first line of the input file contains a single integer t (1 <= t <= 11), the number of test cases, followed by the input data for each test case. The input for each test case will be as follows:  The first line of input data contains an integer N (1 <= N <= 99) denoting the number of beads, and M denoting the number of pairs of beads compared. In each of the next M lines, two numbers are given where the first bead is heavier than the second bead.  

 The first line of the input contains a single integer t (1 <= t <= 11), the number of test cases, followed by the input data for each test case. The input for each test case will be as follows:  The first line of the input file contains the number of passenger coaches, which will not exceed 50,000. The second line contains a list of space separated integers giving the number of passengers in each coach, such that the i th number of in this line is the number of passengers in coach i. No coach holds more than 100 passengers. The third line contains the maximum number of passenger coaches which can be pulled by a single mini locomotive. This number will not exceed 1/3 of the number of passenger coaches.  

 The first line of the input contains a single integer X (1 <= X <= 11), the number of test cases, followed by the input data for each test case. The input for each test case will be as follows:  The first line of each instance contains two integers n (the number of bakers) and t (the number of the celebration we want the winners of).  1 <= n <= 100  1 <= t <= 1,000,000,000  The next n lines of the instance each describe a baker. In each of these lines first comes the name of the baker (names are lower case strings of no more than 20 characters without spaces), then comes the number of chalk marks initially on the baker's house, then comes the number of bakers in this baker's favorite list, and after that come the names of the bakers in this baker's list.   

 The input consists of multiple data sets. Each data set starts with a line containing two positive integers n (1 <= n <= 50) and r (1 <= r <= 50); n and r are the number of cards in the deck and the number of cutting operations, respectively.   There are r more lines in the data set, each of which represents a cutting operation. These cutting operations are performed in the listed order. Each line contains two positive integers p and c (p + c <= n + 1). Starting from the p-th card from the top of the deck, c cards should be pulled out and put on the top.   The end of the input is indicated by a line which contains two zeros.   Each input line contains exactly two integers separated by a space character. There are no other characters in the line.

 The input consists of multiple data sets. A data set starts with a line containing two positive integers W and H; W and H are the numbers of tiles in the x- and y- directions, respectively. W and H are not more than 20.   There are H more lines in the data set, each of which includes W characters. Each character represents the color of a tile as follows.   '.' - a black tile  '#' - a red tile  '@' - a man on a black tile(appears exactly once in a data set)  The end of the input is indicated by a line consisting of two zeros.  

 The input is a sequence of at most 200 data sets followed by a terminator.   A data set is a line containing four positive integers p, q, a, and n satisfying p,q <= 800, a <= 12000 and n <= 7. The integers are separated by a space.   The terminator is composed of just one line which contains four zeros separated by a space. It is not a part of the input data but a mark for the end of the input.  

 The input consists of a series of data sets, followed by a single line only containing a single character '0', which indicates the end of the input. Each data set begins with a line containing an integer N, which indicates the number of points in the data set. It is followed by N lines describing the coordinates of the points. Each of the N lines has two decimal fractions X and Y, describing the x- and y-coordinates of a point, respectively. They are given with five digits after the decimal point.   You may assume 1 <= N <= 300, 0.0 <= X <= 10.0, and 0.0 <= Y <= 10.0. No two points are closer than 0.0001. No two points in a data set are approximately at a distance of 2.0. More precisely, for any two points in a data set, the distance d between the two never satisfies 1.9999 <= d <= 2.0001. Finally, no three points in a data set are simultaneously very close to a single circle of radius one. More precisely, let P1, P2, and P3 be any three points in a data set, and d1, d2, and d3 the distances from an arbitrarily selected point in the xy-plane to each of them respectively. Then it never simultaneously holds that 0.9999 <= di <= 1.0001 (i = 1, 2, 3).  

 The input consists of multiple data sets. D is the number of the data sets.   D  DataSet1  DataSet2  ...  DataSetD   The format of each data set (DataSetd , 1 <= d <= D) is as follows.   N  B1 H1  B2 H2  ...  BN HN  M  F1 A1  F2 A2  ...  FM AM  L  P1 T1  P2 T2  ...  PL TL   Each line in the data set contains one or two integers.   N is the number of the boards he sets in the tank . Bi and Hi are the x-position (cm) and the height (cm) of the i-th board, where 1 <= i <= N .   Hi s differ from one another. You may assume the following.   0 < N < 10 ,  0 < B1 < B2 < ... < BN < 100 ,  0 < H1 < 50 , 0 < H2 < 50 , ..., 0 < HN < 50.  M is the number of the faucets above the tank . Fj and Aj are the x-position (cm) and the amount of water flow (cm3/second) of the j-th faucet , where 1 <= j <= M .   There is no faucet just above any boards . Namely, none of Fj is equal to Bi .   You may assume the following .    0 < M <10 ,  0 < F1 < F2 < ... < FM < 100 ,  0 < A1 < 100, 0 < A2 < 100, ... 0 < AM < 100.  L is the number of observation time and location. Pk is the x-position (cm) of the k-th observation point. Tk is the k-th observation time in seconds from the beginning.   None of Pk is equal to Bi .   You may assume the following .   0 < L < 10 ,  0 < P1 < 100, 0 < P2 < 100, ..., 0 < PL < 100 ,  0 < T1 < 1000000, 0 < T2 < 1000000, ... , 0 < TL < 1000000. 

 The input is a sequence of data sets, each of the form   N  Crossing1  ...  CrossingN  M  Question1  ...  QuestionM  Both Crossings and Questions are of the form   X-Y  where X and Y are strings of alphanumerical characters, of lengths no more than 16. There is no white space, and case matters for alphabetical characters.  N and M are between 1 and 1000 inclusive, and there are no more than 200 streets in a data set.   The last data set is followed by a line containing a zero.   

 The first line of the input file contains 6 integers L1, L2, L3, C1, C2, C3 (1 <= L1 < L2 < L3 <= 10^9, 1 <= C1 < C2 < C3 <= 10^9) in the specified order with one space between. The second line contains the amount of stations N (2 <= N <= 10000). The third line contains two different integers separated by space. They represent serial numbers of stations, the travel between which must be paid. Next N-1 lines contain distances from the first station ("Ekaterinburg") on the railway line to others. These distances are given as different positive integers and are arranged in the ascending order. The distance from "Ekaterinburg" to "Sverdlovsk" does not exceed 10^9. The distance between any neighboring stations does not exceed L3. The minimal travel cost between two given stations will not exceed 10^9.

 * Lines 1.....: Same input format as "Navigation Nightmare".

 * Lines 1..1+M: Same format as "Navigation Nightmare"   * Line 2+M: A single integer, K. 1 <= K <= 10,000   * Lines 3+M..2+M+K: Each line corresponds to a distance query and contains the indices of two farms.  

 * Lines 1 ..M+1: Same input format as in "Navigation Nightmare"   * Line M+2: A single integer, K.  

 * Line 1: A single integer, P   * Lines 2..P+1: Each of these lines describes a legal operation. Line 2 describes the first operation, etc. Each line begins with a 'M' for a move operation or a 'C' for a count operation. For move operations, the line also contains two integers: X and Y.For count operations, the line also contains a single integer: X.   Note that the value for N does not appear in the input file. No move operation will request a move a stack onto itself.  

 * Line 1: Two integers, N and K   * Lines 2..N+1: Each line contains a single integer that is the breed ID of a cow. Line 2 describes cow 1; line 3 describes cow 2; and so on.  

 * Line 1: A single integer, N   * Lines 2..N+1: Two integers: the volume threshold and x coordinate for a cow. Line 2 represents the first cow; line 3 represents the second cow; and so on. No two cows will stand at the same location.  

 * Line 1: Three integers: C, H, and B. B (0 <= B <= H) is the distance from the hall entrance to the bus waiting area.   * Lines 2..C+1: Each line contains two integers that describe a classroom where homework is to be submitted. The first integer (0..H) is the number of meters to the classroom from the hallway entrance. The second integer (0..10,000) is the first time (in seconds) that the teacher for that course will accept homework.  

 The input consists of Z assignments. The number of them is given by the single positive integer Z appearing on the first line of input. Each assignment begins with the line containing two possitive numbers R and S (1 <= R,S <= 1000). The numbers determine the number of town rows and columns. Then there are R lines each containing exactly S characters. Each character may be either hash (#) or period (.). Hash mark means the wall and the period is free space. The top left and bottom right corners are always free. 

 The input consists of Z assignments. The number of them is given by the single positive integer Z appearing on the first line of input. Each assignment begins with the line containing the single number X (1 <= X <= 10000) stating for the number of matrices. Then there are exactly X matrix descriptions. Each description begins with the line containing two integers M and N (1 <= M,N <= 100). M is the number of rows, N the number of columns. After these numbers there are exactly M lines each of them containing N integers seperated by space. These numbers are the matrix items. You can assume that the matrices really can be multipled. That means M of every matrix (except the first one) is the same as N of the previous one. The numbers are only as high that the items of resulting matrix should fit into integer. Also the items of every "partial result matrix" should fit there, when you will multiple them sequentially. 

 The input consists of Z assignments. The number of them is given by the single positive integer Z appearing on the first line of input. Then the assignements follow. Each assignement begins with line containing an integer M (1 <= M <= 45000). The sum will be divided by this number. Next line contains number of players H (1 <= H <= 45000). Next exactly H lines follow. On each line, there are exactly two numbers Ai and Bi separated by space. Both numbers cannot be equal zero at the same time. 

 The input consists of Z assignments. The number of them is given by the single positive integer Z appearing on the first line of input. Each assingement constist of three lines. On the first line there are two integers m and n (0 <= n,m <= 100) separated by space. These numbers give the degree of polynoms Q and P. On the second line there are m+1 integers a0 ... am. These numbers are coeficients of polynom P. On the third line there are n+1 integers b0 ... bn. Always am <> 0 and bn <> 0. Coeficients ai and bi are separated by space and they are chosen in order to each resulting coeficient could fit into the standard type integer. 

 The input consists of Z assignments. The number of them is given by the single positive integer Z appearing on the first line of input. The assignements follow. Each assignement consists of array filled with letters, and the list of words which should be found in the array. The description of the array begins with the line containing two integers R and S separated by space 1 <= R,S <= 200. R is the number of rows in the array, S is the number of collumns. The R lines follows, each line constist of exactly S lowercase letters (a trough z). The next line is the integer K (0 <= K <= 1000) determining the number of words to be found out in the puzzle. The K lines follow. On each line, there is one word. The maximum length of the word is 20 characters. The word may not appear in the array and it can appear there several times. In this case all appearences are scored out. Words in the list can repeat. 

 The input consists of Z assignments. The number of them is given by the single positive integer Z appearing on the first line of input. The assignements follow. Each assignement consists of the description of the starting state of the puzzle and the list of the moves that should be done.   At the first line of the description of the game initialposition, there are two integers R and S (2 <= R,S <= 1000) separated by space. R is a number of rows, S is number of columns. The R lines of input describing the rows of the puzzle follow. On each line there is S integers separated by at least one and at most ten spaces. At the begining of the line can be up to ten spaces which should be ignored. There are no spaces at the end of the line. Each number is the number of the tile in the given line. First number in the first line corresponds to the upper left corner of the puzzle. All numbers are between 0 to R.S-1 (inclusive) and each number appeares only once. Zero appear also only once and gives the position of the empty field.   The list of moves follows. The list can be empty. Each move is on the separate line and consists of one number T (0 < T <= R.S-1), which is the number of the tile which should be moved. At the end of the list there is the line containing number 0. Zero indicates the end of input and is not the part of the list of moves.  

 The input consists of Z assignments. The number of them is given by the single positive integer Z appearing on the first line of input. The assignements follow. Each assignement begins with line containing two numbers N and M (1 <= M,N <= 100000) separated by space. Two lines follow. At the first line, there are N numbers ai separated by space. At the second line there are M numbers bi. These numbers give the order of the cards in the packets of both preparing players. No number can appear twice in the same succession. Thus, for each i,j if ai = aj or bi = bj then i = j. 

 The input contains at least one, but no more than 21 lines. Each line of the input file (except the last one) contains data for one test case of the problem, consisting of exactly one integer (in the range 1..10000), representing the number of days. The end of the input is signaled by a line containing the number 0. 

 The input contains at least two, but no more than 1000 lines. Each line contains one word consisting of 1 to 20 lower case letters. 

 The input consists of a number of test cases. Each test case starts with the integer n (1 <= n <= 1000) indicating the number of points to follow. Each of the next n lines specify the x and y coordinates (two integers) of each point. You may assume that the points are distinct and the magnitudes of the coordinates are less than 20000. The input is terminated when n = 0. 

 The first line of the input contains only the name of the person who is initially the CEO. All names in the input file consist of 2 to 20 characters, which may be upper or lower case letters, apostrophes, and hyphens. (In particular, no blank spaces.) Each name contains at least one upper case and at least one lower case letter.    The first line will be followed by one or more additional lines. The format of each of these lines will be determined by one of the following three rules of syntax:    [existing member] hires [new member]  fire [existing member]  print   Here [existing member] is the name of any individual who is already a member of the organization, [new member] is the name of an individual who is not a member of the organization as yet. The three types of lines (hires, fire, and print) can appear in any order, any number of times.   You may assume that at any time there is at least one member (who is the CEO) and no more than 1000 members in the organization.  

 The input contains at least two, but no more than 10000 lines. Each line contains a word. The length of each word is at least 1 and no more than 20. All words in the input are distinct. 

 The input consists of a number of test cases. Each test case starts with a line containing a positive integer n (n <= 10) indicating the number of decks used. This is followed by a line containing 3 characters (separated by a space) in the set {A, K, Q, J, T, 9, ..., 2}, representing the dealer's face-up card and your two cards in the hand. In each case, assume that the n decks have been shuffled together randomly. The end of input is specified by n = 0. 

 The input consists of a number of test cases. Each test case contains 4 numbers on a line: two positive floating-point numbers specifying the acidity constant K a and the original concentration of the acid (in moles/liter) added to the water, as well as two positive integers m and n indicating that each mole of acid molecules is dissolved into m moles of H + ions and n moles of acid ions. The floating-point numbers are specified in scientific notation as shown below. The input is terminated with a line containing four zeros.  

 The input lists the vertices of a closed convex polygon in the plane. The number of lines in the input will be at least three but no more than 50. Each line contains the x and y coordinates of one vertex. Each x and y coordinate is an integer in the range -999..999. The vertex on the first line of the input file will be the origin, i.e., x = 0 and y = 0. Otherwise, the vertices may be in a scrambled order. Except for the origin, no vertex will be on the x-axis or the y-axis. No three vertices are colinear. 

 * Line 1: A single integer, N   * Line 2: Three space-separated integers, A, B and C   * Lines 3..N+2: Two space-separated integers: respectively the height and weight of a calf  

 * Line 1: Three integers: C, T, and K.   * Lines 2..C+1: Each line of space-separated integers describes which toppings one of the calves likes. The first integer on a line is the number of topping the calf likes. The remaining integers on the line are the toppings that the calf likes.  

 * Line 1: Three space-separated integers N, C, and F   * Lines 2..C+1: Two space-separated integers per line. The first is the calf's CSAT score; the second integer is the required amount of financial aid the calf needs  

 The input contains from 1 to 30 datasets followed by a line containing only "0 0 180". Each dataset contains 15 positive integers separated by single blanks on one line. Each integer is less than 180. Each group of three integers are the vertex angles for one triangle, expressed in degrees. Assume that none of the triangles is flipped over so the green side of the paper is up, and the vertex angles are listed in clockwise order around each individual triangle.   The first four datasets of the sample input below correspond to the figures above.  

 The input consists of one or more sets of strings, followed by a final line containing only the value 0. Each set starts with a line containing an integer, n, which is the number of strings in the set, followed by n strings, one per line, sorted in nondescending order by length. None of the strings contain spaces. There is at least one and no more than 15 strings per set. Each string is at most 25 characters long. 

 The input consists of one or more sets of data, followed by a final line containing only the value 0. Each data set starts with a line containing an integer, m, 1 <= m <= 80, which is the maximum width of the resulting window. This is followed by at least one and at most 15 lines, each containing the dimensions of one rectangle, width first, then height. The end of the list of rectangles is signaled by the pair -1 -1, which is not counted as the dimensions of an actual rectangle. Each rectangle is between 1 and 80 units wide (inclusive) and between 1 and 100 units high (inclusive). 

 The input for the decoder consists of one or more sets of {key, encrypted message} pairs. The key is on 3 separate lines. The first line contains the single integer x, 0 < x < 10,000; the second line contains the string S; and the third line contains the string P, which will be a permutation of S. The length of S (and therefore P) will always be one of the following powers of two: 2, 4, 8, 16, or 32. Following the key is a line containing the encrypted message string C, which will contain at least one and at most sixty characters. The strings S, P, and C will not contain whitespace, but may contain printable characters other than letters and digits. The end of the input is a line which contains the single integer 0. 

 There are from one to 15 data sets, followed by a final line containing only 0. A data set starts with a line containing a single positive integer n, which is no more than 100. It is the number of blots in the dataset. Then 3n positive integers follow, with a single blank or a newline separating them. Each group of three give the data for the circular boundary of one blot: x and y coordinate of the center of the blot and its radius, in that order. Each of these numbers will be no larger than 1,000,000. All blots lie entirely on a piece of paper, and no blot touches any edge of the paper. No two circles in a dataset will be identical. Given any two distinct circles, they will either intersect at exactly two distinct points or not intersect at all. If two circles in the input intersect, then they overlap by at least one unit. More precisely, if they have radii r1 and r2, where r1 <= r2, and if d is the distance between their centers, then     r2 - r1 + 1 <= d <= r1 + r2 - 1.   Three or more circles will never intersect at the same point. If C is a circle in the input that intersects at least one other input circle, and p and q are any of the intersection points of C with any of the other input circles, with p distinct from q, then p and q will be separated on C by at least 0.001 radians of arc. The restrictions on radii and angles ensure that standard double-precision arithmetic is sufficient for the calculations suggested above.   The sample input below corresponds to the figures above, though the scale is different in each figure.   

 The input consists of one or more data sets. Each set starts with a line containing an integer n, 1 <= n <= 10, followed by n pairs of values, one pair per line. The first value in a pair, s, is the speed in miles per hour and the second value, t, is the total elapsed time. Both s and t are integers, 1 <= s <= 90 and 1 <= t <= 12. The values for t are always in strictly increasing order. A value of -1 for n signals the end of the input.  

 * Line 1: Two space-separated integers, N and F.   * Lines 2..N+1: Each line contains a single integer, the number of cows in a field. Line 2 gives the number of cows in field 1,line 3 gives the number in field 2, and so on.  

 * Line 1: Three space-separated integers: N, B, and K.   * Lines 2..N+1: Each line contains N space-separated integers. Line 2 represents row 1; line 3 represents row 2, etc. The first integer on each line represents column 1; the second integer represents column 2; etc.   * Lines N+2..N+K+1: Each line contains two space-separated integers representing a query. The first integer is the top row of the query; the second integer is the left column of the query. The integers are in the range 1..N-B+1.  

 The first line contains a single integer n indicating the number of data sets.   Each data set is a single line containing eight 7-bit strings representing the LED displays observed. The first four strings will represent the first time displayed and the next four strings will represent the second time displayed. All of the strings will be separated by a single space. Note: It is not given in the input which segments are burnt out.  

 Input to this problem will begin with line containing a single integer n indicating the number of data sets. Each data set will be formatted according to the following description.   A single data set has 2 components:    Descendant Count - A line containing a single integer X (where 0 < X < 100) indicating the number of Ted's descendants.  Birth Certificate List - Data for X birth certificates, with one certificate's data per line. Each certificate's data will be of the format "FNAME CNAME FAGE" where:   FNAME is the father's name.  CNAME is the child's name.  FAGE is the integer age of the father on the date of CNAMEs birth.    Note:    Names are unique identifiers of individuals and contain no embedded white space.  All of Ted's descendants share Ted's birthday. Therefore, the age difference between any two is an integer number of years. (For those of you that are really picky, assume they were all born at the exact same hour, minute, second, etc... of their birth year.)  You have a birth certificate for all of Ted's descendants (a complete collection).  

 The first line contains a single integer n indicating the number of data sets.   The following n lines each represent a data set and consists of up to 1000 characters. Spaces can be contained anywhere within the data set.   Note that all tags are case sensitive.  

 The first line contains a single integer n indicating the number of data sets.   Each data set is a line consisting of seven two-character strings separated from each other by single spaces. Each string represents a playing card. The first character will be the card's rank; the second character will be the card's suit. The first five cards represent "the board" while the last two represent the player's "hole cards". These cards are not in any specific order.  

 The first line contains a single integer n indicating the number of data sets. The following lines contain the data sets.   Each data set will show side-by-side top-down views of each of the solids as a 5x5 array of numbers 0-9. Each number represents the height of the solid at that point (the number of unit cubes stacked at that point). If the height is 0, there is no solid present at that point. This is similar to providing a topographical map of each solid, and it is valid to assume that there are no gaps "under" any part of a solid that cannot be seen.   Note that each solid will be connected (i.e., a single piece) and may require translations (not just rotations) to join with a compatible solid.  

 The first line contains a single integer n indicating the number of data sets. Each data set will be formatted according to the following description:   A single data set has 3 components:    Header Line - A single line, "X Y", where X is the number of cities and Y is the number of flight legs in the airline's network. Both will be positive integers less than 100.  City List - A list of cities and their locations, one city per line. The line will be of the format "C LA NS LO EW" where:   C is the name of the city (no spaces, alphabetical, first letter only upper case)  LA is the degrees of latitude where the city is located (from 0 to 90)  NS is the direction of latitude ('N'orth or 'S'outh of the equator)  LO is the degrees of longitude where the city is located (from 0 to 180)  EW is the direction of longitude ('E'ast or 'W'est of the prime meridian)    Flight List - A list of city pairs of the format "B C" representing different cities that are directly connected by flight legs, one pair per line. Note that "B C" is equivalent to "C B".   Note:    Some longitude measurements can be represented in multiple ways (i.e., 180E = 180W)  All degrees of latitude and longitude given in the input will be integers.  The airline's network is connected (i.e., there is at least one route between any two cities).   

 The first line contains a single integer n indicating the number of data sets.   The following n lines each represent a data set. Each data set will be formatted according to the following description:   A single data set consists of a line "X Y", where X is the number of brains the zombie eats and Y is the number of brains the zombie requires to stay alive.  

 The input has multiple data sets, each starting with a line containing the number of committee members and the quorum of the meeting.   N Q  Here, N, meaning the size of the committee, and Q meaning the quorum, are positive integers. N is less than 50, and, of course, Q is less than or equal to N.   N lines follow, each describing convenient dates for a committee member in the following format.   M Date1 Date2 ... DateM  Here, M means the number of convenient dates for the member, which is an integer greater than or equal to zero. The remaining items in the line are his/her dates of convenience, which are positive integers less than 100, that is, 1 means tomorrow, 2 means the day after tomorrow, and so on. They are in ascending order without any repetition and separated by a space character. Lines have neither leading nor trailing spaces.   A line containing two zeros indicates the end of the input.  

 The input consists of multiple data sets. Each data set is given in the following format.   N  W H  x1 y1  x2 y2  ...  xN yN  S T   N is the number of persimmon trees, which is a positive integer less than 500. W and H are the width and the height of the entire field respectively. You can assume that both W and H are positive integers whose values are less than 100. For each i (1 <= i <= N), xi and yi are coordinates of the i-th persimmon tree in the grid. Note that the origin of each coordinate is 1. You can assume that 1 <= xi <= W and 1 <= yi <= H, and no two trees have the same positions. But you should not assume that the persimmon trees are sorted in some order according to their positions. Lastly, S and T are positive integers of the width and height respectively of the estate given by the lord. You can also assume that 1 <= S <= W and 1 <= T <= H.   The end of the input is indicated by a line that solely contains a zero.  

 The input consists of multiple data sets, each data set representing a matrix. The format of each data set is as follows.   W H  C11C12 ... C1W  C21C22 ... C2W  ...  CH1CH2 ... CHW   In the first line of a data set, two positive integers W and H are given. W indicates the width (the number of columns) of the matrix, and H indicates the height (the number of rows) of the matrix. W+H is less than or equal to 70.   H lines follow the first line, each of which corresponds to a row of the matrix in top to bottom order. The i-th row consists of W characters Ci1Ci2 ... CiW in left to right order. You may assume that the matrix includes at least one non-zero digit.   Following the last data set, two zeros in a line indicate the end of the input.  

 The input consists of multiple data sets. Each data set is given in the following format.   n  x1 y1 z1 r1  x2 y2 z2 r2  ...  xn yn zn rn   The first line of a data set contains an integer n, which is the number of cells. n is positive, and does not exceed 100.   The following n lines are descriptions of cells. Four values in a line are x-, y- and z-coordinates of the center, and radius (called r in the rest of the problem) of the sphere, in this order. Each value is given by a decimal fraction, with 3 digits after the decimal point. Values are separated by a space character.   Each of x, y, z and r is positive and is less than 100.0.   The end of the input is indicated by a line containing a zero.  

 The input consists of multiple data sets. As in the following, the end of the input is indicated by a line containing two zeros.   DataSet1  DataSet2  ...  DataSetn  0 0   Each data set (DataSeti) represents the state of a floor. The format of a data set is as follows.   W H  P11 P12 P13 ... P1W  P21 P22 P23 ... P2W  ...  PH1 PH2 PH3 ... PHW   The positive integers W and H are the numbers of panels on the living room in the x- and y- direction, respectively. The values of W and H are no more than 10. The integer Pyx represents the state of the panel. The value of Pyx means,   0: flawless panel (must not be covered),  1: scratched panel (must be covered).   

 Input will consist of multiple input sets. Each set will consist of a single line of digits representing a valid encryption (for example, no line will begin with a 0). There will be no spaces between the digits. An input line of '0' will terminate the input and should not be processed

 Input will consist of multiple input sets. Each set will consist of three integers, n, m, and d on a single line. The values of n, m and d will satisfy 1 <= n < m <= 1000, and 2 <= d <= 10. The line 0 0 0 will indicate end of input and should not be processed.

 Input will consist of multiple input sets. The first line of the file will contain a single positive integer nindicating the number of input sets in the file. Each input set will be a single line containing 53 integers: the first integer will indicate the number of players in the game and the remaining 52 values will be the initial layout of the cards in the deck, topmost card first. These values will all lie in the range 1 . . . 13, and the number of players will lie in the range 1. . . 10.

 Input will consist of multiple input sets. Each set will start with a single line containing a positive integer n indicating the total number of line segments from all the smaller maps. Each of the next n lines will contain a description of one segment in the format   x1 y1 x2 y2   where (x1,y1) are the coordinates of one endpoint and (x2,y2) are the coordinates of the other. Coordinate values are floating point values in the range 0...1000 speci.ed to at most two decimal places. The maximum number of line segments will be 10000 and all segments will have non-zero length. Following the last input set there will be a line containing a 0 indicating end of input; it should not be processed.  

 The input consists of multiple data sets, each in the following format.   n  x1 y1 x01 y01  x2 y2 x02 y02  . . .  xn yn x0n y0n   The first line of a data set contains a positive integer n, which is the number of the line segments drawn by the wizard. Each of the following n input lines contains four integers x, y, x0, and y0, which represent the x- and y-coordinates of two points (x, y) and (x0, y0) connected by a line segment. You may assume that all line segments have non-zero lengths. You may also assume that n is less than or equal to 100 and that all coordinates are between -50 and 50, inclusive. For your convenience, the coordinate system is arranged so that the monster is always on the origin (0, 0). The wizard never draws lines crossing (0, 0).   You may assume that any two line segments have at most one intersection point and that no three line segments share the same intersection point. You may also assume that the distance between any two intersection points is greater than 10^-5.   An input line containing a zero indicates the end of the input.  

 Input will consist of multiple input sets. Each input set will start with a single line containing an integer n indicating the number of dice that are already specified. Each of the next n lines describes one of these dice. Each of these lines will start with an integer f (indicating the number of faces on the die) followed by f integers indicating the value of each face. The last line of each problem instance will have the form   r m v1 c1 v2 c2 v3 c3 ... vm cm   where r is the number of faces required on the unspecified die, m is the number of sums of interest, v1, ... ,vm are these sums, and c1, ... ,cm are the counts of the desired number of different ways in which to achieve each of the respective sums.   Input values will satisfy the following constraints: 1 <= n <= 20, 3 <= f <= 20, 1 <= m <= 10, and 4 <= r <= 6. Values on the faces of all dice, both the specified ones and the unknown die, will be integers in the range 1 ... 50, and values for the vi's and ciâ€™s are all non-negative and are strictly less than the maximum value of a 32-bit signed integer.   The last input set is followed by a line containing a single 0; it should not be processed.  

 There will be multiple input sets. Input for each set is a positive integer n on a line by itself, followed by n lines (n no more than 100), each containing a permutation of the letters A, B, C, D and E, left-justified with no spaces. The final input set is followed by a line containing a 0, indicating end of input.

 There will be multiple input sets. Input for each set will consist of two lines. The first line will contain an integer in the range 2. . . 20 indicating the number of columns used. The next line is a string of up to 200 lower case letters. The last input set is followed by a line containing a single 0, indicating end of input.

 Input will consist of multiple input sets. Each input set starts with a positive integer n <= 250, indicating the number of two-word phrases in each language. This is followed by 2n lines, each containing one two-word phrase: the first n lines are an alphabetical list of phrases in the first language, and the remaining n lines are an alphabetical list of their translations into the second language. Only upper and lower case alphabetic characters are used in the words. No input set will involve more than 25 distinct words. No word appears as the first word in more than 10 phrases for any given language; likewise, no word appears as the last word in more than 10 phrases. A line containing a single 0 follows the last problem instance, indicating end of input.

 The input format is as follows.   n  The order of messengers  The message given to the King  ...  The order of messengers  The message given to the King   The first line of the input contains a positive integer n, which denotes the number of data sets. Each data set is a pair of the order of messengers and the message given to the King. The number of messengers relaying a message is between 1 and 6 inclusive. The same person may not appear more than once in the order of messengers. The length of a message is between 1 and 25 inclusive.  

 The first line contains a single positive integer N which is the number of test cases. The test cases follow.  The first line of a test case contains two positive integers: the amount to start with (at most $1 000 000), and the number of years the capital may grow (at most 40).  The following line contains a single number: the number d (1 <= d <= 10) of available bonds.  The next d lines each contain the description of a bond. The description of a bond consists of two positive integers: the value of the bond, and the yearly interest for that bond. The value of a bond is always a multiple of $1 000. The interest of a bond is never more than 10% of its value.

 The input is composed of at most 255 lines, each containing a single positive integer less than 2^15, followed by a line containing a single zero. The last line is not a part of the input data.

 The input file describes polygons one after another, followed by a terminating line that only contains a single zero.   A description of a polygon begins with a line containing a single integer, m (>= 3), that gives the number of its vertices. It is followed by m lines, each containing two integers x and y, the coordinates of a vertex. The x and y are separated by a single space. The i-th of these m lines gives the coordinates of the i-th vertex (i = 1,...,m). For each i = 1,...,m-1, the i-th vertex and the (i+1)-th vertex are connected by an edge. The m-th vertex and the first vertex are also connected by an edge (i.e., the curve is closed). Edges intersect only at vertices. No three edges share a single vertex (i.e., the curve is simple). The number of polygons is no more than 100. For each polygon, the number of vertices (m) is no more than 100. All coordinates x and y satisfy -2000 <= x <= 2000 and -2000 <= y <= 2000.  

 The input is a sequence of data sets, followed by a terminating line containing only a zero.   A data set gives the number N of days (no more than 365) in the period on a single line, followed by N lines giving the schedule for markets and festivals. The i-th line gives the schedule for the i-th day. It is composed of 16 numbers, either 0 or 1, 0 standing for a normal day, and 1 a market or festival day. The numbers are separated by one or more spaces.  

 The input consists of two parts. The first part, the Atomic Table, is composed of a number of lines, each line including an atomic symbol, one or more spaces, and its atomic weight which is a positive integer no more than 1000. No two lines include the same atomic symbol.   The first part ends with a line containing only the string END_OF_FIRST_PART.   The second part of the input is a sequence of lines. Each line is a molecular formula, not exceeding 80 characters, and contains no spaces. A molecule contains at most 10^5 atoms. Some atomic symbols in a molecular formula may not appear in the Atomic Table.   The sequence is followed by a line containing a single zero, indicating the end of the input.  

 The input starts with a line containing the number of initial layouts that follow.   Each layout consists of five lines - a blank line and four lines which represent initial layouts of four rows. Each row has seven two-digit numbers which correspond to the cards.  

 The input consists of several test cases. Each test case is started by two non-negative integers M and N. M represents the number of walls in the labyrinth and N represents the number of doors.  Then follow M lines, each containing four integers that describe a wall in the following format:  x y d t  (x, y) indicates the lower-left point of the wall, d is the direction of the wall -- 0 means it's parallel to the X-axis and 1 means that it's parallel to the Y-axis, and t gives the length of the wall.  The coordinates of two ends of any wall will be in the range of [1,199].  Then there are N lines that give the description of the doors:  x y d  x, y, d have the same meaning as the walls. As the doors have fixed length of 1, t is omitted.  The last line of each case contains two positive float numbers:  f1 f2  (f1, f2) gives the position of Nemo. And it will not lie within any wall or door.  A test case of M = -1 and N = -1 indicates the end of input, and should not be processed.

 The input starts with integer N (0 < N < 100) representing N documents provided. Then the next N sections are N documents. Each section contains the document content and ends with a single line of ten asterisks.  **********  You may assume that each line contains no more than 80 characters and the total number of lines in the N documents will not exceed 1500.  Next, integer M (0 < M <= 50000) is given representing the number of queries, followed by M lines, each query in one line. All the queries correspond to the format described above.

 The first part of the input are the register instructions to Argus, one instruction per line. You can assume the number of the instructions will not exceed 1000, and all these instructions are executed at the same time. This part is ended with a line of "#".   The second part is your task. This part contains only one line, which is one positive integer K (<= 10000).  

 There are several test cases. Each case starts with a line containing an integer N, the number of papers (2 <= N <= 16). Each of the following N lines contains a string on a paper, which is a nonempty string of letter "B"s and/or "G"s. Each string has no more than 100 letters.   A test case of N = 0 indicates the end of input, and should not be processed.  

 The input consists of several test cases. For each test case, the first line consists of one integer N (1 <= N <= 100), the number of points, and N lines follow to give the coordinates for every point in the following format:  x y   Here, x and y are float numbers within the value [0, 1].   A test case of N = 0 indicates the end of input, and should not be processed.  

 The first line of input contains a single integer, stating the number of floors to handle. Then follow n floor descriptions, each beginning on a new line with two integers, 2 <= r <= 10 and 2 <= c <= 10, defining the size of the floor â€“ r-by-c modules. Beginning on the next line follows a floor description in ASCII format, in total 2r + 1 rows, each with 2c + 2 characters, including the final newline. All floors are perfectly rectangular, and will always have an even number of modules. All interior walls are represented by numeric characters, '0' to '9', indicating the cost of routing pipes through the wall (see sample input).

 The input consists of several test cases. The first line of each case contains two integers N and R (1 <= N <= 1000, 1 <= R <= N), where N is the number of nodes in the tree and R is the node number of the root node. The second line contains N integers, the i-th of which is Ci (1 <= Ci <= 500), the coloring cost factor of node i. Each of the next N-1 lines contains two space-separated node numbers V1 and V2, which are the endpoints of an edge in the tree, denoting that V1 is the father node of V2. No edge will be listed twice, and all edges will be listed.   A test case of N = 0 and R = 0 indicates the end of input, and should not be processed.  

 There are several test cases. In the first line of each case there are two integers K (1 <= K <= 20) and N (2 <= N <= 10). Then follows a line with K integers expressing the password. Each number in the password is between 1 and N. Then come K lines, the i-th of which describes how the i-th dial plate controls the referred gears. These K lines have the following format:   p a1 b1 a2 b2 ... ap bp   Integer p (0 <= p <= K) expresses the number of gears that are referred to the dial plate. ai (1 <= i <= p) is an integer between 1 and K which tells that the ai-th gear is under the control of this dial plate. bi is an integer between 1 and N-1 which tells that when the dial plate is dialed once, the ai-th gear will rotate across by bi gears.   A test case of K = 0 and N = 0 indicates the end of input, and should not be processed.  

 There are several test cases. Each case begins with a line containing two integers, N and M (3 <= M, N <= 200). In each of the following N lines, there are M characters, describing the initial partition of the M*N grid. Every character is 'S', 'W' or 'B'. It is confirmed that each of these three characters appears at least once in each line, and 'W's are always on the left of 'S's.   A test case of N = 0 and M = 0 indicates the end of input, and should not be processed.  

 The input contains several sets of test data. Each set begins with a line containing one integer N, no more than 1000, which indicates the number of key points in the tree. Then follow N lines describing the N key points. For convenience, we number all the key points from 1 to N. The key point numbered with 1 is always the first fork of the tree. Other numbers may be any key points in the tree except the first fork. The i-th line in these N lines describes the key point with number i. Each line consists of one integer and one uppercase character 'Y' or 'N' separated by a single space, which represents the number of the previous key point and whether there lives a worm ('Y' means lives and 'N' means not). The previous key point means the neighboring key point in the shortest path between this key point and the key point numbered 1. In the above illustration, the previous key point of point 2 or 3 is point 1, while the previous key point of point 4 or 5 is point 3. This integer is -1 for the key point 1, means it has no previous key point. You can assume a fork has at most eight branches. The first set in the sample input describes the above illustration.   A test case of N = 0 indicates the end of input, and should not be processed.  

 On the first line of the input there is a single positive integer N, telling the number of test cases to follow. Each case consists of one line containing the value of p to use during the transcription of the string, followed by the actual string to be transcribed. The only allowed characters in the string are the lower case letters 'a'..'z' and '*' (asterisk). No string will be longer than 70 characters.

 The input will contain several test cases. The number of test cases T appears on a line by itself. Then follow T test cases. Each test case starts with a line containing two integers,N (the number of letter combinations, non-negative, at most 1 000) and M (the number of queries for this list, positive, at most 100). Then follow N lines, each containing a lower case letter combination (between 1 and 3 letters, inclusive). After that follow M lines, each containing either a positive integer or a lower case word. If it's a word, it will not contain any of the combinations of letters in the list for this test case. If it's a number, it will not be greater than the number of words in the language.

 On the first line of the input is a single positive integer N, telling the number of test cases to follow. Each case starts with one line with two integers S H, where S is even, 2 <= S <= 40,and 1 <= H <= 50. S is the side of the square roof in meters and H is the number of hatches.  The following H lines each contain two integers X and Y. These are the coordinates of the hatches. Hatches will never lie outside the roof or on the roof's perimeter. No two hatches will occupy the same position

 On the first line of the input is a single positive integer N, telling the number of test scenarios to follow. Each scenario begins with a line containing an integer M, 0 < M < 500, being the number of booked taxi rides. The following M lines contain the rides. Each ride is described by a departure time on the format hh:mm (ranging from 00:00 to 23:59), two integers a b that are the coordinates of the source address and two integers c d that are the coordinates of the destination address. All coordinates are at least 0 and strictly smaller than 200. The booked rides in each scenario are sorted in order of increasing departure time.

 On the first line of the input is a single positive integer N, telling the number of test cases to follow. The first line of each test case consists of one integer B (2 <= B <= 1 000), the base. The second line consists of an integer L (1 <= L <= 100), followed by the L first elements of some sequence (the elements are written in base 10 and are between 0 and B - 1 inclusive). The third line consists of an integer T, (L < T <= 100 000), the element of the sequence to predict.

 There will be several test cases. The first line of input will contain a single positive integer N giving the number of test cases. After that line follow the test cases.  Each test case starts with a line with a single positive integer k <= 26 which is the number of cards each player gets. The next line describes the k cards Adam has placed on the table, left to right. The next line describes the k cards Eve has (but she has not yet placed them on the table). A card is described by two characters, the first one being its value (2, 3, 4, 5, 6, 7, 8 ,9, T, J, Q, K, or A), and the second one being its suit (C, D, S, or H). Cards are separated by white spaces. So if Adam's cards are the ten of clubs, the two of hearts, and the Jack of diamonds, that could be described by the line  TC 2H JD

 The input is a sequence of data sets.   The first line of a data set contains a single integer, the number of connections in the timetable. It is not greater than 2000.   Connections are given one on a line, in the following format.   Start_city HH:MM Arrival_city HH:MM price   Start_city and Arrival_city are composed of up to 16 alphabetical characters, with only the first one in upper case. Departure and arrival times are given in hours and minutes (two digits each, separated by ":") from 00:00 to 23:59. Arrival time is strictly after departure time. The price for one connection is an integer between 1 and 10000, inclusive. Fields are separated by spaces.   The end of the input is marked by a line containing a zero.  

 The input is a sequence of lines, followed by the last line containing a zero. Each line except the last is a sequence of integers and has the following format.   n S M1 M2 . . . M2n   where n is the number of players in a team, S the initial number of stones, and Mi the maximum number of stones ith player can take. 1st, 3rd, 5th, ... players are your team's players and 2nd, 4th, 6th, ... the opponents. Numbers are separated by a single space character. You may assume 1 <= n <= 10, 1 <= Mi <= 16, and 1 <= S < 2^13.  

 The input consists of multiple data sets. Each data set is given in the following format.   n  x1 y1 z1  x2 y2 z2  . . .  xn yn zn   The first line of a data set contains an integer n, which is the number of points. It satisfies the condition 4 <= n <= 30.   The location of n points are given by three-dimensional orthogonal coordinates: (xi, yi, zi) (i = 1, ..., n). Three coordinates of a point appear in a line, separated by a space character. Each value is given by a decimal fraction, and is between 0.0 and 100.0 (both ends inclusive). Points are at least 0.01 distant from each other.   The end of the input is indicated by a line containing a zero.  

 Each line of the input file will list the attributes for one player:  < speed > < weight > < strength >  Each number will be a real-valued number. The file will end with a line reading "0 0 0" 

 There are 3 sections in the data file, describing the items available for bid, the registered bidders,  and the bids made during the auction.   Items   A single line containing the number of items, i  i lines, one for each item of the form: < item number > < minimum price > < auction end time > Item number is a non-negative integer, minimum price is specified to the penny (0.01), and auction end time is in 24 hour format of the form XX:YY:ZZ where XX is in hours from 00 to 23, YY is in minutes from 00 to 59, and ZZ is in seconds from 00 to 59.   Bidders   A single line with the number of bidders registered, j  j lines of bidder data of the form: < bidder number > < account balance > Where bidder number is a non-negative integer and account balance is specified to the penny (0.01).   Bids   A single line with the number of bids received, k  k lines of bid data of the form: < item # being bid on > < bidder number > < bid amount > < bid time > where all fields are formatted as described above. 

 The input for this game will consist of a sequence of one or more scenarios.  Each scenario contains the following:  The first line of the scenario will contain a single integer indicating the number of players in the game. This value will be at least 2 for a valid scenario. The end of the input file will be indicated by a value less than 2 for this number.  Following this will be a list of words to serve as the program's dictionary/vocabulary for the scenario. Each word will appear on a separate line, with no leading, trailing, or internal whitespace. Each word will consist only of the characters {aâ€“z}. The end of this list of words will be signaled by an empty line.  Following that empty line, the final input line of the scenario will contain the current sequence of letters, again with no leading or trailing spaces. This sequence may be empty if the computer player is the first player. The sequence may also contain more letters than the number of players, indicating that all players (including the computer player) have taken one or more turns.

 The input for this program consists of one or more observation sets.  Each observation set is constructed as follows:    The first line contains 4 integers < W > < L > < N > < T > W and L are positive integers representing the width (x dimension) and length (y dimension) of the yard. N is the non-negative number of terriers. T is the positive number of time intervals over which we have conducted observations.  The remainder of the observation set contains one line per terrier. Each line contains 2T integers denoting the (x,y) coordinates of the terrier at each of the T time steps, expressed separated by whitespace without parentheses or commas. Possible coordinates range from (0, 0) in one corner of the yard to (W, L) at the opposite corner.  The end of input is signaled by a line containing 4 zeros in place of a valid (W, L,N, T) set.

 Because each object is a line, it is represented in the input file with a left and right x coordinate followed by a single y coordinate:  < x1 > < x2 > < y >  Where x1, x2, and y are non-negative real numbers. x1 < x2  An input file can describe the architecture and landscape of multiple houses. For each house, the first line will have the coordinates of the house. The second line will contain the coordinates of the property line. The third line will have a single integer that represents the number of obstructions, and the following lines will have the coordinates of the obstructions, one per line.  Following the final house, a line "0 0 0" will end the file.  For each house, the house will be above the property line (house y > property line y). No obstruction will overlap with the house or property line, e.g. if obstacle y = house y, you are guaranteed the entire range obstacle[x1, x2] does not intersect with house[x1, x2].

 Only one town will be given in an input.    The first line gives the length of cable on the spool as a real number.  The second line contains the number of houses, N  The next N lines give the name of each house's owner. Each name consists of up to 20 characters {a–z,A–Z,0–9} and contains no whitespace or punctuation.  Next line: M, number of paths between houses  next M lines in the form  < house name A > < house name B > < distance >  Where the two house names match two different names in the list above and the distance is a positive real number. There will not be two paths between the same pair of houses.

 The input consists of several test cases. Each line of the input contains an integer k where 0 <= k <= 500000.  The last line contains an integer âˆ’1, which should not be processed.

 The input contains several test cases. The first line of the input contains a single integer indicating the number of test cases.  The input for each test case starts with a single line  < n > < m >  2 <= n <= 100 and 1 <= m <= 1000. n is the number of locations in the city and m is the number of road segments that directly connect two locations in the city. There may be more than one road segment between a pair of locations, and a road segment may start and end at the same location.  Each of the next m lines will describe the road segment between two locations and will contain three integers  < a > < b > < d >  1 <= a <= n, 1 <= b <= n, and 1 <= d <= 1000. a and b are locations that describe the ends of the road segment and d is the distance required to travel from a to b (or b to a) along the road segment. There are no one-way roads.  There will always exist a path between any two locations along the given road segments.

 The bank statement appears first. It begins and ends with lines of the form:  balance < X >  with the first line indicating the starting balance and the second line indicating the final balance.  In between the balances is the list of transactions, one per line, in the form:  {check|deposit} < N > < X >  Where N is the integer check or deposit number (the same check or deposit number will only appear once, although the same number can apply to both a check and deposit), and X is the amount of the transaction.  Following the final balance the register entries appear. The first line of the register is the starting balance  < X >  Following are pairs of lines, with the next transaction appearing followed by the balance you calculated by hand after entering the transaction.  {check | deposit} < N > < X >  < X >  The pairs repeat until the end of the input file.  For all input numbers and intermediates, |X| < 1000000. All dollar amounts are given to the penny (0.01).

 The input consists of several test cases. The first line of each test case contains an integer n. Each of the following n lines contains n integers, indicating the matrix A. The input is terminated by a single line with an integer âˆ’1. You may assume that 1 <= n <= 7 and |A i,j| < 10 4.

 The input consists of several test cases. The first line of each test case contains an integer n, indicating the number of points on the plane. Each of the following n lines contains two integer xi and yi, indicating the ith points. The last line of the input is an integer −1, indicating the end of input, which should not be processed. You may assume that 1 <= n <= 50000 and −10 4 <= xi, yi <= 10 4 for all i = 1 . . . n.

 The input consists of lines each containing a positive integer, which is the number of days that have elapsed since January 1, 2000 A.D. The last line contains an integer −1, which should not be processed.  You may assume that the resulting date won’t be after the year 9999.

 The input consists of several test cases. For each case, n is given in a single line, and then followed by n lines, each containing wi and hi separated by a single space. The last line of the input is an single integer -1, indicating the end of input. You may assume that 1 <= n <= 50000 and w 1h 1+w 2h 2+...+w nh n < 10 9.

 The input consists of several test cases. Each line of the input contains a positive integer n which is no greater than 7. The last line of input is a negative integer âˆ’1 indicating the end of input.

 Each line of the input file will be a single positive number n, except the last line, which is a number -1.  You may assume that 1 <= n <= 100.

 The input consists of several test cases. Each line of the input contains two integers n and m. Both of the integers at the last line of the input is −1, which should not be processed. You may assume that 1 <= n <= 50000 and 0 <= m <= n(n − 1)/2.

 The input contains several test cases. The first line of a test case contains an integer N and a real F, indicating respectively the number of lots (1 <= N <= 200) and the land division tax factor (with precision of two decimal digits, 0 < F <= 5.00). The second line of a test case contains N integers Xi, representing the areas of contiguous lots in the development plan (0 < Xi <= 500, for 1 <= i <= N); furthermore, Xk is neighbour to X k+1 for 1 <= k <= N - 1, and X N is neighbour to X1. The end of input is indicated by N = F = 0.

 The input consists of several test cases. The first line in the input contains an integer N specifying the number of test cases (1 <= N <= 10000). The first line of a test case contains the name of the two players separated by one space. A player name is composed of at most 20 letters from the English alphabet (from 'A' through 'Z' and 'a' through 'z'). The next seven lines describe the seven balls in the order they are thrown in the game (first the coche and then the boules thrown by the players according to the rules above). Each line contains four integers X, Y , μ and D representing respectively the starting position of a ball (-1000 <= X, Y <= 1000), its direction (0 <= μ <= 360) and the distance (0 < D <= 100) it will roll if it does not encounter any other ball in its way.

 The input contains several test cases. The first line of a test case contains one integer N, which indicates the number of museums participating in the event (1 <= N <= 20). Each museum has a unique identification number ranging from 1 to N. The second line of a test case contains N integers indicating the time, in minutes, needed to visit each museum, from 1 to N. Then there are N lines describing the times to go from one museum to every other. The i-th line contains N integers Mk (1 <= k <= N) representing the time, in minutes, to go from museum i to museum k. You may assume that the i-th integer in the i-th line is equal to zero. The end of input is indicated by N = 0

 The input contains several test cases. The first line in the input contains an integer N specifying the number of test cases (1 <= N <= 10000). Each test case is composed by one line, which contains the description of the four cards, separated by a space, in the order they were presented by the assistant.

 The input consists of several test cases. The first line of a test case contains a single integer N (1 <= N <= 208), representing the number of cards in the game. The second line of a test case contains a sequence of N integers (between 1 and 52), separated by single blank spaces, representing the cards. The cards will be dealt in the order they appear in the input, so that the topmost card in the stock pile is the Nth card in the line. Notice that each number from 1 to 52 will appear at most 4 times in each test case. The end of input is indicated by a test case with N = 0.

 The input contains several test cases. The first line of a test case contains an integer N indicating the number of fence strips in the island (1 <= N <= 2000). Each of the next N lines contains five integers X1, Y1,X2, Y2 and H, representing respectively the start point of the strip (X1, Y1), the end point of the strip (X2, Y2) and the strip height (H). The last line of a test case contains an integer W representing the tide height. Coordinates are given in meters, heights in centimeters. Furthermore, X1 = X2 or Y1 = Y2 (but not both); -500 <= X1, Y1,X2, Y2 <= 500; and 1 <= W,H <= 1000. The end of input is indicated by N = 0.

 The input contains several test cases. Players are identified by integers from 1 to 10000. The first line of a test case contains two integers N and M indicating respectively the number of rankings available (2 <= N <= 500) and the number of players in each ranking (2 <= M <= 500). Each of the next N lines contains the description of one weekly ranking. Each description is composed by a sequence of M integers, separated by a blank space, identifying the players who figured in that weekly ranking. You can assume that:    in each test case there is exactly one best player and at least one second best player,  each weekly ranking consists of M distinct player identifiers.  The end of input is indicated by N = M = 0.

 The input contains several test cases. The first line of a test case contains an integer N indicating the number of windows and picture frames in the test (2 <= N <= 2000). Each of the next N lines contains four integers X1, Y1,X2, Y2, where (X1, Y1) and (X2,Y2) represent the lower-left and upper-right coordinates marked by uncle Jeff on the big glass pane (-5000 <= X1, Y1,X2, Y2 <= 5000; X1 < X2 and Y1 < Y2). You should assume the following of each test case:    The marked rectangles do not overlap (but may intersect on the border points) and divide the big glass pane completely into rectangular regions, so that no glass is wasted. This means that the lower-left and upper-right coordinates of the big glass pane can be inferred from the coordinates of the marked rectangles.  It is possible to split up the big glass pane into the small marked rectangles through a sequence of edge-to-edge cuts.  The end of input is indicated by N = 0.

 The first line of the input file contains n, l, k, and m (0 <= n <= 10, 0 <= l <= 10 1000 , 1 <= k <= 1 000, 1 <= m <= 1 000).  The following n + 1 lines contain coefficients of the polynomial: a n , a n-1 , . . . , a 1 , a 0 (0 <= a i <= 10 1000). 

 The only line of input contains the formula represented as a string consisting of tokens '0', '1', 'A'. . . 'Z', 'a'. . . 'z', '(', ')', '~', '&', '|', '=>', '='. The last five tokens stand for ￢, ∧, ∨, => and ≡ respectively. Tokens can be separated by an arbitrary number of spaces. The line will contain at most 1 000 characters. The formula in the file will be syntactically correct. 

 Input consists of a list of three positive integers (total, cant, pos), preceded by an integer number that means the total of cases. Where total means total of tones to generate, cant means how many tones should be shown as a result, and pos means the start point. In this way, if cant=2, and pos=1, then this mean that it is needed to generate a sequence of 2 values starting from position number one. It is not allowed that pos has a value greater than total, and obviously neither that   ((pos + cant ) -1) > total. 

 Input file contains two integer numbers, n and s (0 < n, s <= 1 000). 

 The visible part of the window is given by its edge containing only horizontal and vertical segments with integer vertex coordinates. The part does not contain holes and its edge does not intersect or touch itself.  Each segment has length of at least one character.  The first line of the input contains the number n of vertices on the edge of the visible part. The next n lines contain coordinates of vertices in counter-clockwise order (y coordinates grow downwards on the screen).  Horizontal and vertical segments alternate in the input. The last segment is drawn between the last and the first vertices. n does not exceed 400 and absolute values of coordinates are limited to 200. 

 The first line of the input contains the number of ellipses k (1 <= k <= 1 000). Each of the next k lines contains the coordinates of five points that lie on corresponding ellipse. All coordinates are integer and do not exceed 1 000 by their absolute values. 

 The first line of the input file contains integer number n (1 <= n <= 1 000) --- the number of test cases. Each test case consists of six integer numbers. The first three numbers describe an envelope, the last three --- a postcard.  Three numbers describing each parallelogram are the lengths of its adjacent sides and its diagonal re-spectively. Specified lengths will not be greater than 1 000.  It is guaranteed that the corresponding parallelogram exists and it is not degenerate. 

 The input contains multiple test cases, each of which contains two positive integers, the GCD and the LCM. You can assume that these two numbers are both less than 2^63.

 Input file contains n --- the number of graves to be located in the graveyard (1 <= n <= 10 14 ). 

 The first line of the input file contains n and e (1 <= n, e <= 1 000). The second line contains n - 1 integer numbers that represent distances (in kilometers) between adjacent rivers running from North to South, listed from East to West. The third line contains e - 1 integer numbers that represent distances (also in kilometers) between adjacent rivers running from East to West, listed from North to South. The distance between any two adjacent rivers does not exceed 27 kilometers. 

 The first line contains four numbers: n, c1 , c2 , c3 , where n is the number of rows, ci are the sums of columns. n numbers follow, each is the sum of the corresponding row. n and all sums are non-negative integers. They are not greater than 125. 

 Input file contains n --- the number of lucky numbers (1 <= n <= 16), followed by n lucky numbers (1 <= pi <= 10 9 ). 

 The input consists of a sequence of integer pairs n and p with each integer on a line by itself. For all such pairs 1<=n<= 200, 1<=p<10 101 and there exists an integer k, 1<=k<=10 9 such that k n = p. 

 The first line of the input file contains n --- the size of the array, and m --- the number of questions to answer (1 <= n <= 100 000, 1 <= m <= 5 000).  The second line contains n different integer numbers not exceeding 10 9 by their absolute values --- the array for which the answers should be given.  The following m lines contain question descriptions, each description consists of three numbers: i, j, and k (1 <= i <= j <= n, 1 <= k <= j - i + 1) and represents the question Q(i, j, k). 

 The input will have a number N (1<=N<=9) in its first line representing the number of streams to convert. N lines will follow. 

 The expressions are of a variable length, although will never exceed 100 symbols. Symbols may be separated by any number of spaces or no spaces at all, therefore, the total length of an expression, as a number of characters, is unknown.   The number of expressions in the input file is variable and will never be greater than 20. Each expression is presented in a new line, as shown below.  

 The input represents the file generated by the T-500 machine with only one case. The first line contains two positive integers X (3 <= X <= 50) and Y (3 <= Y <= 50). X is the number of points read from top to bottom, and Y is the number of columns read from left to right.   All the following lines have 3 floating-point numbers: x , y , and z . The three values represent the coordinates of the measured point in the Cartesian plane. Each number has a maximum of 4 decimals.

 * Line 1: The single integer, N   * Lines 2..N+1: Each line contains N integers, each of which specifies a square's height. Line 2 contains the first (top) row of the grid; line 3 contains the second row, and so on. The first number on the line corresponds to the first (left) column of the grid, and so on.  

 * Line 1: A single integer: the size of the board   * Lines 2.. ...: These lines contain space-separated integers that tell the contents of the chessboard. The first set of lines (starting at the second line of the input file) represents the first row on the chessboard; the next set of lines represents the next row, and so on. To keep the input lines of reasonable length, when N > 15, a row is broken into successive lines of 15 numbers and a potentially shorter line to finish up a row. Each new row begins on its own line.  

 * Line 1: A single line with three space-separated integers: K, C, and M.   * Lines 2.. ...: Each of these K+C lines of K+C space-separated integers describes the distances between pairs of various entities. The input forms a symmetric matrix. Line 2 tells the distances from milking machine 1 to each of the other entities; line 3 tells the distances from machine 2 to each of the other entities, and so on. Distances of entities directly connected by a path are positive integers no larger than 200. Entities not directly connected by a path have a distance of 0. The distance from an entity to itself (i.e., all numbers on the diagonal) is also given as 0. To keep the input lines of reasonable length, when K+C > 15, a row is broken into successive lines of 15 numbers and a potentially shorter line to finish up a row. Each new row begins on its own line.  

 The input consists of several instances.   The first line of each instance contains two integers 1 <= A <= 500 and R >= 0 separated by a single space. A is the number of agents in the organization. Agents are assigned integers between 0 and A - 1. R is the number of pairs of agents that hate each other. The following R lines of the instance describe these pairs. Each of the lines contains two integers 0 <= a1, a2 < A separated by a single space, meaning that agents with numbers a1 and a2 hate each other. Every pair of agents that hate each other is described exactly once.   An empty line follows each instance. The input is terminated by a line containing two zeros.  

 The input consists of several instances. Each instance is described by (in the following order):    A single line containing a single integer: the number of villages N (1 <= N <= 10 000).  N lines describing the villages. The i-th of these lines (1 <= i <= N) describes the village with number i. It contains space separated integers d1, c1, d2, c2, , dki, cki, 0. The dj's are numbers of villages from which the rivers flow directly to the village i (with no other villages in between), each cj is the price of the journey between villages i and dj. Moreover, 2 <= dj <= N and 0 <= cj <= 1 000. Village 1 always corresponds to the mouth of the largest river, therefore no di can ever be equal to 1.  M <= 100 lines describing the queries. The i-th of these lines corresponds to the i-th query and contains a single integer xi (1 <= xi <= 10 000 000).  The instance is finished by a single line containing the number 0.   The whole input is ended by a single line containing the number 0.  

 The input consists of several instances. Each instance is described by a single line with four integers A, B, C, k separated by a single space. The integer k (1 <= k <= 32) is the number of bits of the control variable of the loop and A, B, C (0 <= A, B, C < 2 k) are the parameters of the loop.   The input is finished by a line containing four zeros.  

 The input consists of several instances, each of them consisting of a single line. Each line of the input contains two numbers X and Y in Fibonacci base separated by a single space. Each of the numbers has at most 40 digits. The end of input is not marked in any special way.

 The input consists of several instances.   The first line of each instance contains two integers 1 <= P <= 10 000 and C >= 0 separated by a single space. P is the number of power plants. The power plants have assigned integers between 0 and P - 1. C is the number of connections. The following C lines of the instance describe the connections. Each of the lines contains two integers 0 <= p1, p2 < P separated by a single space, meaning that plants with numbers p1 and p2 are connected. Each connection is described exactly once and there is at most one connection between every two plants.   The instances follow each other immediately, without any separator. The input is terminated by a line containing two zeros.  

 The input consists of several instances. Each instance is described on a single line containing the following integers separated by a single space: k, a0, , a k-1, b1, , bk, i. Here 1 <= k <= 100 is the order of the sequence, 0 <= ai < 10 000 are the first k elements of the sequence, 0 <= bi < 10 000 are the multipliers and 0 <= i < 1 000 000 000 is the number of the element we ask for.   The input ends with a line containing a number 0.  

 The input consists of several instances. Each instance is described by two lines.   The first line of the instance consists of an integer number 1 <= k <= 50. The second line of the instance consists of the string T. Length of T is at most 100 000 characters. The string T may contain non-alphabetic characters including spaces, but it does not contain any characters with special meaning (i.e. with ASCII code smaller than 32).   The input is terminated by a line containing a zero.  

 The input consists of several instances.   The first line of each instance contains two integers 1 <= H <= 10 000 and 0 <= F <= 20000 separated by a single space. H is the number of herbalists. The herbalists have assigned integers between 0 and H - 1. F is the number pairs of friends. The following F lines of the instance describe the pairs of friends. Each of the lines contains two integers 0 <= h1, h2 < H separated by a single space, meaning that herbalists with numbers h1 and h2 are friends. Each pair of friends is described exactly once.   The instances follow each other immediately, without any separator. The input is terminated by a line containing two zeros.  

 The input consists of several instances. Notes on input:    Negative numbers will be preceded by the word negative.  The word "hundred" is not used when "thousand" could be. For example, 1500 is written "one thousand five hundred", not "fifteen hundred".   The input is terminated by an empty line. 

 The input file consists of not more than one hundred lines each containing a single operator. No line is longer than 254 characters. 

 The input file consists of integer numbers, delimited by spaces and/or line feeds. The numbers are specified in the following order:  N  V1 X11 Y11 ... X 1V1 Y 1V1 ...  V N X N1 Y N1 ... X NVN Y NVN Output  

 Input file describes the graph Alice has drawn. The first line of the input file contains N and M (1 <= N <= 100, 1 <= M <= 5000). The second line contains N integer numbers specifying Wi +. The third line defines Wi - in a similar way. All costs are positive and do not exceed 10 6 . Each of the following M lines contains two integers describing the corresponding arc of the graph. Graph may contain loops and parallel arcs. 

 The input contains a single line with a valid program for the robot. The program consists of at most 10 000 characters.

 The first line of the input contains n --- the degree of the polynomial (0 <= n <= 20). Next line contains n + 1 integer numbers, a n , a n-1 , . . . , a1 , a0 --- polynomial coefficients (-1000 <= ai <= 1000, an != 0). 

 Each sequence is described with M --- its length (1 <= M <= 500) and M integer numbers A i (-2 31 <= A i < 2 31 ) --- the sequence itself. 

 The first line of the input contains N (2 <= N <= 50 000).  Next line contains N - 1 integer numbers: X2 , X3 , . . . , XN (1 <= X2 < X3 < . . . < XN <= 10 9 ). 

 The input contains two positive integers d and n separated by one space. It is guaranteed that they are less than one thousand. 

 The first line of input consists of a single integer N , 0 <= N <= 50 --- the number of pairs of moving pathways in the city. The second line contains six real numbers x1 , y1 , x2 , y2 , v1 , v2 , separated by spaces --- the coordinates of Eddy's house and of the Council building, and the speed of pathways and of Eddy respectively. Each of the next N lines contains a description of a pathway consisting of six real numbers x i1 , y i1 , x i2 , y i2 , Ti + and Ti -, where (x i1 , y i1 ) and (x i2 , y i2 ) are two different points on the pathway and 0 <= Ti + , Ti - <= 10 are the boarding and leaving times. All coordinates do not exceed 10000 by their absolute values, and v1 and v2 are real numbers ranging from 1 to 100. All pathways lie on different straight lines. Neither (x1 , y1 ) nor (x2 , y2 ) lie on any of the pathways. 

 The first line of the input file contains N --- the number of Insert operations and M --- the maximal position that can be used in the Insert operation (1 <= N <= 131 072, 1 <= M <= 131 072).  Next line contains N integer numbers L i that describe Insert operations to be performed (1 <= Li <= M ). 

 * Line 1: N   * Lines 2..N+1: These N lines represent the symmetric Interpasture Path connectivity matrix of the pastures. Line L shows the connectivity between pasture L-1 and the other pastures with its N space-separated integers. The first integer on each line is the Interpasture Path number that connects pasture L-1 and and pasture 1; the second integer is the IP number connecting pasture L-1 and pasture 2; etc. If pasture A connects to pasture B, then pasture B connects to Pasture A. When no Interpasture Path is available, the integer is 0.  

 * Line 1: Two space-separated integers: B and E.   * Line 2: The goal ID string, represented as a string of B 0's and 1's (with no spaces).   * Lines 3..E+2: Each line contains an existing ID string, represented as a string of B 0's and 1's (with no spaces).   

 * Line 1: Two space-separated integers: L and N   * Lines 2..N+1: Line Q gives the information for light Q-1. The information is five space separated entities, all but the fourth of which are integers. The fourth entity is a single character, R or G. In order, the fields are: P, Tg, Tr, initial color (R or G), and Tc.  

 * Line 1: Two space-separated integers: N and M.   * Lines 2..M+1: Three space-separated integers that define a path: The starting field, the end field, and the path's length.  

 Input contains n (1 <= n <= 50 000).

 * Lines 1..4: Four lines of upper case text, no more than 72 characters per line.

 * Line 1: The integer N.   * Lines 2..N+1: Each line describes one cow using several space-separated integers. The first integer is the number of locations S (1 <= S <= 40) which are preferred by that cow. This is followed by 2*S integers giving the (x,y) coordinates of these locations respectively. The coordinates lie in the range -100..100.  

 * Line 1: The integer D followed by a space followed by a legal three letter word.   * Line 2 through D+1: Each line contains a legal word no longer than 80 characters, consisting only of lowercase letters, from the STGD.  

 * Line 1: Two space-separated integers: N and M   * Lines 2..M+1: Each input line contains a set of two or more space-separated integers that describes the cows appearing in a single movie. The first integer is the number of cows participating in the described movie, (e.g., Mi); the subsequent Mi integers tell which cows were.  

 The first line of the input contains three integer numbers N, W, and H, separated by spaces. N (0 ≤ N ≤ 100) is the number of trees in the park. W and H (1 ≤ W, H ≤ 10000) are the park width and height in feet respectively.   Next N lines describe coordinates of trees in the park. Each line contains two integer numbers Xi and Yi separated by a space (0 ≤ Xi ≤ W, 0 ≤ Yi ≤ H) that represent coordinates of ith tree. All trees are located at different coordinates.  

 * Line 1: A single integer: N  

 * Line 1: 26 lower case characters representing the decryption key   * Line 2: As many as 80 characters that are the message to be decoded  

 The input is a sequence of datasets. A dataset is a line containing three positive integers a, b, and d separated by a space. The following relations hold: a != b, a <= 10000, b <= 10000, and d <= 50000. You may assume that it is possible to measure d mg using a combination of a mg and b mg weights. In other words, you need not consider "no solution" cases.  The end of the input is indicated by a line containing three zeros separated by a space. It is not a dataset.

 The input consists of multiple datasets each corresponding to the record of a game. A dataset starts with a line containing three positive integers n, m, and p separated by a space. The relations 3 <= m <= n <= 7 and 1 <= p <= n 3 hold between them. n and m are the parameter values of the game as described above. p is the number of moves in the game.  The rest of the dataset is p lines each containing two positive integers x and y. Each of these lines describes a move, i.e. the player on turn puts his ball on the peg specified. You can assume that 1 <= x <= n and 1 <= y <= n. You can also assume that at most n balls are put on a peg throughout a game.  The end of the input is indicated by a line with three zeros separated by a space.

 The input starts with a line containing only a positive integer S, indicating the number of datasets in the input. S is no more than 1000.  It is followed by S datasets. Each dataset is composed of nine 32-bit integers corresponding to the first nine chunks of a communication. They are written in hexadecimal notation, using digits `0' to `9' and lowercase letters `a' to `f', and with no leading zeros. They are separated by a space or a newline. Each dataset is ended by a newline.

 The input consists of multiple datasets. The first line of each dataset contains two positive integers N and M, both of which are less than or equal to 100 and are separated by a single space character.  The rest of the dataset consists of N + 2M lines, each of which contains a syntactically correct pathname of at most 100 characters. You may assume that each path segment enclosed by two slashes is of length at least one. In other words, two consecutive slashes cannot occur in any pathname. Each path segment does not include anything other than alphanumerical characters (i.e. `a'-`z', `A'-`Z', and `0'-`9') and periods (`.').  The first N pathnames enumerate all the web pages (ordinary files). Every existing directory name occurs at least once in these pathnames. You can assume that these pathnames do not include any path segments consisting solely of single or double periods and that the last path segments are ordinary file names. Therefore, you do not have to worry about special rules for index.html and single/double periods. You can also assume that no two of the N pathnames  point to the same page.  Each of the following M pairs of pathnames is a question: do the two pathnames point to the same web page? These pathnames may include single or double periods and may be terminated by a slash. They may include names that do not correspond to existing directories or ordinary files.  Two zeros in a line indicate the end of the input.

 The input consists of multiple datasets. Each dataset is given in the following format.     n   d   name1   name2   ...   namen  The first integer n is the number of login names. Then comes a positive integer d. Two login names whose distance is less than or equal to d are deemed to be confusing. You may assume that 0 < n <= 200 and 0 < d <= 2. The i-th student's login name is given by namei, which is composed of only lowercase letters. Its length is less than 16. You can assume that there are no duplicates in namei (1 <= i <= n).  The end of the input is indicated by a line that solely contains a zero.

 The input consists of multiple datasets in the following format.     N   Dataset1   Dataset2   : : :   DatasetN  N is the number of the datasets.  The format of each dataset is as follows.     T11 T12 T13   T21 T22 T23   T31 T32 T33   F11 F12 F13   F21 F22 F23   F31 F32 F33  Tij and Fij (1 <= i <= 3, 1 <= j <= 3) are the faces of dice appearing on the top and front views, as shown in Figure 7, or a zero. A zero means that the face at the corresponding position is unknown.

 The input consists of multiple map data. Each map data starts with a line containing the total number of territories n, followed by the data for those territories. n is a positive integer not more than 100. The data for a territory with m vertices has the following format:     String   x1 y1   x2 y2   ...   xm ym   -1  "String" (a sequence of alphanumerical characters) gives the name of the country it belongs to. A country name has at least one character and never has more than twenty. When a country has multiple territories, its name appears in each of them.  Remaining lines represent the vertices of the territory. A vertex data line has a pair of nonnegative integers which represent the x- and y-coordinates of a vertex. x- and y-coordinates are separated by a single space, and y-coordinate is immediately followed by a newline. Edges of the territory are obtained by connecting vertices given in two adjacent vertex data lines, and by connecting vertices given in the last and the first vertex data lines. None of x- and y-coordinates exceeds 1000. Finally, -1 in a line marks the end of vertex data lines. The number of vertices m does not exceed 100.  You may assume that the contours of polygons are simple, i.e. they do not cross nor touch themselves. No two polygons share a region of non-zero area. The number of countries in a map does not exceed 10.  The last map data is followed by a line containing only a zero, marking the end of the input data.

 The input consists of a series of datasets. Each dataset begins with a line containing a positive integer, which indicates the number of spheres N in the dataset. It is followed by N lines describing the centers and radiuses of the spheres. Each of the N lines has four positive integers Xi, Yi, Zi, and Ri (i = 1, ... ,N) describing the center and the radius of the i-th sphere, respectively.  You may assume 1 <= N <= 100, 1 <= Ri <= 2000, 0 < Xi -Ri < Xi + Ri < 4000, 0 < Yi -Ri < Yi + Ri < 16000, and 0 < Zi -Ri < Zi + Ri < 36000. Each solid sphere is defined as the set of all points (x, y, z) satisfying (x - Xi) 2 + (y - Yi) 2 + (z - Zi) 2 <= Ri 2 A sphere may contain other spheres. No two spheres are mutually tangent. Every Zi Â± Ri and minimum/maximum z coordinates of a circle formed by the intersection of any two spheres differ from each other by at least 0.01.  The end of the input is indicated by a line with one zero.

 The input consists of multiple datasets, followed by a single line containing only a zero. The first line of each dataset contains an integer n indicating the number of the following lines, each of which contains two integers ai and bi (i = 1, ... , n).  A closed path formed by the given points (a1, b1), (a2, b2), ... , (an, bn), (a n+1; b n+1)(= (a1; b1)) indicates the outline of the cross section of the prisms. The closed path is simple, that is, it does not cross nor touch itself. The right-hand side of the line segment from (ai, bi) to (a i+1; b i+1) is the inside of the section.  You may assume that 3 <= n <= 4, 0 <= ai <= 10 and 0 <= bi <= 10 (i = 1, ... , n).  One of the prisms is put along the x-axis so that the outline of its cross section at x = ξ is indicated by points (xi, yi, zi) = (ξ, ai, bi) (0 <= ξ <= 10, i = 1, ... n). The other prism is put along the y-axis so that its cross section at y = η is indicated by points (x, yi, zi) = (ai, η , bi) (0 <= η <= 10, i = 1, ... , n).

 The input consists of several test cases. The first line of each test case contains three integers M (0 < M <= 30), T (1 < T <= 1000) and N (0 < N <= M). Each of the following T lines contains M floating-point numbers in the range of [0,1]. In these T lines, the j-th number in the i-th line is just Pij. A test case of M = T = N = 0 indicates the end of input, and should not be processed.

 The first line of input contains a single integer T representing the number of test cases. The following T blocks each represents a test case.   The first line of each block contains an integer N (1 < N <= 1000). The second line contains N numbers separated by one or more blanks. The I-th number means W(I) (0 < W(I) <= 10000). The third line contains N numbers separated by one or more blanks. The I-th number means D(I) (0 <= D(I) <= 10000). The following N-1 lines each contains three integers u, v, L (1 <= u, v <= Nï¼Œ0 < L <= 1000), which means there is a highway between city u and v of length L.  

 First line in the input is an integer number N (1 <= N <= 100000), which represents the number of commands. The next N lines, each gives a command described above. Any number given in the input file will be non-negative integer and will not be more than 1000000000. 

 The first line of the input contains an integer N (1 <= N <= 10000), which represents the number of student in Li Ming’s class. Then come N lines. Each line contains a name, which has no more than 30 letters. These names represent all the students in Li Ming’s class and you can assume that the names are different from each other.   In (N+2)-th line, you'll get an integer M (1 <= M <= 50), which represents the number of exams. The following M parts each represent an exam. Each exam has N lines. In each line, there is a positive integer S, which is no more then 100, and a name P, which must occur in the name list described above. It means that in this exam student P gains S scores. It’s confirmed that all the names in the name list will appear in an exam.  

 The first line of the input is an integer X (X <= 3500) representing the number of test cases. The following X lines each contains two numbers N and P (1 <= N <= 1000000000, 1 <= P <= 30000), representing a test case.

 The first line of the input is an integer X (X <= 10) representing the number of test cases. The following X blocks each represents a test case.   The first line of each block contains two numbers N and T (2 <= N <= 1000, 1 <= T <= 50000) representing the size of the matrix and the number of the instructions. The following T lines each represents an instruction having the format "Q x y" or "C x1 y1 x2 y2", which has been described above.  

 A single line of input contains four integers N, M, K, J (1 <= M, N <= 10000000, 1 <= K <= 20000, 1 <= K <= N+1, 1 <= J <= N+1). N, M and K have the same meaning as described above, and J is the kingâ€™s number.

 The input consists of two lines. The first line consists of 2N characters and represents the encoded message N bytes long. The second line consists of 2N+2 characters and represents the encoded message N+1 bytes long. Here 1 ≤ N ≤ 10000. Each message is written on a single line in a hexadecimal form byte by byte without spaces. Each byte of the message is represented by two characters '0'-'9', 'A'-'F' that represent the hexadecimal value of the corresponding byte.

 The input consists of multiple test cases. The first line of each test case contains two integers M and N (1 < N, M < 20), which denote the size of the maze. The next M lines give the maze layout, with each line containing N characters. A character is one of the following: 'X' (a block of wall, which the explorer cannot enter), '.' (an empty block), 'S' (the start point of Acm), 'G' (the position of treasure), 'A', 'B', 'C', 'D', 'E' (the doors), 'a', 'b', 'c', 'd', 'e' (the keys of the doors). The input is terminated with two 0's. This test case should not be processed. 

 The input consists of only one line, which contains two integer N and K (N = 2, 3, 4. And if N=2, we has 1 <= K <= 5000; if N=3, we has 1 <= K <= 1000; if N=4, we has 1 <= K <= 500). 

 Input contains two lines. The first line contains the message engraved on the plate. Before encrypting, all spaces and punctuation marks were removed, so the encrypted message contains only capital letters of the English alphabet. The second line contains the original message that is conjectured to be encrypted in the message on the first line. It also contains only capital letters of the English alphabet.  The lengths of both lines of the input are equal and do not exceed 100.

 Input consists of six lines. Each line describes one pallet and contains two integer numbers w and h (1 <= w, h <= 10 000) -- width and height of the pallet in millimeters respectively.

 * Line 1: A single six digit integer that is the start of the sequence testing.  

 The first line of the input contains n (4 <= n <= 100). The rest of the input file contains the document to be indexed. The size of the input does not exceed 20 000 bytes.  The line is considered blank if it is completely empty. No line contains leading or trailing spaces. The document does not contain two consecutive blank lines. The first line of the document is not blank. The length of each line of the document does not exceed 200 characters.

 The first line of the input contains three integer numbers m, n, and k. It is followed by k lines with stock prices for days 1 to k. Each stock price pi is specified with two digits after decimal point. Prices in the input file are such that Pi(m) != Pi(n) for all i (n <= i <= k).

 The first line of the input file contains an integer number n (3 <= n <= 100) -- the number of vertices in the original polyline. Following n lines contain two integer numbers xi and yi on a line (0 <= xi, yi <= 100) -- coordinates of the vertices. All vertices are different and no vertex lies on an edge between two other vertices. Adjacent edges of the polyline are not collinear.

 The first line of the input file contains a single integer number n (2 <= n <= 100) â€” the number of windows on the scene. The following n lines describe the windows. Each line contains five integer numbers x 1i, y 1i, x 2i, y 2i, z i (0 < x 1i, y 1i, x 2i, y 2i, z i < 1000). Here (x 1i, y 1i, z i) are coordinates of the bottom left corner of the window, and (x 2i, y 2i, z i) are coordinates of the top right corner of the window (x 1i < x 2i, y 1i < y 2i). Windows are ordered by z coordinate (z i > z i-1 for 2 <= i <= n).

 Input contains n and m (1 <= n <= 100 000, 2 <= m <= 10 9).

 The first line of the input contains integer number n (1 <= n <= 1000). It is followed by n lines containing numbers ai and bi (0 <= ai, bi <= 1000) that describe statements of each turtle for i from 1 to n.

 The first line of the input contains integer numbers n, m, a1, b1, a2, b2. Here n (3 <= n <= 100) is a number of cities in the Kingdom (cities are numbered from 1 to n); m (2 <= m <= 1000) is a number of magic portals; a1, b1 (1 <= a1, b1 <= n, a1 != b1) are the neighboring cities where Albert and Betty correspondingly start their travel from; a2, b2 (1 <= a2, b2 <= n, a2 != b2) are the neighboring cities where Albert and Betty correspondingly want to get to (a1 6= a2 or b1 != b2). Following m lines describe the portals. Each line contains two numbers pi1 and pi2 (1 <= pi1, pi2 <= n, pi1 != pi2) -- cities that are connected by the portal. There is at most one portal connecting two cities.

 The input consists of a single line with 3 integer numbers n, w, and h (1 <= n <= 10, 1 <= w, h <= n).

 Input contains two integer numbers K and M (1 <= K, M <= 10 9) separated by a space.

 The input consists of a single line with 5 numbers A, B, C, D, and E separated by spaces. A, B, C are the lengths of brick's sides, and D, E are the lengths of hole's sides. All lengths are at least 1 and at most 10 inches and have at most 1 digit after decimal point. 

 The input consists of The City description and the evacuation plan description. The first line of the input file consists of two numbers N and M separated by a space. N (1 ≤ N ≤ 100) is a number of municipal buildings in The City (all municipal buildings are numbered from 1 to N). M (1 ≤ M ≤ 100) is a number of fallout shelters in The City (all fallout shelters are numbered from 1 to M).   The following N lines describe municipal buildings. Each line contains there integer numbers Xi, Yi, and Bi separated by spaces, where Xi, Yi (-1000 ≤ Xi, Yi ≤ 1000) are the coordinates of the building, and Bi (1 ≤ Bi ≤ 1000) is the number of workers in this building.   The description of municipal buildings is followed by M lines that describe fallout shelters. Each line contains three integer numbers Pj, Qj, and Cj separated by spaces, where Pi, Qi (-1000 ≤ Pj, Qj ≤ 1000) are the coordinates of the fallout shelter, and Cj (1 ≤ Cj ≤ 1000) is the capacity of this shelter.   The description of The City Council's evacuation plan follows on the next N lines. Each line represents an evacuation plan for a single building (in the order they are given in The City description). The evacuation plan of ith municipal building consists of M integer numbers E i,j separated by spaces. E i,j (0 ≤ E i,j ≤ 1000) is a number of workers that shall evacuate from the i th municipal building to the j th fallout shelter.   The plan in the input file is guaranteed to be valid. Namely, it calls for an evacuation of the exact number of workers that are actually working in any given municipal building according to The City description and does not exceed the capacity of any given fallout shelter.   

 The input contains a single line of characters from 'A' to 'Z' with at least 1 and at most 100 characters.

 On the first line of the input there is a single integer number N (0 ≤ N ≤ 100) - the number of ghosts detected by the ectoplasmic scanner of Ecto-1. The following N lines describe detected ghosts - one ghost per line. The description of ith ghost (ghosts are numbered from 1 to N) consists of 4 integer numbers Xi, Yi, Zi, and Ri, separated by spaces. Xi, Yi, Zi (1 ≤ Xi, Yi, Zi ≤ 10000) are the coordinates of the ghost's center, and Ri (1 ≤ Ri ≤ min(Xi, Yi, Zi)) is the ghost's radius. Because ghosts are ectoplasmic, they can be arbitrarily placed in respect to each others. They can intersect, fit inside each other, coincide with each other, etc.

 The first line of the input contains positive integer numbers separated by spaces in the following order: N, HP H, MP H, HP M, N M, V, dH. (1 ≤ N ≤ 10, 2 ≤ HP H ≤ 100, 1 ≤ MP H ≤ 50, 1 ≤ HP M ≤ 10, 1 ≤ N M ≤ 10, 1 ≤ V ≤ N, 1 ≤ dH < HP H). The second line of the input file contains N integer numbers L1, L2, ..., L N (1 ≤ LP ≤ 10), separated by spaces.

 The first line of the input consists of a positive integer n, which is the number of datasets that follow. Each of the n following lines contain one data set. The dataset is a sequence of 5 cards separated by a space. Each card is given by a one or two character value and a one character suit as described in the first paragraph.

 The input describes the cuts that were performed on a single rectangular plate. The first line of the input file contains three integer numbers M, N, and K, separated by spaces. M and N (1 ≤ M, N ≤ 50) are the dimensions of the plate, and K (0 ≤ K ≤ 296) is the number of cuts. Next K lines describe the cuts. ith cut is described by four integer numbers X i,1, Y i,1, X i,2, and Y i,2, separated by spaces, that represent the starting and ending point of the cut. Both starting (X i,1, Y i,1) and ending (X i,2, Y i,2) points of the cut are situated on the plate's border. Both points of the cut are different and the cut goes through the plate. Here, the coordinates by the X axis run from 0 to M, and the coordinates by the Y axis run from 0 to N. All cuts are different.

 * Line 1: A single integer, N   * Lines 2..N: These lines describe the placement of bales 2..N in the form "j X". Line 2 describes bale 2; line 3 describes bale 3; and so on. The letter "X" is one of: "L" (left), "R" (right), "F" (front), "B" (back), "O" (over), or "U" (under). The bales can be glued and require no underlying support if extended over an empty space.  

 * Line 1: A single integer, P   * Lines 2..P+1: Each line contains a single integer that is the strength of a potion. Line 2 gives the strength of the first potion; line 3 gives the strength of the second potion; and so on.  

 * Line 1: A single integer, N   * Lines 2..N: These N-1 lines describe the number of cows that precede a given cow in line and have brands smaller than that cow. Of course, no cows precede the first cow in line, so she is not listed. Line 2 of the input describes the number of preceding cows whose brands are smaller than the cow in slot #2; line 3 describes the number of preceding cows whose brands are smaller than the cow in slot #3; and so on.  

 * Line 1: A single integer N, the number of cows   * Lines 2..N+1: Two space-separated integers Si and Fi, respectively the smartness and funness for each cow.  

 * Line 1: Two space-separated integers: R and C   * Lines 2..R+1: The grid that the cows form, with an uppercase letter denoting each cow's breed. Each of the R input lines has C characters with no space or other intervening character.  

 * Line 1: Two space-separated integers, N and M   * Lines 2..1+M: Two space-separated numbers A and B, meaning that A thinks B is popular.  

 * Line 1: A single integer, N   * Lines 2..N+1: Two space-separated integers x and y specifying coordinate of each farm  

 The input will contain one or more lines, each line containing one integer n with 3 <= n < 150, representing the number of cities in the country.  Input is terminated by a value of zero (0) for n.

 * Line 1: A single integer: N   * Lines 2..N+1: Each line contains two integers in the range 1..N. The first integer is the wire ID of the wire in the top wire holder; the second integer is the wire ID of the wire in the bottom holder. Line 2 describes the wires connected to top slot 1 and bottom slot 1, respectively; line 3 describes the wires connected to top and bottom slot 2, respectively; and so on.   

 * Line 1: Three separated integers: N, P, and C   * Lines 2..N+1: Each line contains an integer X, in the range 1..P-1, specifying that a member of the Cowpulet herd grazes between fence posts X and X+1. Multiple Cowpulets can graze between any given pair of fence posts.  

 * Line 1: A single line with a ten digit ISBN number that contains '?' in a single position  

 Input contains a single number, without leading or trailing blanks, giving the value of k. As promised, k <= 63.

 The first line of the input file contains an integer number N -- the number of pairs you should build cartesian tree out of (1 <= N <= 50 000). The following N lines contain two numbers each -- given pairs (ki, ai). For each pair |ki|, |ai| <= 30 000. All main keys and all auxiliary keys are different, i.e. ki != kj and ai != aj for each i != j.

 The first line of input contains a single positive integer from 1 through 1000. It represents the number of data sets to follow. The processing for each data set is identical. The data sets appear on the following lines, one data set per line.   For each data set, the line of input consists of three strings, separated by a single space. All strings are composed of upper and lower case letters only. The length of the third string is always the sum of the lengths of the first two strings. The first two strings will have lengths between 1 and 200 characters, inclusive.  

 There will be multiple cases to consider from input. The first input will be a number C (0 < C <= 50) indicating how many cases with which you will deal. Following this number will be pairs of integers giving values for N and M, in that order. You are guaranteed that 1 <= N <= 10, 1 <= M <= 2000, and N <= M. Each N M pair will occur on a line of its own. N and M will be separated by a single space.

 Each data set will appear in one line of the input. An input line consists of the number, n, of cylinders on the bottom row followed by n floating point values giving the x coordinates of the centers of the cylinders (the y coordinates are all 1.0 since the cylinders are resting on the floor (y = 0.0)). The value of n will be between 1 and 10 (inclusive). The end of input is signaled by a value of n = 0. The distance between adjacent centers will be at least 2.0 (so the cylinders do not overlap) but no more than 3.4 (cylinders at level k will never touch cylinders at level k â€“ 2).

 There are one or more test cases in the input. Each case starts with a line giving two integers N and M, where N is the number of rows of the map, and M is the number of columns. The rest of the input will be N lines describing the map. You may assume both N and M are between 2 and 100, inclusive. There will be the same number of 'H's and 'm's on the map; and there will be at most 100 houses. Input will terminate with 0 0 for N and M.

 Input file consists of only one integer number n.

 The first line contains two integer numbers N and M (1 <= N <= 1000, 0 <= M <= 100000). Stations are numbered from 1 to N. Each of the following M lines contains three integer numbers A, B and T (1 <= A, B <= N, 1 <= T <= 100). It shows that there is a directed sideway from A-th station to B-th station with time T.   The last line consists of three integer numbers S, T and K (1 <= S, T <= N, 1 <= K <= 1000).

 There is no input for this problem

 The input will contain several possible cases, each including a route map, identification of the start and destination villages, and the maximum distance Jill is willing to travel.  Each case appears in the input as a set of integers separated by blanks and/or ends of lines. The order and interpretation of these integers in each case is as follows:    NV – the number of villages in the route map. This number will be no larger than 20.  NR – the number of roads that appear in the route map. Each road connects a distinct pair of villages.  NR triples, one for each road, containing C1, C2, and DIST – C1 and C2 identify two villages connected by a road, and DIST gives the distance between these villages on that road.  SV, DV – the numbers associated with the start and destination villages; the villages are numbered 1 to NV.  MAXDIST – the maximum distance Jill is willing to travel (one way).  The data for the last case will be followed by a single integer with the value –1.  

  The first field on a line of input consists of a maximum step number (max_step) for the automata to run. This number can be up to 32 bits. Values are chosen such that the problem is solvable within the given time limits given the input specifications.  The second field on a line of input consists of an odd-length string of characters which represent the "squares" on the line. These will not be longer than 256 characters in length, and can be shorter. The size of the second field determines n -- the number of squares in a particular automata.  The character 'W' represents a white square and a 'B' represents a black square.  If an input string contains characters other than 'W' or 'B', or if the input string is an invalid string (not a properly bounded string as described previously), then obviously the string cannot be found by any of the automata, and the output will be LINE # NONE as illustrated in the sample output.  Each line in the input file will have a terminating newline character.  Input is terminated by a single line with the characters "END OF INPUT" as illustrated below. The END OF INPUT line should not be processed by your search algorithm. 

 The input will contain multiple cases. The input for each case will begin with an integer N (no larger than 12) that indicates the number of times Jill invested in her mutual fund. This will be followed by N + 1 pairs, each pair containing an integer and a real number. The integer represents a month number (1 or larger) and the real number represents a dollar amount. The first N pairs give the month and amount of each of Jill’s N investments in the mutual fund, and the last pair indicates the value of the investment at the end of the specified month. There will be one or more whitespace characters (blanks, tabs, and/or ends of lines) between the input numbers. You may assume that the month numbers are given in ascending order.  Input for the last case will be followed by a single integer –1.

 The first line of the input file contains two integer numbers N and M -- the number of vertices and edges in G respectively (3 <= N <= 10 000, M <= 100 000). 2M integer numbers follow -- each pair represents vertices connected by the corresponding edge (vertices are numbered from 1 to N). It is guaranteed that each edge occurs exactly once in the input file and that there are no loops (i.e. ends of each edge are distinct).

 The input contains integer numbers, separated by spaces and/or line feeds. At the beginning of the file  there is the station description L, M, and P1 ... PM, followed by the train description N and D2 ... DN.

 The only line of the input contains two numbers b and n separated by a single space, the base b of the scale of notation (2 <= b <= 36) and required length n (1 <= n <= 2000).

 The first line of the input contains two integer numbers N and M (1 <= N <= 10 000, 2 <= M <= 1 000). The second line of the input file contains N integer numbers ranging from 1 to M -- a1, a2, . . . aN.

 At the first line there is a positive integer N stating the number of assignments to follow. Each assignment consists of two lines. The first line contains an integer number k, 1 <= k <= 30. At the second line, there is the Hyper-secret Code consisting of exactly k characters. Each of the characters is either 0 or 1.  

 For each case the first line contains two integers N and M separated by a single space – the number of vertices (1 ≤ N ≤ 100) and edges (0 ≤ M ≤ 5000) of X. The next M lines contain two integers si and ti each – the beginning and the end of i-th edge respectively. The next line contains K (1 ≤ K ≤ 20) – the number of formulae to be processed. The following K lines contain one formula each. A formula is represented as a string consisting of tokens 0, 1, A … Z, (, ), ~, &, |, =>, =. The last five tokens stand for ¬, ∧, ∨, ⇒ and ≡ respectively. Tokens can be separated by an arbitrary number of spaces. No line will be longer than 254 characters. All formulae in the file will be syntactically correct. Also you may assume that the number H = ||Η|| of elements of Η doesn’t exceed 100 and that the sum ∑1 ≤ j ≤ K Hv[j] ≤ 106 where v[j] is the number of different variables used in j-th formula.

 The file contains six positive integer numbers not exceeding 1000 separated by spaces, each number is one of the edge lengths of the pyramid ABCD. The order of the edges is the following: AB, AC, AD, BC, BD, CD.

 The first line of the input file contains the number of the sons of the king (integer number less or equal to one hundred). The second line contains the positive integer number not exceeding three, the exponent in the formula used to calculate the chance of defeating barbarians. The third line contains the list of mental potentials of kingâ€™s sons -- all integer numbers, not greater than three by their absolute value.

 At the first line there is a positive integer N stating the number of assignments to follow. Each assignment consists of exactly one line in the form "hour:minute:second day.month.year" which is the date in the classic form (usual in most of European countries). The date is always valid, 2000 <= year <= 50000. 

 At the first line there is a positive integer N stating the number of assignments to follow. Each assignment consists of exactly two lines. At the first line of each assignment, there are two integers n and k, 1 <= k <= n <= 12 stating the total number of representatives (n) and the number of them which can fit into a single picture (k). At the second line of the assignment, there is exactly k positive numbers x1, x2, ... xk, each of them 1 <= xi <= n. No number can appear more than once on this line.  

 At the first line there is a positive integer N stating the number of assignments to follow. Each assignment begins with three integer numbers X, Y, Z on a single line, separated by spaces. 1 <= X,Y,Z <= 100. All the flooded cubes are inside a box with the size X, Y, and Z meters. All cubes outside this box are filled with rock. After the first line, the description of Z layers follows, starting from the top one. Each layer begins with a line with a single integer number P that denotes the number of flooded cubes in that layer. Then P lines follow, each of them consisting of two integer numbers R and S, 1 <= R <= X, 1 <= S <= Y. These number are coordinates of one flooded cube, given in meters.  

 At the first line there is a positive integer N stating the number of assignments to follow. Each assignment consists of two lines. The first line contains an integer number M stating the number of regions. At the second line, there are exactly M numbers separated by spaces. These numbers state the number of voters in each of the regions. All the number are possitive and less or equal to 100000.  

 At the first line there is a positive integer N stating the number of assignments to follow. Each assignment begins with a line consisting of two integers R and S, separated by space. R is the number of rows in the Parliament, S is the number of seats in every row (all rows are of the same size). It is known that no Parliament can have more than 1000 rows, nor more than 1000 seats in a row. Then R lines follow. Each of them describes one row of the Parliament, in sequence starting with the first one. Each line contains exactly S numbers separated by spaces. These numbers are score values of each seat in the given row, in sequence starting with the first one. The total score of all seats in the Parliament will always fit into the standard int or integer type.   Then the line containing the single integer number D follows. It is the number of queries. Then D lines follow, each specifying a single query. The query consists of four coordinates separated by spaces, R1, S1, R2, S2 (in that order), 1 <= R1 <= R2 <= R <= 1000, 1 <= S1 <= S2 <= S <= 1000. The coordinates designate that representatives are sitting at the seats forming a rectangle. The seats are in rows from R1 to R2 (including them) and in each of these row the seats from S1 to S2 (including them) are occupied.  

 At the first line there is a positive integer N stating the number of assignments to follow. Each assignment consists of exactly two lines. There is an integer non-negative number M at the first line of each assignment. The next line contains the succession of exactly M numbers (x1, x2, ... xM) separated by spaces.

 At the first line there is a positive integer N stating the number of assignments to follow. Each assignment consists of exactly two lines of text, each of them contains at most 10000 characters. The end-of-line character is not considered to be a part of the text. 

 The input will contain one or more test cases.  Each test case consists of one line containing two integers n (n>=1) and k (0<=k<=n).  Input is terminated by two zeroes for n and k. 

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.   A single data set has 3 components:    Start line - A single line, "START"  Dieter list - A series of 1 to 10 (inclusive) single lines consisting of three fields, with each field separated from the others by a single space:   Name - The dieter?s first name. This will be a text string containing 1 to 20 (inclusive) alphanumeric characters (no spaces).  Days On Diet - The number of days the dieter has been on the "Do You Want To Diet" as of the day of the talk show. This will be a non-zero positive integer strictly less than 1000.  Starting Weight - The weight, in pounds, of the dieter just before starting the diet. This will be a non-zero positive integer strictly less than 10,000.    End line - A single line, "END"   Here are some facts that may be useful:    All dieters lost exactly 1 pound every day they were on the diet, as advertised.  Nobody stayed on the diet long enough to weigh less than 1 pound at the time of the show.  All dieters in a given input set will have different weights on the day of the show.  All dieters in a given input set will have different names.   

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.   A single data set has 3 components:    Start line - A single line, "START N", where N is a positive integer in the range 1 <= N <= 100 which indicated the number of years that must be calculated.  Starting Map - A map showing the starting position. The map consists of a set of A lines, each describing B terrain squares. Note that the actual size of the A x B map is not given within the input set but will be in the range 1 to 20 inclusive. The terrain squares in each line are separated from one another by a single space, and each terrain square is a pair "identifier number." The identifier may be one of:      '.' - (period) Field, without wheat     'w' - (lower-case) Field, with wheat     'M' - (upper-case) Mountain     'W' - (upper-case) Water     'Z' - (upper-case) An integer in the range [0..n-1], where n is the number of groups on the map, and 1 <= n <= 10.     This group identifier will be unique for each group on a given map.     The number is an integer in the range [0,999], inclusive. It is only meaningful for groups (detailing how many people are left in that group), or wheat (which is the amount of wheat remaining).  End line - A single line, "END"   

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.   A single data set has 5 components:    Start line - A single line, "START"  Number of Treasures - A single line with a single integer, t, where 1 <= t <= 8, indicating the number of treasures.  Number of Hunters - A single line with a single integer, h, where 1 <= h <= 6, indicating the number of treasure hunters.  Treasure Value List - A series of h lines, one for each hunter in sequence (line 1 for hunter 1, line 2 for hunter 2, etc.). Each line contains a space-separated list of estimated treasure values for that hunter. The first estimate on each line is for treasure 1, the second is for treasure 2, etc., and an estimate for each treasure will appear for every hunter. Each estimate will be a positive integer strictly less than 10000.  End line - A single line, "END"   

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will describe the starting conditions of the interstate for a run and will be formatted according to the following description. There will be no blank lines separating data sets.    Start line - A single line, "START"  The next 8 lines will represent rows 1-8 (the "lanes" of the interstate), starting with row 1. Each line will consist of 10 integers, separated by single spaces. Each integer will represent a column for that row and will be either:   0, representing no vehicle occupying that square, or  a non-zero integer N in the range 1 <= N <= 9, representing a vehicle is occupying that square and the non-zero integer is its speed. NOTE: The given speeds will NOT result in vehicles moving over other vehicles or into a square occupied by another vehicle (no accidents), since all the vehicles move at the same time and all vehicles on a given row are guaranteed to move at the same speed.    End line - A single line, "END"   

 The input will contain several test cases.  Each test case consists of two texts. Each text is given as a sequence of lower-case words, separated by whitespace, but with no punctuation. Words will be less than 30 characters long. Both texts will contain less than 100 words and will be terminated by a line containing a single '#'.  Input is terminated by end of file. 

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets. The maximum dimensions of the board are 10 squares wide by 10 squares high. The maximum number of chess pieces that will start out on the board is 15.   A single data set has 5 components:    Start line - A single line, "START"  Board Width (# of columns) - A single line containing a positive integer, w, indicating the number of squares across the width of the board where 1 <= w <= 10.  Board Height (# of rows) - A single line containing a positive integer, h, indicating the number of squares that dictate the height of the board, where 1 <= h <= 10.  Board Layout - h lines, each corresponding to a row of the board. The first line corresponds to the first row, the second line to the second row, and so on. Each row consists of a space-separated list of single letters, each representing the contents of the corresponding square on the board according to the following list:      K - King     Q - Queen     R - Rook     B - Bishop     N - Knight     E - Empty Square     End line - A single line, "END"   

 Input to this problem will consist of a (non-empty) series of up to 20 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.   A single data set has 5 components:    Start line - A single line, "START N", where N is a positive integer in the range 1 <= N <= 10 which indicates the number of bullets fired at the target.  Target Velocity - A single line representing the velocity of the target.  Bullet Velocity List - A non-empty set of up to 10 lines. Each line will contain the velocity of a single bullet.  Target - A nonempty series of up to 30 lines. Each line will consist of up to 30 characters (not counting the end-of-line). Each non-whitespace character represents a piece of the target that can be hit by a bullet. The target will not contain numbers, asterisks, or commas, but any other characters may be used. The target grid is assumed rectangular for the purposes of determining its center, and its dimensions are that of the longest row/column (this will not exceed 30 blocks in either direction). Each block of the target grid is 10cm X 10cm.  End line - A single line, "END"    Note:    The target will be the first line after the last bullet velocity line with a first character that is neither a number nor a minus sign ('-') followed by a number.  The bullets are assumed to have been fired at the same instant, from a point exactly 10 meters due South of the center of target, and at a height equal to half the height of the target.  Each bullet (and the target) velocity will be listed as a three-component velocity vector. The velocities are in meters per second, and of the format:        ,          ,             with no spaces. Velocities may be negative values.           

 Input to this problem will consist of a (non-empty) series of up to 10 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.   Each data set consists of 4 components:    Start Line - A single line, "START D N", where 3 <= D <= 10 and 0 <= N <= 15  Initial Board Layout - Consists of a D x D matrix of integers ranging from 1 to (D2 - 1) inclusive (where D is the Board Dimension), and an 'X' to denote the missing piece. This matrix represents the layout of the game board prior to the solution attempt.  Solved Board Layout - Consists of a D x D matrix of integers ranging from 1 to (D2 - 1) inclusive (where D is the Board Dimension), and an 'X' to denote the missing piece. This matrix represents the final layout of the game board necessary to successfully solve the puzzle.  End Line - A single line, "END"    Notes:    On the "Start" line of the data set, D represents the dimensions of the puzzle board.  On the "Start" line of the data set, N represents the number of moves the player wants to be able to solve the puzzle within.  Both game board layout matrices will contain ALL numbers within the range mentioned above (inclusive), with no missing or repeated numbers, and one 'X' (missing piece).    

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.   A single data set has 5 components:    Start line - A single line, "START N", where 1 <= N <= 10.  Slice list - A series of N slices. Each slice is an N x N matrix representing a horizontal slice through the asteroid field. Each position in the matrix will be one of two values:      'O' - (the letter "oh") Empty space     'X' - (upper-case) Asteroid present      Starting Position - A single line, "A B C", denoting the [A,B,C] coordinates of your craft's starting position. The coordinate values will be integers separated by individual spaces.  Target Position - A single line, "D E F", denoting the [D,E,F] coordinates of your target's position. The coordinate values will be integers separated by individual spaces.  End line - A single line, "END"   The origin of the coordinate system is [0,0,0]. Therefore, each component of each coordinate vector will be an integer between 0 and N-1, inclusive.   The first coordinate in a set indicates the column. Left column = 0.  The second coordinate in a set indicates the row. Top row = 0.  The third coordinate in a set indicates the slice. First slice = 0.   Both the Starting Position and the Target Position will be in empty space.   

 * Line 1: Two space-separated integers: R and C   * Lines 2..R+1: Each line contains a string of C characters, with '*' representing a muddy patch, and '.' representing a grassy patch. No spaces are present.

 * Line 1: Two space-separated integers, W and H   * Lines 2..H+1: Line i+1 contains row i of bowl heights: W space-separated integers each of which represents the height B of a square in the bowl. The first integer is the height of column 1, the second integers is the height of column 2, and so on.

 * Line 1: Two space-separated integers: N and B   * Lines 2..N+1: Line i+1 contains a single integer, U_i, between 0 and 200,000 inclusive

 A single line with a single integer, N.

 * Line 1: Two integers, N and M.   * Lines 2..M+1: Two integers denoting a pair of fields connected by a path.

 There will be no more than 10 test cases. Each case starts with a line containing an integer N, which is the number of ACM particles in the test case. N lines then follow. Each line contains three integers x, y, r, where (x, y) is the position of the ACM particle in the 2D picture and r can be 0 or 1, standing for the hydrophilic or hydrophobic type ACM respectively. The absolute value of x, y will be no larger than 10000. You may assume that N is no more than 1000. N = 0 signifies the end of the input and need not be processed. Fig.2 shows the positions of ACM particles and the best ICPC position for the last test case in the sample input. 

 * Line 1: N   * Lines 2..N+1: The location of each cow (in the range 0..1,000,000,000).

 The input contains several test cases. In each case, the first line contains an integer N (the number of children, 1 <= N <= 1000), and the second line contains N capitals including 'S', 'F' and 'C, which are separated by a single space and represent the gestures of N children in clockwise order. Here 'S' expresses the Stone, 'F' expresses the Forfex, and 'C' expresses the Cloth.

 The first line of the input contains a single integer T, which is the number of test cases. Then T cases follow. Each test case contains multiple lines. The first line consists of two integers N (1 <= N <= 50) and M, which indicate the number of vertices and the number of edges. In the following M line, each contains a pair of integers a and b (1 <= a, b <= N), which means that there is an edge between a and b.

 The input consists of several lines, and in each line there is a test case. At the beginning of a line, there is an integer M (1 <= M <=20), which is the number of piles. Then comes M positive integers, which are not larger than 10000000. These M integers represent the number of matches in each pile. 

 The input will contain one or more test cases. Each test case begins with the number of teams t (1<=t<=1000). Then t team descriptions follow, each one consisting of the number of elements belonging to the team and the elements themselves. Elements are integers in the range 0 - 999999. A team may consist of up to 1000 elements.  Finally, a list of commands follows. There are three different kinds of commands:    ENQUEUE x - enter element x into the team queue  DEQUEUE - process the first element and remove it from the queue  STOP - end of test case   The input will be terminated by a value of 0 for t.  Warning: A test case may contain up to 200000 (two hundred thousand) commands, so the implementation of the team queue should be efficient: both enqueing and dequeuing of an element should only take constant time.

 The input contains several test cases. In each case, the first line contains an integer N (3<= N <= 100). Then come N line, in each line there are two integers Xi and Yi (0 <= Xi, Yi < 100), which is the coordinates of an initial point.

 The first line contains two integers N and d (1 <= N <= 1001, 0 <= d <= 20000). Here N is the number of computers, which are numbered from 1 to N, and D is the maximum distance two computers can communicate directly. In the next N lines, each contains two integers xi, yi (0 <= xi, yi <= 10000), which is the coordinate of N computers. From the (N+1)-th line to the end of input, there are operations, which are carried out one by one. Each line contains an operation in one of following two formats:  1. "O p" (1 <= p <= N), which means repairing computer p.  2. "S p q" (1 <= p, q <= N), which means testing whether computer p and q can communicate.   The input will not exceed 300000 lines.  

 In the first 5 lines each contains 5 chars, referring to the map. '1' means the square is unmovable, other chars mean the square is movable, 'M' means the position of the marine, 'Z' and 'z' means the positions of two zerglings. The squares where the marine and zerglings stay at first are also movable. The sixth line of the input contains two integers m and z, refering to the HP of the marine and the zerglings.

 The input consists of several test cases. In each test case, there are six integers N, M, pt2(2), pt3(2), reb(2), def(2) in a single line. (Assume you are player 1, and your opponent is player2.)

 Input consists of a number of cases. Each case is represented by a line containing three unsigned integers. The first, b, is a decimal number between 2 and 10. The second, p, contains up to 1000 digits between 0 and b-1. The third, m, contains up to 9 digits between 0 and b-1. The last case is followed by a line containing 0.

 The input contains several cases. For each case, the first line contains an integer n (1 <= n <= 300), the number of courses in Li Ming's college. The following n lines represent n different courses. In each line, the first number is an integer t (1 <= t <= 7*12), the different time when students can go to study the course. Then come t pairs of integers p (1 <= p <= 7) and q (1 <= q <= 12), which mean that the course will be taught at the q-th class on the p-th day of a week.

 The input will contain one or more test cases. Om the first line of each test case there is an integer n (1<=n<=30), representing the number of different currencies. The next n lines each contain the name of one currency. Within a name no spaces will appear. The next line contains one integer m, representing the length of the table to follow. The last m lines each contain the name ci of a source currency, a real number rij which represents the exchange rate from ci to cj and a name cj of the destination currency. Exchanges which do not appear in the table are impossible.  Test cases are separated from each other by a blank line. Input is terminated by a value of zero (0) for n. 

 The input will contain one or more test cases. The first line of each test case contains an integer n,  representing the number of different blocks in the following data set. The maximum value for n is 30.  Each of the next n lines contains three integers representing the values xi, yi and zi.  Input is terminated by a value of zero (0) for n. 

 The input will contain one or more test cases. Each test case consists of one line containing six real numbers x1,y1, x2,y2,x3,y3, representing the coordinates of the three points. The diameter of the circle determined by the three points will never exceed a million. Input is terminated by end of file.

 The first line will be "#define quadtree_width n" where n is the picture size in pixels. (The picture is quadratic: n*n pixels)  The second line will be "#define quadtree_height n" accordingly.  The third line will be "static char quadtree_bits[] = {".  Then, n lines will follow, each one encoding one pixel row of the picture. There will be n/8 hexadecimal numbers per line.  Each hexadecimal number is composed of 8 bits that encode 8 pixels from left to right (where the leftmost bit has the value 1 and the rightmost bit has the value 128). The hexadecimal numbers are printed in the form 0xdd where d is one character of the set { 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f }.  Example: The 8 pixels WBBBBWWB are written as 0x9e. (2+4+8+16+128 = 158 = 0x9e)  After each hexadecimal number, a comma follows.  The last line will be "};".   Note: The comments (enclosed by /* and */) in the sample input are not part of the input. They should help to explain the XBM format  

 The input will contain one or more test cases. Each test case consists of one line containing two squares separated by one space. A square is a string consisting of a letter (a-h) representing the column and a digit (1-8) representing the row on the chessboard.

 The input will contain one or more test cases. Each test case consists of one line containing several integers separated from each other by spaces. The first integer on the line will be the number k (6 < k < 13). Then k integers, specifying the set S, will follow in ascending order. Input will be terminated by a value of zero (0) for k.

 Input consists of two parts: a list of matrices and a list of expressions.  The first line of the input file contains one integer n (1 <= n <= 26), representing the number of matrices in the first part. The next n lines each contain one capital letter, specifying the name of the matrix, and two integers, specifying the number of rows and columns of the matrix.  The second part of the input file strictly adheres to the following syntax (given in EBNF):   SecondPart = Line { Line }      Line       = Expression        Expression = Matrix | "(" Expression Expression ")"    Matrix     = "A" | "B" | "C" | ... | "X" | "Y" | "Z"     

 The input consists of one or more test cases. Each test case consists of one integer n with 1 <= n <= 5842. Input is terminated by a value of zero (0) for n.

 The input will contain one or more test cases. Each test case consists of one line containing one integer n (1<=n<=100). Input is terminated by a value of zero (0) for n. 

 The input consists of a number of dungeons. Each dungeon description starts with a line containing three integers L, R and C (all limited to 30 in size).  L is the number of levels making up the dungeon.  R and C are the number of rows and columns making up the plan of each level.  Then there will follow L blocks of R lines each containing C characters. Each character describes one cell of the dungeon. A cell full of rock is indicated by a '#' and empty cells are represented by a '.'. Your starting position is indicated by 'S' and the exit by the letter 'E'. There's a single blank line after each level. Input is terminated by three zeroes for L, R and C. 

 The input will contain a number of equations, each one on a separate line. All equations are strings of less than 100 characters which strictly adhere to the following grammar (given in EBNF):   Equation   := Expression '=' ExpressionExpression := Term { ('+' | '-') Term }Term       := Factor { '*' Factor }Factor     := Number | 'x' | '(' Expression ')'Number     := Digit | Digit NumberDigit      := '0' | '1' | ... | '9' Although the grammar would allow to construct non-linear equations like "x*x=25", we guarantee that all equations occuring in the input file will be linear in x. We further guarantee that all sub-expressions of an equation will be linear in x too. That means, there won't be test cases like x*x-x*x+x=0 which is a linear equation but contains non-linear sub-expressions (x*x).  Note that all numbers occuring in the input are non-negative integers, while the solution for x is a real number.

 The input will contain one or more test cases. The first line of each test case will contain the number of stones n (2<=n<=200). The next n lines each contain two integers xi,yi (0 <= xi,yi <= 1000) representing the coordinates of stone #i. Stone #1 is Freddy's stone, stone #2 is Fiona's stone, the other n-2 stones are unoccupied. There's a blank line following each test case. Input is terminated by a value of zero (0) for n. 

 The input will consist of two parts: a list of cities and a list of queries.   City List The city list consists of up to 100 lines, one line per city. Each line will contain a string ci and two real numbers lati and longi, representing the city name, its latitude and its longitude, respectively.  The city name will be shorter than 30 characters and will not contain white-space characters.  The latitude will be between -90 (South Pole) and +90 (North Pole). The longitude will be between -180 and +180 where negative numbers denote locations west of the meridian and positive numbers denote locations east of the meridian. (The meridian passes through Greenwich, London.)  The city list will be terminated by a line consisting of a single "#".   Query List Each line will contain two city names A and B.  The query list will be terminated by the line "# #". 

 The input will contain one or more test cases.  Each test case consists of one line containing two strings preord and inord, representing the preorder traversal and inorder traversal of a binary tree. Both strings consist of unique capital letters. (Thus they are not longer than 26 characters.)  Input is terminated by end of file.   

 The first line of the input will contain the number of test cases.  Each test case will consist of one line containing exactly two data fields and some additional arbitrary words. A data field will be of the form I=xA, U=xV or P=xW, where x is a real number. Directly before the unit (A,V or W) one of the prefixes m (milli), k (kilo) and M (Mega) may also occur. To summarize it: Data fields adhere to the following grammar:  DataField ::= Concept '=' RealNumber [Prefix] Unit   Concept   ::= 'P' | 'U' | 'I'Prefix    ::= 'm' | 'k' | 'M'Unit      ::= 'W' | 'V' | 'A' Additional assertions:    The equal sign ('=') will never occur in an other context than within a data field.  There is no whitespace (tabs,blanks) inside a data field.  Either P and U, P and I, or U and I will be given.  

 The input will contain one or more test cases.  Each test case starts with a line containing two integers: the number of travellers n (2<=n<=20) and the number of transactions t (1<=t<=1000). On the next n lines the names of the travellers are given, one per line. The names only consist of less than 10 alphabetic characters and contain no whitespace. On the following t lines, the transactions are given in the format name1 name2 amount where name1 is the person who gave amount dollars to name2. The amount will always be a non-negative integer less than 10000.  Input will be terminated by two values of 0 for n and t. 

 The input will contain one or more test cases.  The first line of each test case contains two integers: the number of nodes n (2<=n<=25) and the number of edges m (1<=m<=25). The next m lines describe the m edges. Each edge is given by the numbers of the two nodes connected by it. Nodes are numbered from 0 to n-1. Edges are undirected. Nodes have degrees of three or less. The network is not neccessarily connected.  Input will be terminated by two values of 0 for n and m. 

 The input will contain one or more test cases. The first line of each test case contains one integer n (n<100), representing the size of the matrix. On the next n lines, there will be n integers per line. No other integers than 0 and 1 will occur in the matrix. Input will be terminated by a value of 0 for n. 

 The input will contain just one test case.  The first 16 lines of the input file give the names of the 16 countries, from top to bottom according to the picture given above.  Next, there will follow a 16 x 16 integer matrix P where element pijgives the probability in percent that country #i defeats country #j in a direct match. Country #i means the i-th country from top to bottom given in the list of countries. In the picture above Brazil is #1 and Germany is #13, so p1,13=55 would mean that in a match between Brazil and Germany, Brazil wins with a probability of 55%.  Note that matches may not end with a draw, i.e. pij + pji = 100 for all i,j.

 The input will contain one or more test cases.  Each test case consists of one even integer n with 6 <= n < 1000000.  Input will be terminated by a value of 0 for n. 

 The input will contain one or more test cases. The first line of each test case will contain two integers: the number of cities n (2<=n<=200) and the number of road segments r (1<=r<=19900) making up the street network.  Then r lines will follow, each one describing one road segment by naming the two cities connected by the segment and giving the weight limit for trucks that use this segment. Names are not longer than 30 characters and do not contain white-space characters. Weight limits are integers in the range 0 - 10000. Roads can always be travelled in both directions.  The last line of the test case contains two city names: start and destination.  Input will be terminated by two values of 0 for n and r. 

 Each line of the input contains two strings that represent the names of the fruits that should be combined. All names have a maximum length of 100 and only consist of alphabetic characters.  Input is terminated by end of file. 

 The input contains one or more integers which represent Willi's numbers. Each number stands on its own in a separate line, directly followed by a newline. The honey comb numbers are all less than 100 000. 

 The input contains an integer n (8 <= n <= 512) on the first line, giving the size of the picture in pixels per row/column. n will always be a power of two.  On the second line, a string consisting of the letters B, W and Q follows. The string encodes a picture with n*n pixels with the quadtree scheme. 

 The first line of the input will contain a single number telling you the number of test cases.  Each test case specification begins with a single number telling you how many route specifications follow.  Each route specification consists of the names of two cities, the departure time from city one and the total travelling time. The times are in hours. Note that Vladimir can't use routes departing earlier than 18:00 or arriving later than 6:00.  There will be at most 100 cities and less than 1000 connections. No route takes less than one hour and more than 24 hours. (Note that Vladimir can use only routes with a maximum of 12 hours travel time (from dusk till dawn).) All city names are shorter than 32 characters.  The last line contains two city names. The first is Vladimir's start city, the second is Vladimir's destination.

 The input will consist of one or more test cases. Each test case adheres to the following format:    On the first line there will be one integer n (1 <= n <= 20), representing the number of teams in the group.  On the next n lines, the names of the teams will follow. Names are always shorter than 30 characters and do not contain whitespace.  On the next line, there will be an integer g, representing the number of completed games.  Finally, g lines will follow, each one describing one completed game in the form team1 team2 goals1 goals2.  You may further assume that at most 10 games will be remaining and each team has at least one remaining game to play. (This simplifies the problem a little.)   Input will be terminated by a value of zero (0) for n. 

 The input consists of one or more lines. Each line contains one expression that you have to evaluate. Expressions are syntactically correct and only consist of the characters:    '{' and '}'  the elements 'A' to 'Z' meaning friend Arthur to Zora.  the operations '+', '-' and '*'  '(' and ')' for grouping operations  the newline character '\n' marking the end of an expression.   A line is never longer than 255 characters.

 The input consists of a text you should display. This text consists of words and HTML tags separated by one or more spaces, tabulators or newlines.  A word is a sequence of letters, numbers and punctuation. For example, "abc,123" is one word, but "abc, 123" are two words, namely "abc," and "123". A word is always shorter than 81 characters and does not contain any '<' or '>'. All HTML tags are either <br> or <hr>. 

 Input consists of 1 or more datasets. A dataset is a line with 12 double-precision values separated by spaces. Each pair of values represents the X and Y distances respectively of a dart from the center of the board in inches. (the center is located at X = 0, Y = 0. The range of values are: -20.0<=X, Y<=20.0. Player one's darts are represented by the first 3 pairs of values, and player two's by the last 3 pairs of values. Input is terminated by the first value of a dataset being -100. 

 Input consists of lines of the form: RnCm. n represents the row number [1,300000000] and m represents the column number, 1<=m<=300000000. The values n and m define a single cell on the spreadsheet. Input terminates with the line: R0C0 (that is, n and m are 0). There will be no leading zeroes or extra spaces in the input.  

 The first line of the input specifies the number of spaceshipsN (0 < N <= 250 000) that are competing. Each of the next N lines describe the properties of one spaceship. The i+1th line describes the ith ship with two integers Xi and Vi, representing the starting position and the velocity of the ith spaceship (0 <= Xi <= 1 000 000, 0 < Vi < 100). The spaceships are ordered according to the starting position, i.e. X1 < X2 < . . . < XN. The starting position is the number of kilometers past the starting line where the spaceship starts, and the velocity is given in kilometers per second.

 The input for each problem instance will consist of two lines. The first line gives the number of rows, k, as a decimal integer. The second line contains the lengths of the rows from back to front (n1, n2,..., nk) as decimal integers separated by a single space. The problem set ends with a line with a row count of 0. There will never be more than 5 rows and the total number of students, N, (sum of the row lengths) will be at most 30. 

 Each line of the input gives a separate data set as a sequence of numbers separated by spaces. The first number on each line gives the number, N, of pancakes in the data set. The input ends when N is 0 (zero) with no other data on the line. The remainder of the data set are the numbers 1 through N in some order giving the initial pancake stack.   The numbers indicate the relative sizes of the pancakes. N will be, at most, 30. 

 The first line of input contains the parameters D and H in that order as decimal numbers (not necessarily integers). These values would be measured once at the beginning of the day and remain fixed through all rocket shots. Each succeeding line of input will contain the angles α , β and γ in that order (measured in degrees). The last line of input will contain at least one value less than or equal to zero. Other than the last line indicating the end of data all angles will be strictly between 0 and 90 degrees. 

 The input is a sequence of problem instances. Each problem instance begins with a line containing the row-count of the array, the column-count of the array and the number-of-regions to fill as decimal integers. Rows are counted from top to bottom beginning with 1. Columns are counted from left to right beginning with 1. The input ends with a row-count of 0. Row-count will be at most 47 and column-count will be at most 63.   The first line of each problem instance is followed by region descriptions for number-of-regions regions. Each region description begins with a line containing: a single character to be used to fill the region, the row number of the start pixel, the column number of the start pixel and the number of pixels in the boundary which will always be at least two. The region fill character will be distinct for each region within a problem instance. This line is followed by lines of direction codes (up = A, up right = B, etc.):              H  A  B           G     C           F  E  D describing the outline traversed clockwise. The start pixel may be any point on the outline.  

 Input is a sequence of problem instances. Each problem instance begins with a line containing 3 decimal numbers: row-count, column-count and minimum-number-of-pixels. This line is followed by row-count lines of column-count characters. Each character is either a period (.) for an unstained pixel or an upper-case `X' for a stained pixel. The input ends when the row-count is 0. Row-count will be at most 47, column-count will be at most 63 and minimum- number-of-pixels will be at least 2.  

 The input contains no more than 30 test cases. The first line of each test case contains 2 integers n, m (1<=n, m<=30), which is the size of the board. After this line, there will be n more lines. Each of these lines contains m strings, separated by single spaces. Each of these strings represents one block in the initial configuration. Each string always consists of two capital letters. The first letter is the symbol of the block. The second letter is always one of the letters `U',`D',`L',`R' and `S', which shows the block's moving attribute: up, down, left, right, and stand still respectively. There are no blank lines between test cases. The input ends with a line of two 0's: `0 0'. 

 The input consists of up to 500 lines. Each line contains two numbers a and b where 0 < a, b < 100000000. The input is terminated by a line `0 0', which is not considered as part of the input.

 The input consists of no more than 50 test cases. Each test case has only one line, which contains a positive integer n ( 1<=n < 65536). There are no blank lines between cases. A line with a single `0' terminates the input. 

 There are no more than 25 test cases. Ease case starts with a line containing an integer N >= 4, which is the number of instructions in the test case. The following N pairs of integers give the instructions and appear on a single line separated by single spaces. The first pair is the first instruction that gives the coordinates of the starting position. You may assume there are no more than 300 instructions in each test case, and all the integer coordinates are in the range (-300, 300). The input is terminated when N is 0. 

 The input consists of at most 20 test cases. The first line of each test case contains an integer n ( 1<=n<=1000), which is the width of the floor. The second line contains n integers, separated by single spaces. These integers describe the shape of the uncovered floor as mentioned above. The third line contains an integer m ( 1<=m<=100), which is the number of bricks available. After this is the detailed description of the m bricks.   Each brick description consists of 4 lines. The first line is a positive integer, which is the price of that brick in Gils. After this line, there are three lines, each consisting of three characters, which describe the shape of the brick. A dot character represents a space in the shape and a sharp character # represents a square block in the shape. You can be sure that the blocks are always connected to form the brick.   There is a line containing a zero after the last test case, which signifies the end of the input and should not be processed. 

 The input consists of no more than 30 test cases. Each test case has only one line that contains 24 numbers, which are the symbols of the blocks in the initial configuration. The rows of blocks are listed from top to bottom. For each row the blocks are listed from left to right. The numbers are separated by spaces. For example, the first test case in the sample input corresponds to the initial configuration in Fig.1. There are no blank lines between cases. There is a line containing a single `0' after the last test case that ends the input.  

 The input consists of up to 50 test cases. Each case starts with a positive integer n ( n<=1000) on the first line, which is the number of horses on each side. The next n integers on the second line are the speeds of Tian's horses. Then the next n integers on the third line are the speeds of the king's horses. The input ends with a line that has a single `0' after the last test case. 

 The input file starts with a number q (q<=20) on the first line, which is the number of test cases. Each test case starts with a line with two integers n and m, which are the number of islands and the number of bridges in the map, respectively. The next line contains n positive integers, the i-th number being the Vi value of island i. Each value is no more than 100. The following m lines are in the form x y, which indicates there is a (two way) bridge between island x and island y. Islands are numbered from 1 to n. You may assume there will be no more than 13 islands.  

 There will be at most 20 test cases. Ease case starts with a line containing two integers N and M. where N is the length of the contact list and M is the number of groups. N lines then follow. Each line contains a friend's name and the groups the friend could belong to. You can assume N is no more than 1000 and M is no more than 500. The names will contain alphabet letters only and will be no longer than 15 characters. No two friends have the same name. The group label is an integer between 0 and M - 1. After the last test case, there is a single line `0 0' that terminates the input.

 The first number in the input line, t (1 <= t <= 10) is the number of orders. Following this, t orders are written in the input. Each order starts with a line containing a street name, an arbitrary string of length at most 50 characters. The second line contains a single integer N (1 <= N <= 10), the number of sub-orders, followed by N lines of sub-orders. Sub-orders are of three kinds:    A single house number: in this case, the sub-order line contains only a single integer n (1 <= n <= 9999)  A series of house numbers: in this case, the sub-order line starts with a '+', followed by three integer numbers a, b, c (1 <= a, b, c <= 9999). This means that NarmakSung has to make plates for house numbers from a up to b with distance of c. That is, digit plates have to be made for house numbers a, a+c, a+2c, ..., b. We assume that a < b, b - a is a multiple of c, and c <= b - a.  A series of house numbers to be excluded: this kind of sub-orders specifies that a series of house numbers should not be made. In this case, the sub-order line starts with a '-', followed by three integer numbers with exactly the same conditions as in the previous case.  Note that if a house number is ordered more than once in two separate sub-orders, it is counted only once if it is not excluded at all (like number 100 in the second test case in the sample input). Also, if a house number is excluded somewhere in the test case, it cancels any order for that number, even if it appears later in the test case (like number 500 in the second sample). Note that it is possible to exclude some numbers that do not appear in other orders at all. In this case, these numbers are ignored (like 900 in the second sample).  

 The first line of the input contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains a single integer n (1 <= n <= 1000) which is the number of ropes. Following the first line, there is a single line containing n integers between 1 and 10000 which are the tear-off weights of the ropes, separated by blank characters.

 The first line contains a single integer t (1 <= t <= 10), the number of test cases. Each test case starts with a line, containing an integer M (1 <= M <= 10000), the number of common words in the test case. In each M subsequent line, there is a common word. Each common word contains at most 30 characters from the alphabet {a, b, c,..., z, +, *, /, ?}.

 In the first line of input, there is an integer t (1≤ t ≤10), the number of test cases, followed by the data for the test cases. Each line of a test case is a record of machine database or reports of watchman at the end of a day. Each line representing a machine record is like D–S–T, where S is a string of lower case letters, D is a date, formatted like YY/MM/DD, and T is a time stamp, formatted like HH:MM:SS. There is no blank character in this kind of input lines. Each line representing a watchman's report of a single day containing 1 ≤ k ≤ 40 names like the following:     D S1 S2 S3 ... Sk  Which means that at date D (with format YY/MM/DD), first person named S1 entered or left the factory, then the second person named S2, and so on. The date and the names are separated by one blank character. In a test case, there cannot be more than one line of kind watchman's report for the same date. The period of interest is no more than 30 days. Person names are not more than 15 characters and no two persons have the same name. Each test case terminates with a line containing a single # character. The company has at least one employee and at most 15 employees. Two machine records of a certain date may have the same time stamp. In this case, the watchman may record the corresponding events in any order.  

 The first line of the input contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains a single integer f (6 <= f <= 10000) which is the number of faces on the outer surface. Assume that the faces are numbered uniquely from 1 to f. The second line contains integer n, which is the number of unit edges between faces of the outer surface, followed by exactly n lines each containing a string of the form x+y or x-y forms. x and y are distinct integers (1 ≤ x, y ≤ f) representing two faces of the surface. Both forms specify face x is adjacent to face y along a common edge. The plus sign shows that the edge common to x and y is cut (solid lines in Fig. a) and the minus sign indicates that the edge is not cut (dotted lines). There is no blank character in a line and there are no empty lines in the input.

 The first number in the input line, t (1 <= t <= 10) is the number of test cases, followed by t lines of length at most 260 each containing an equation. There is no blank character in the equations and the variable is always represented by the lower-case character x. The coefficients are integers in the range (0...1000) inclusive.

 The first line contains a single integer t (1 <= t <= 10), the number of test cases. Each test case starts with a line containing an integer m (3 ≤ m ≤ 100), the number of cities followed by m lines of data each containing a pair of integers; the first integer (X) is the x and the second one (Y) is the y coordinates of one city on the map (-10000 ≤X, Y≤ 10000). Note that no two cities have the same (x, y) coordinates.

 The first line contains an integer t (1 <= t <= 10), the number of test cases. Each test case consists of a single line containing an expression like:     A1+A2+A3+ ... +AM = B1+B2+B3+ ... +BN  Each Ai or Bi is a formula of a molecule according to the rules given in items 1 and 2.  The input equations are given in a way that if they can be balanced, xi and yi coefficients can be in the range of 1 to 9. There are less than 10 molecules and there are less than 10 different types of atoms, in a given equation. Additionally, you may assume molecules contain no more than 3 different kinds of atoms. You may also assume that there is no blank character in the input file, and the maximum length of the input lines is 200 characters.  

 The first line of input contains N, the number of test cases. N lines follow, one for each case, containing the latitude and longitude of the two cities, in degrees, minutes, and direction. [A minute is 1/60 degree; Points on the equator have latitude denoted 0,0N (not 0,0S); points on the poles have longitude denoted 0,0W; points with 180 degrees longitude are denoted 180,0W (not 180,0E).] 

 The input contains several test cases. Every test case begins with a line that contains a single integer n < 500,000 -- the length of the input sequence. Each of the the following n lines contains a single integer 0 ≤ a[i] ≤ 999,999,999, the i-th input sequence element. Input is terminated by a sequence of length n = 0. This sequence must not be processed.

 The input contains several test cases, one test case per line. Each test case consists of four floating-point numbers (k, l, s, and w) that describe the situation.

 The first line of input contains n, the number of test cases. Each test case is represented by a line containing integers k, m, and l, the minimum number of rounds, the maximum number of rounds, and the house limit. 0 < k < m ≤ 30; 2 ≤ l ≤ 1000. The minimum bet is 1. 

 The first line of input contains n, the number of test cases. n lines follow, each representing a test case. Each test case gives s and d, non-negative integers representing the sum and (absolute) difference between the two final scores.

 The first line of input contains n, the number of BINGO games that you will analyze. n game descriptions follow. Each game description specifies a card to be played followed by a sequence of BINGO numbers. You are to determine, when the holder of the card will win the game, assuming the player has just this one card and there are no other players.   Each card description consists of five lines, giving the numbers on the card row by row. All but the 3rd row contain 5 numbers; the 3rd contains 4 because of the free space. One or more lines follow that represent some ordering of all 75 bingo numbers. All bingo numbers are simply integers between 1 and 75 - the one-letter prefix is redundant.  

 Standard Input will consist of several test cases. The first line of each test case will contain n, the number of dolls in each set (1 < n <= 100). 2n lines follow; each gives the dimensions, h, d, w of a different doll (h,d >= 2w > 0). A line containing 0 follows the last test case. 

 Input consists of several test cases. For each case there is a line of input containing 4 numbers between 0 and 39. The first number is the position of the dial. The next three numbers are the combination. Consecutive numbers in the combination will be distinct. A line containing 0 0 0 0 follows the last case. 

 Your program accepts a series of commands, one per line. The commands are described by the following syntax:      command ::= birth           ::= death           ::= ancestors           ::= descendants            ::= QUIT      birth ::= BIRTH child: date: mother: father   death ::= DEATH person: date   ancestors ::= ANCESTORS person   descendants ::= DESCENDANTS person      child ::= name   mother ::= name   father ::= name   person ::= name   date ::= name   name ::= [any sequence of characters not beginning or ending with a space or containing a colon] Spaces in the input are ignored except where they appear within name. The BIRTH and DEATH commands record the birth and death of an individual. You may assume that each individual has a unique name. The ANCESTORS and DESCENDANTS commands are queries: they print a family tree or a reverse family tree for the named person, using the BIRTH and DEATH information entered by previous commands. The QUIT command indicates the end of input.  You may assume that no input line exceeds 100 characters, and that there are not more than 250 lines of input. You may assume that DEATH, ANCESTORS, and DESCENDANTS commands refer to a name for which a BIRTH command has previously been given. QUIT appears only as the last line of input.

 There are several test cases. Each test case begins with n <= 1000, the number of steps in the map. n lines follow; each consists of one of the 32 named compass points shown at right followed by a number of paces. The last line is a number giving the angle between magnetic north and true north, in degrees. A positive number indicates that magnetic north is to the east of true north; a negative indicates that it is to the west. The magnitude of this angle will not exceed 90 degrees. A line containing 0 follows the input for the last case.   Note:We use combinations of the letters N,E,S,W,b to abbreviate the names of the compass points. For example, NEbE stands for north-east by east. The 32 points are equally spaced about the compass. Clockwise, they are: N NbE NNE NEbN NE NEbE ENE EbN E EbS ESE SEbE SE SEbS SSE SbE S SbW SSW SWbS SW SWbW WSW WbS W WbN WNW NWbW NW NWbN NNW NbW.  

 The input consists of multiple test cases. The first line of each test case contains two integers N and M (2 <= N, M <= 10), which denote the sizes of the game board. The next N lines give the board layout, with each line containing M characters. A character is one of the following: ‘*’ (an empty position), ‘A’, ‘B’, ‘C’, ’D’ (the cards, which imply that there are at most 4 different kinds of cards). Different letters represent different cards. The number of same cards may be odd, and there may be more than one pair of the same cards.   The input is terminated with two 0's. This test case shoud not be processed.

 In the input, the first line contains an integer N, which represents the number of queries. In the next N lines, each contains a number representing a subtree with root number X (1 <= X <= 2 31 - 1). 

 The input contains multiple test cases. Each test case contains 9 lines describing the current grids. A '.' denotes an empty grid, a 'O' denotes a stone put by the player taking the first turn, and a 'X' denotes a stone put by another player. The grids are described from bottom to top. Your program should estimate which player takes the next turn and analyze whether he can win the game or not.

 The input contains multiple test cases. Each test case contains only two integers W and H (2 <= W, H <= 200) in one line, which are the width and height of the original paper.

 The input consists of several test cases. The first line of each test case contains two integers M and N (2 <= M, N <= 300). Each of the following M lines contains N uppercase letters, each of which is one of 'Y' (you), 'T' (target), 'S' (steel wall), 'B' (brick wall), 'R' (river) and 'E' (empty space). Both 'Y' and 'T' appear only once. A test case of M = N = 0 indicates the end of input, and should not be processed.

 The first line in the input contains an integer N (1 <= N <= 100). Then follow N lines, the i-th of which contains an integer A(i) (-10000 <= A(i) <= 10000). 

 The input contains a program written in the POJ language.

 The input will contain one or more lines, each representing cells that are defined in the spreadsheet.  Note that, if an expression in some cell refers to some other cell, the contents of that other cell will always be defined.There are no white space characters in the expressions. 

 The input consists of several cases, each of which contains two lines.   For each test case, the first line contains 4 integers N, M, L and R (1 <= M <= N <= 30, 0 < L < 100000000, 0 < R < 10000), separated by a single space. N is the number of the footballs, M is the maximum number of footballs one player can shot in one turn, L is the maximum distance that a player can shoot, and R is the radius of footballs.   The next line contains N numbers, S(1), S(2), ..., S(N) (0 < S(i) < 100000000), which describe the distance between footballs and the goal.

 The input to your program will be a line containing D digits (at most 10) representing the starting positions of the wheels. Following this, each line will have the button label for which button is pressed next.There will always be at least 1 digit  

 The input will contain one or more encryption problems. Each problem takes up two lines of the file. The first line of a problem is the encryption key. The second line is the text to be encrypted. An encryption key always begins with a two digit matrix size, followed by a series of 'S', 'R', or L' characters in any order. For each 'S' character, a "shake" operation is performed, for each 'R' character a 'rattle" operation is performed, and for each 'L' character a "roll" operation is performed, in the order specified. A size of "00" is interpreted as 100.   The encryption key is limited to 80 characters. The message is limited to 10,000 characters. Assume that the message will always fit inside the specified matrix.    

 The input file contains one or more problems. The first line of a problem consists of six integers, n m x1 y1 x2 y2. The number of cardboard partitions is n (0 < n <= 5000) and the number of toys is m (0 < m <= 5000). The coordinates of the upper-left corner and the lower-right corner of the box are (x1,y1) and (x2,y2), respectively. The following n lines contain two integers per line, Ui Li, indicating that the ends of the i-th cardboard partition is at the coordinates (Ui,y1) and (Li,y2). You may assume that the cardboard partitions do not intersect each other and that they are specified in sorted order from left to right. The next m lines contain two integers per line, Xj Yj specifying where the j-th toy has landed in the box. The order of the toy locations is random. You may assume that no toy will land exactly on a cardboard partition or outside the boundary of the box. The input is terminated by a line consisting of a single 0.

 In the input, each line of input will consist of a pair of non-negative integers separated by a hyphen, where the second number is always larger than the first number. The second number will always be less than 2 31-1.

 For N baskets, 2<=N<=10, the input will contain N lines of information. The N lines will give the index card count as in the table for the example above. There will be at most 10 cards of the same name in any given basket, and each basket will contain at least one card.

 The input contains one or more problems for a given swamp. The swamp is defined as a 10 by 10 grid of characters. Each period (".") represents open space and each asterik ("*") represents a stump. Each plank problem is defined on one input line after the swamp definition. The first number on the line is the number of planks available (max of 20). The remaining numbers are the lengths of the available planks. Each plank is assigned a number based on its order in the list. For example, in line 11, plank 1 is 9 ft long, plank 2 is 9 ft long, plank 3 is 5 ft long, and plank 4 is 8 ft long.

 The input consists one or more problems. The input for each problem is specified on a single line, giving the integer n (1 <= n <= 18) and a non-negative integer k (0 <= k <= 200). The end of input is specified by a line with n = k = 0.

 Each test case begins with a positive integer k, the number of infringing segments to be found. Following this line are two code bases. The first code base is preceded by the line "BEGIN TDP CODEBASE" and contains a number of lines followed by the line "END TDP CODEBASE". The second code base is preceded by "BEGIN JCN CODEBASE" and followed by "END JCN CODEBASE". The line "END TDP CODEBASE" does not appear in the first code base and the line "END JCN CODEBASE" does not appear in the second. A line containing 0 follows the last test case.

 For each test case there is a single line of input containing a decimal number with up to 1000 digits. A line containing -1 follows the last test case.

 Input will consist of up to 100 cases. Each case consists of one line of input. It will contain the number of dominos to place, n, 1 <= n <= 1000, followed by nonnegative values Pl and Pr, indicating the probability of any domino falling to the left or to the right when placed. You may assume 0 < Pl + Pr <= 0.5.   The last test case is followed by a line containing a single 0.

 Standard input consists of several transcripts. Each transcript consists of a number of paired guesses and responses. A guess is a line containing single integer between 1 and 10, and a response is a line containing "too high", "too low", or "right on". Each game ends with "right on". A line containing 0 follows the last transcript.

 Input contains the number N followed by N 2 integers, representing the matrix row-by-row. 

 Input contains integers N M, followed by matrix A, row-by-row. The first row describes the cube tower furthest from the viewer, left to right, and the last row -- nearest to the viewer. 

 You are given both of these lists one by one. Format of each of these lists is as follows: in the first line of the list the quantity of numbers Ni of the i-th list is written. Further there is an i-th list of numbers each number in its line (Ni lines).The following conditions are satisfied: 1 <= Ni <= 50 000, each element of the lists lays in the range from -32768 to 32767. The first list is ascending and the second one is descending.

 Input contains integers x1 y1 x2 y2 k followed by 2k integers L1 L2 ... Lk C1 C2 ... Ck 

 Input contains integers N and M followed by N * M matrix elements. 

 Input contains integer numbers N L, followed by N pairs of integers x1 y1 â€¦ x N y N. 

 First line of input contains integer number N, with following N lines containing strings A1 ... A N

 The first line of input contains a positive integer n, the number of test cases. Each test case consists of three pairs of real numbers giving the x and y coordinates of three vertices from a regular polygon.

 The first line of input contains c, the number of test cases. Each test case begins with n, t, m. m lines follow, each giving the arrival time for a car (in minutes since the beginning of the day). The operator can run the ferry whenever he or she wishes, but can take only the cars that have arrived up to that time.

 The first line of standard input contains t, the number of test cases. Each test case begins with 3 <= n <= 1000 - the number of words in the dictionary. n distinct dictionary words follow; each word is a string of between 1 and 20 lowercase letters on a line by itself.

 The first line of input contains a positive integer n. n lines follow.Input lines contain no spaces and are between 1 and 80 characters in length.  

 The first line of input contains t, the number of test cases. Each test case begins with three integers not greater than 100: r and c, the number of rows and columns in the grid, and n. The grid is represented by the r lines that follow, each with c characters. Each character in the grid is R, S, or P, indicating that it is occupied by Rocks, Scissors, or Papers respectively. 

 Some text is written in the standard input. There are not more than 10 000 symbols in the text. There may be Latin letters, digits, brackets, symbols of arithmetic operations and the symbols "end of line" and "carriage return".

 Each line of input contains a request for memory block allocation or memory block access. Memory allocation request has a form:  < Time> +  where < Time> is a nonnegative integer number not greater than 65 000. Time is given in seconds. Memory block access request has a form:  < Time> . < BlockNo>  where < Time> meets conditions mentioned above for the memory allocation request and < BlockNo> is an integer value in range from 1 to N.

 Input contains a text that consists of capital and small letters of the Latin alphabet (A–Z, a–z), punctuation marks  (.,;:-!?) and spaces.The text length is not more than 10000.

 Employees are numbered from 1 to N. A first line of input contains a number N. 1 <= N <= 6 000. Each of the subsequent N lines contains the conviviality rating of the corresponding employee. Conviviality rating is an integer number in a range from -128 to 127. After that go N â€“ 1 lines that describe a supervisor relation tree. Each line of the tree specification has the form:  L K  It means that the K-th employee is an immediate supervisor of the L-th employee. Input is ended with the line  0 0  

 The first line of input contains numbers n and m separated with a space (2 <= n <= 50). The next m lines contain information on flights. Each flight is determined by the numbers of the airports that it connects. The numbers of the airports are separated with a space.

 The input consists of multiple datasets, each in the following format.   N T R  nickname and travel route of the first robot  nickname and travel route of the second robot  ...  nickname and travel route of the N-th robot   The first line contains three integers N, T, and R that are the number of robots, the length of the simulation period, and the maximum distance wireless signals can reach, respectively, and satisfy that 1 <=N <= 100, 1 <= T <= 1000, and 1 <= R <= 10.   The nickname and travel route of each robot are given in the following format.    nickname  t0 x0 y0  t1 vx1 vy1  t2 vx2 vy2  ...  tk vxk vyk   Nickname is a character string of length between one and eight that only contains lowercase letters. No two robots in a dataset may have the same nickname. Each of the lines following nickname contains three integers, satisfying the following conditions.   0 = t0 < t1 < ... < tk = T  -10 <= vx1, vy1, ..., vxk, vyk<= 10   A robot moves around on a two dimensional plane. (x0, y0) is the location of the robot at time 0. From time t i-1 to ti (0 < i <= k), the velocities in the x and y directions are vxi and vyi, respectively. Therefore, the travel route of a robot is piecewise linear. Note that it may self-overlap or self-intersect.   You may assume that each dataset satisfies the following conditions.   The distance between any two robots at time 0 is not exactly R.  The x- and y-coordinates of each robot are always between -500 and 500, inclusive.  Once any robot approaches within R + 10 -6 of any other, the distance between them will become smaller than R - 10 -6 while maintaining the velocities.  Once any robot moves away up to R - 10 -6 of any other, the distance between them will become larger than R + 10 -6 while maintaining the velocities.  If any pair of robots mutually enter the wireless area of the opposite ones at time t and any pair, which may share one or two members with the aforementioned pair, mutually leave the wireless area of the opposite ones at time t', the difference between t and t' is no smaller than 10 -6 time unit, that is, |t - t' | >= 10 -6.  A dataset may include two or more robots that share the same location at the same time. However, you should still consider that they can move with the designated velocities.   The end of the input is indicated by a line containing three zeros.   

 The first line of an input contains numbers m and n separated with a space. The next m lines contain the vectors on sale. All of the coordinates are integers with an absolute value not exceeding 2 000. The numbers are separated from each other with a space. The next m lines contain prices c i, one number in each line. The prices are positive integers not exceeding 15 000.

 The first line of an input contains the number N. The next N lines contain lists of the valves in charge of each of the technicians. It means that a line number i + 1 contains numbers of the valves that the i-th technician is responsible for. Each list of valves is followed by â€“1. 

 The first line of input contains N, the number of test cases. Each test case consists of two equations, each on a separate line. An empty line separates cases. An equation consists of two or more terms separated by addition, subtraction, or equality operators. A term is an integer, or a variable name (x or y) optionally preceded by a minus sign or an integer coefficient. There is exactly one equality operator. All operators are surrounded by spaces, and there are no spaces within terms.

 The input consists of a number of lines. Each line contains two positive integers giving the starting two numbers of the game. Stan always starts.

 There are m test data, m <= 10. In each test data, there are at most 1000 rectangles. The first line in a data set contains the number of rectangles. Each rectangle in the data set is represented in a line xy, where x and y are the width and height of the corresponding rectangle, respectively. There is a blank between x and y. Note that x and y are positive integers that are at most 10000. End of the input file is a single line of '-1'.

 The first line of input contains N, the number of test cases. The first line of each test case contains 1 <= S <= 100, the number of satellite channels, and S < P <= 500, the number of outposts. P lines follow, giving the (x,y) coordinates of each outpost in km (coordinates are integers between 0 and 10,000). 

 The first line of standard input contains an integer C, the number of test cases. C data sets follow. Each data set begins with an integer, N, the number of people in the class (1 <= N <= 1000). N integers follow, separated by spaces or newlines, each giving the final grade (an integer between 0 and 100) of a student in the class.

 The first line of input contains N, the number of test cases. For each case a line is given with a time, and 2 time zone abbreviations. Time is given in standard a.m./p.m. format with midnight denoted "midnight" and noon denoted "noon" (12:00 a.m. and 12:00 p.m. are oxymorons).

 The first line of the input file contains a number of stars N (1<=N<=15000). The following N lines describe coordinates of stars (two integers X and Y per line separated by a space, 0<=X,Y<=32000). There can be only one star at one point of the plane. Stars are listed in ascending order of Y coordinate. Stars with equal Y coordinates are listed in ascending order of X coordinate.  

 The first line of an input file contains two integers, separated by space. The first integer M represents the number of floors in the building, and the second integer N represents the number of rooms per floor. Each of the next M lines contains N integers separated with spaces that describe fees (the k-th integer at l-th line is the fee required by the official working in the k-th room at the l-th floor). 

 The first line of the input contains the single number N. Each of next N lines contains one number from the given set. 

 The first line of the input contains the single number N. The next N lines contain N characters each. Each line describes one row of the labyrinth matrix. In each line only dot and diesis characters will be used and each line will be finished with a new line character. There will be no spaces in the input.

 The first line of input will contain an integer number N that represents the size of a chessboard (and the number of queens also). It will be followed by N lines describing positions of queens. Each line will contain two integers X and Y separated by a space. These numbers represent horizontal and vertical coordinates and lay in a range from 1 to N.

 The input is a question, that is any text file containing at least one character (end of line is not a character). Each character of the input (excepting the ends of lines) is a part of the question.  The size of the input file is not more than 30000.

 The first line of input contains a positive integer N, the number of test cases. The first line of each test case contains T <= 20, the number of train routes. Each train route is described by one or more lines containing:    S <= 20 The number of stations on the route including origin and terminus.  hh:mm The starting time of the route (in 24-hour clock notation; that is, in the range 00:00 to 23:59). You may assume that a train leaves the origin every day at this time. A station name is a string of no more than 40 alphabetic characters.  A list of the names of the S stations, separated by the travel time between adjacent stations. Travel time is given in hours and minutes.   Finally, each test case gives the name of an origin and destination for which a schedule is to be generated. You may assume there is at least one route from the specified origin to the specified destination.

 The first line of input contains N, the number of test cases. 4N-1 lines follow, specifying N grid configurations separated by empty lines.

 The first line of input contains N, the number of test cases. Each test case begins with an integer 4 <= M <= 20, the number of sticks. M integers follow; each gives the length of a stick - an integer between 1 and 10,000. 

 The first line of input contains C, the number of test cases. For each case there is an additional line containing N, the number of blocks to be shipped. N does not exceed 1000.

 Each test case consists of two integers leftx (an odd number <= -1) and rightx (an odd number >= 1). Subsequent lines contain the height (a positive integer) of each divider from left to right. There will be no more than 1000 dividers in any test case. Input is terminated with a line containing two zeros.

  There two numbers in the first line of the standard input: N — a number of nails (1 <= N <= 100), and a real number R — a radius of heads of nails. All the heads have the same radius. Further there are N lines, each of them contains a pair of real coordinates (separated by a space) of centers of nails. An absolute value of the coordinates doesn't exceed 100. The nails are described in a clockwise order starting from an arbitrary nail. Heads of different nails don't adjoin.

 The first line of the standard input contains an only number N, 1 <= N <= 100 â€” a number of members of the Martian Planetary Council. According to the centuries-old tradition members of the Council are enumerated with the natural numbers from 1 up to N. Further, there are exactly N lines, moreover, the I-th line contains a list of I-th member's children. The list of children is a sequence of serial numbers of children in a arbitrary order separated by spaces. The list of children may be empty. The list (even if it is empty) ends with 0.

 The standard input consists of one line, which contains an only integer number K â€” a number of buttons in the heap, that has fixed the first player at his turn.

 In the first line of the standard input an only natural number N (1 <= N <= 1000) is contained, that is a number of elements in the set that is rearranged by this permutation. In the second line there are N natural numbers of the range from 1 up to N, separated by a space, that define a permutation — the numbers P(1), P(2),…, P(N).

 The input of this problem contains two lines. In the first line an only natural number K <= 101 — a quantity of groups — is written. In the second line there are written K natural numbers, separated with a space. Those numbers define a number of voters in each group. In order to simplify the notion of "the majority of votes" we'll say that the number of groups also as the number of voters in each group is odd. You may also consider, that the population of the island does not exceeds 10001 persons.

 The standard input of the problem consists of two parts. At first, a database is written, and then there's a sequence of queries. The format of database is very simple: in the first line there's a number N, in the next N lines there are numbers of the database one in each line in an arbitrary order. A sequence of queries is written simply as well: in the first line of the sequence a number of queries K (1 <= K <= 100) is written, and in the next K lines there are queries one in each line. The query "Which element is i-th by its value?" is coded by the number i. A database is separated from a sequence of queries by the string of three symbols "#".

 * Line 1: Two space-separated integers: N and L   * Line 2: Two space-separated integers: A and B   * Lines 3..N+2: Each line contains two integers, S and E (0 <= S < E <= L) specifying the start end location respectively of a range preferred by some cow. Locations are given as distance from the start of the ridge and so are in the range 0..L.

 * Line 1: Two space-separated integers: N and S (-100,000 <= S <= 100,000)   * Lines 2..N+1: Each line contains two space-separated integers: A_i and B_i (-100,000 <= A_i < B_i <= 100,000), the starting and ending x-coordinates of fence segment i. Line 2 describes fence #1; line 3 describes fence #2; and so on. The starting position will satisfy A_N <= S <= B_N. Note that the fences will be traversed in reverse order of the input sequence.

 * Line 1: Two space-separated integers: W and L   * Lines 2..L+1: L lines, each with W space-separated integers corresponding to the height of each square of land.

 * Line 1: Two space-separated integers: N and T   * Lines 2..N+1: Each line contains the start and end times of the interval during which a cow can work. A cow starts work at the start time and finishes after the end time.

 Input contains integer numbers a c m R0.  0 ≤ a, c, R0 ≤ 10 7, 1 ≤ m ≤ 16000000, am + c < 2 32.

 * Line 1: Two space-separated integers: N and M   * Lines 2..M+1: Each line contains three space-separated integers A, B, and C that describe a connection route between barns A and B of cost C.

 * Line 1: A single integer, N. The barns are numbered 1..N.   * Lines 2..N: Each line contains two integers X and Y and represents a connection between barns X and Y.

 Input contains integer numbers C N, followed by N quartets of integes ci pi ti ri, where ci -- team number, pi -- problem number, ti -- submission time in seconds, ri -- 1, if the run was accepted, 0 otherwise.  1 ≤ C, N ≤ 1000, 1 ≤ ci ≤ C, 1 ≤ pi ≤ 20, 1 ≤ ti ≤ 36000. 

 Input contains number of records N, followed by N triplets of integers qi si vi, where qi -- item id, si -- salespoint id, vi -- number of items sold.  1 ≤ N ≤ 500000, 1 ≤ qi, si, vi ≤ 10 9, the summary table will have no more than 10 8 cells, the summary value in each cell will not exceed than 2 31−1.

 The input contains several test cases. Each test case describes a histogram and starts with an integer  n, denoting the number of rectangles it is composed of. You may assume that  1<=n<=100000. Then follow  n integers  h1,...,hn, where  0<=hi<=1000000000. These numbers denote the heights of the rectangles of the histogram in left-to-right order. The width of each rectangle is  1. A zero follows the input for the last test case.

 Input contains integer number N followed by real numbers x0 y0 R, followed by N triples of real numbers xi yi ri.  1 ≤ N ≤ 10, 0 ≤ xi, yi, x0, y0 ≤ 1000, 1 ≤ ri ≤ R ≤ 1000. 

 Input contains numbers X size Y size N followed by N sets of numbers xi yi Ri ci, describing the coordinates of center, radius and color of i-th circle.  1 <= X size, Y size <= 1000, 1 <= N <= 10000, 0 <= xi < X size, 0 <= yi < Y size, 1 <= Ri <= 212, 0 <= ci <= 9. 

 First line of input contains number N -- the field size. The following N lines consist of N characters each -- representation the field. The input field always contains at least one empty cell adjacent to the destination cell.   2 ≤ N ≤ 25 

 * Line 1: Two space separated integers: T and W   * Lines 2..T+1: 1 or 2: the tree that will drop an apple each minute.

 * Line 1: Two space-separated integers: N and M   * Lines 2..N+1: M characters per line representing one row of Farmer John's field. Each character is either 'W' or '.'. The characters do not have spaces between them.

 * Line 1: Two integers: T and N   * Lines 2..T+1: Each line describes a trail as three space-separated integers. The first two integers are the landmarks between which the trail travels. The third integer is the length of the trail, range 1..100.

 * Line 1: A single integer N   * Lines 2..N+1: Each line contains a single integer that is the milk output of one cow.

 * Lines 1..2: Each line contains a single decimal number.

 * Line 1: Three space-separated integers: R, M, and Y

 The input contains several test cases. Each test case specifies a tree as described above on one line of the input file. Input is terminated by EOF. You may assume that 1<=n<=50. 

 * Line 1: Two space-separated integers: F and P   * Lines 2..F+1: Two space-separated integers that describe a field. The first integer (range: 0..1000) is the number of cows in that field. The second integer (range: 0..1000) is the number of cows the shelter in that field can hold. Line i+1 describes field i.   * Lines F+2..F+P+1: Three space-separated integers that describe a path. The first and second integers (both range 1..F) tell the fields connected by the path. The third integer (range: 1..1,000,000,000) is how long any cow takes to traverse it.

 * Line 1: A single integer, K   * Lines 2..K+1: Each line contains three space-separated integers: h_i, a_i, and c_i. Line i+1 describes block type i.

 * Line 1: Two space-separated integers, N and S.   * Lines 2..N+1: Line i+1 contains two space-separated integers: C_i and Y_i.

 * Line 1: Four space-separated integers: F, P, C, and M   * Lines 2..P+1: Three space-separated integers describing a path: F1,F2, and T. The path connects F1 and F2 and requires T seconds to traverse.   * Lines P+2..P+C+1: One integer per line, the location of a cow. The first line gives the field number of cow 1, the second of cow 2, etc.

 * Line 1: Two space-separated integers, N and M.   * Lines 2..1+M: Line i+1 contains three space-separated integers, A_i, B_i, and L_i, describing a road from A_i to B_i of length L_i.

 The first line of the input contains an integer N, giving the number of test cases. The next line is empty, then, test cases follow: The first line of each test case contains two integers, m and n, giving the number of rows and columns (m <= 200, n <= 20). The second line contains m integers, giving the row sums of the matrix. The third line contains n integers, giving the column sums of the matrix. The fourth line contains an integer c (c < 1000) giving the number of constraints. The next c lines contain the constraints. There is an empty line after each test case.   Each constraint consists of two integers r and q, specifying some entry (or entries) in the matrix (the upper left corner is 1 1 and 0 is interpreted as "ALL", i.e. 4 0 means all entries on the fourth row and 0 0 means the entire matrix), one element from the set {<, =, >} and one integer v, with the obvious interpretation. For instance, the constraint 1 2 > 5 means that the cell in the 1st row and 2nd column must have an entry strictly greater than 5, and the constraint 4 0 = 3 means that all elements in the fourth row should be equal to 3.

 The first line of the input contains an integer N giving the number of test cases. The following 2N lines specify the test cases, two lines per test case: the first line gives a positive integer M, which is the number of heights, and the following line contains the M positive integer heights. For any test case, the total distance climbed (the sum of the heights in that test case) is at most 1000.

 The input consists of a number of cases. The first line consists of six integers n, m, x1, y1, x2, y2. The number of cardboards to form the partitions is n (0 < n <= 1000) and the number of toys is given in m (0 < m <= 1000). The coordinates of the upper-left corner and the lower-right corner of the box are (x1, y1) and (x2, y2), respectively. The following n lines each consists of two integers Ui Li, indicating that the ends of the ith cardboard is at the coordinates (Ui, y1) and (Li, y2). You may assume that the cardboards do not intersect with each other. The next m lines each consists of two integers Xi Yi specifying where the ith toy has landed in the box. You may assume that no toy will land on a cardboard.   A line consisting of a single 0 terminates the input.

 The input begins with the number of test cases it contains. After that, the test cases appear one after the other, each preceded by a line of white space. The input file will always end with an end-of-line (EOL).   Each test case contains the city grid, followed by an integer specifying the number of locations the Mayor can visit, followed by the locations in row-column order (zero based, the origin being the northwest corner of town). The city grid is described by two lines of text, each at least 2 and at most 10 characters long. The first line contains the directions of the East-West streets (E, W, or T for two-way). The second line contains the directions of the North-South streets (N, S, or T). Every location specified will be valid for the provided street grid.

 The first line of the input will contain a single integer greater than 0 specifying the number of test cases.   The next line will contain a single integer value N, 0 < N < 15, representing the number of supervisors (and the number of employees - there are N supervisors and N employees). The next N lines will be the preferences of each of the N supervisors. Each line will contain N integer entries (1 through N for employees 1 through N), each separated by a space character, that represents the preferences of that supervisor from most preferred to least preferred. More specifically, the first entry on the line will represent that supervisor's first choice, the second entry her second, and so on. The next N lines will be the preferences of the N employees, in the same format as the supervisors.   All lines of data in the input file will end with an empty line. 

 The first line of the input contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains an integer n (3 <= n <= 20), the number of vertices of the simple polygon. Next, there are n lines, containing x and y coordinates of the vertex vi in the ith line, assuming there is an edge between vertices vi and vi+1, and also between vn and v1. x and y coordinates are assumed to be integers in the range 0 to 100. The last line of the test case contains two integers j and k (1 <= j, k <= n , j != k). 

 The input consists of a series of lines with each line containing one integer value i (1<= i <= 2*10^9 ). This integer value i indicates the index of the palindrome number that is to be written to the output, where index 1 stands for the first palindrome number (1), index 2 stands for the second palindrome number (2) and so on. The input is terminated by a line containing 0.

 The first line of input contains 2 positive integers: m <= 1000, the number of words in the Hay Point dictionary, and n <= 100, the number of job descriptions. m lines follow; each contains a word (a string of up to 16 lower-case letters) and a dollar value (a integer number between 0 and 1,000,000). Following the dictionary are the n job descriptions. Each job description consists of one or more lines of text; for your convenience the text has been converted to lower case and has no characters other than letters, numbers, and spaces. Each job description is terminated by a line containing a period.

 Input consists of several test cases. The first line of input for each case contains two positive integers: n <= 15, the number of water stations, and m < 1000, the number of trails. For each trail, there is one subsequent line of input containing three positive integers: the first two, between 1 and n, indicating the water stations at the end points of the trail; the third indicates the length of the trail, in cubits. There may be more than one trail between any two stations; each different trail is given only once in the input; each trail can be travelled in either direction. It is possible to reach any trail from any other trail by visiting a sequence of water stations connected by trails. Gord's route may start at any water station, and must end at the same station. A single line containing 0 follows the last test case. 

 The input contains several test cases. Each test case specifies the Prufer code of a tree on one line. You will find n-1 numbers separated by a single space. Input is terminated by EOF. You may assume that 1<=n<=50. 

 Input contains multiple cases each presented on a separate line. Each line contains two integer numbers D and V separated by whitespace. D is the linear units and V is in cubic units. V will not exceed the maximum volume of wood that the beaver can chomp. A line with D=0 and V=0 follows the last case. 

 Each test case is a line of input representing s, a string of printable characters. The length of s will be at least 1 and will not exceed 1 million characters. A line containing a period follows the last test case.

 There are several test cases. For each test case, standard input contains a line with n <= 1,000,000,000. A line containing 0 follows the last case. 

 The input contains words composed of lowercase alphabetic characters, separated by whitespace(or new line). It is terminated by EOF. You can assume there will be no more than 30000 words.

 Every line of the input file defines a test case and contains two integers: the number of available colors c followed by the length of the bracelets s. Input is terminated by c=s=0. Otherwise, both are positive, and, due to technical difficulties in the bracelet-fabrication-machine, cs<=32, i.e. their product does not exceed 32. 

 The input file contains several test cases. Each test case specifies the contents of the memory prior to execution of the program. Byte 0 through 31 are given on separate lines in binary representation. A byte is denoted by its highest-to-lowest bits. Input is terminated by EOF. 

 The input contains several test cases. Each test case is made up of two integer numbers: the height h and the width w of the large rectangle. Input is terminated by h=w=0. Otherwise, 1<=h,w<=11. 

 The input consists of two parts: a list of locations and a list of queries.   The location list consists of up to 100 lines, one line per location. Each contains a string and two floating-point numbers, separated by whitespace, representing the name of the location, its latitude and its longitude. Names are unique and shorter than 30 characters and do not contain whitespace. Latitudes are between -90 (South Pole) and 90 (North Pole) inclusive. Longitudes are between -180 and 180 inclusive where negative numbers denote locations west of the meridian and positive numbers denote locations east of the meridian. (The meridian passes through Greenwich, London.) The location list is terminated by a line consisting of a single "#".   Each line in the query list contains three names of locations. You can assume the first location to be Alice's home, the second location to be Bob's home and the third location to be a possible meeting point. The query list is terminated by a line consisting of a single "#". 

 The input contains several test cases. Each test case consists of two non-negative integer numbers a and b. Input is terminated by a=b=0. Otherwise, a<=b<=10 100. The numbers a and b are given with no superfluous leading zeros. 

 The input file contains several test cases. Each test case starts with two integers n and l, denoting the number of sequences at the leaves and their length, respectively. Input is terminated by n=l=0. Otherwise, 1<=n<=1024 and 1<=l<=1000. Then follow n words of length l over the amino acid alphabet. They represent the leaves of a complete binary tree, from left to right.

 The input contains several test cases. Each test case starts with the number n. Input is terminated by n=0. Otherwise, 1<=n<=50. Then follow three integers p1, p2, p3 with 1<=pi<=n denoting the starting locations of the game pieces. The colours of the arrows are given next as a mÃ—m matrix of whitespace-separated lower-case letters. The element mij denotes the colour of the arrow between the locations i and j. Since the graph is undirected, you can assume the matrix to be symmetrical. 

 The first line of input contains T, x luke , y luke x ewok , y ewok . T lines follow; each gives the coordinates and diameter of a tree: x treei , y treei , d treei . T is an integer not exceeding 10; coordinates and diameters are real numbers in miles. Trees do not intersect or touch one another. 

 Read several lines of input, each containing P,B,N separated by a space.

 Input to your program consists of a list of the species of every tree observed by the satellite; one tree per line. No species name exceeds 30 characters. There are no more than 10,000 species and no more than 1,000,000 trees. 

 A forest contains T trees numbered from 1 to T and P people numbered from 1 to P. Standard input consists of a line containing P and T followed by several lines, containing a pair of integers i and j, indicating that person i has heard tree j fall.

 The first line of input contains a positive integer N <= 100, the number of computers. N lines follow; each gives the (x,y) coordinates (in mm.) of a computer within the room. All coordinates are integers between 0 and 10,000.

 The first line is an integer N (3 <= N <= 100), which is the number of villages. Then come N lines, the i-th of which contains N integers, and the j-th of these N integers is the distance (the distance should be an integer within [1, 1000]) between village i and village j.   Then there is an integer Q (0 <= Q <= N * (N + 1) / 2). Then come Q lines, each line contains two integers a and b (1 <= a < b <= N), which means the road between village a and village b has been built.

 Input contains multiple test cases. Each test case starts with two numbers R and C (1 <= R, C <= 10) in one line. Then R lines follow, each line has C characters, which describes the grass field. A '.' denotes an empty grid, an 'X' denotes an obstacle, a 'W' denotes a baby wolf, and a 'S' denotes the Mmxl. There are exactly three 'W' and one 'S'. Every test case will be followed by a blank line.

 In the first line of input, there is an integer t, which is the number of test cases and followed by the data for the test cases. The first line of each test case contains four integers: x1, y1, x2, y2, and (x1, y1) and (x2, y2) (-1000 <= x1, y1, x2, y2 <= 1000) are the coordinates of the diagonally points of the field. In the next line, there are two integers x and y, and (x, y) is the coordinate of the ball. The third line of each test case contains an integer n (0 <= n <= 100), which is the number of the goals. In next n lines, each line contains four integers: xi1, yi1, xi2, yi2, and (xi1, yi1) and (xi2, yi2) are the coordinates of the diagonally points of the i-th goal. You may assume the goals and the ball are inside the field. And if a ball move into or on the boundaries of a goal, the team scores points.

 There are several test cases. The first line of each case contains there positive integers separated by blanks, A, B and C (A, B, C >0, A + B + C <= 100), which are the number of two-seat tables, the number of four-seat tables and the number of six-seat tables respectively. From the second line, there is a list of coming groups of diners, each line of which contains two integers, T and N (0 < N <= 6), representing the arrival time and the number of diners of each group. The arrival time T is denoted by HH:MM, and fixed between 08:00 and 22:00 (the restaurant closes at 23:00). The list is sorted by the arrival time of each group in an ascending order, and you may assume that no groups arrive at the same time. Each test case is ended by a line of "#".   A test case with A = B = C = 0 ends the input, and should not be processed.

 Input contains multiple test cases. Each test case starts with a number N (1 <= N <= 1000) in one line. Then the following N lines describe the out-positions of each position. Each line starts with an integer Xi that is the number of out-positions for the position i. Then Xi integers following specify the out-positions. Positions are indexed from 0 to N-1. Then multiple queries follow. Each query occupies only one line. The line starts with a number M (1 <= M <= 10), and then come M integers, which are the initial positions of chesses. A line with number 0 ends the test case. 

 There are multiple cases. Each case contains three integers N, K and M (-1000 <= N <= 1000, 1 < K <= 1000, 0 < M <= 1000) in a single line.   The input is terminated with three 0s. This test case is not to be processed.

 The input will contain several test cases; each contains a positive integer N (1 <= N <= 10 ^ 8) in a single line.

 The first line contains an integer P (3 <= P <= 100), which is the number of points in the first polygon. The second line contains P pairs of integers, which give the coordinates of the P points in turn.   The third line contains an integer Q (3 <= Q <= 100), which is the number of points in the second polygon. The fourth line contains Q pairs of integers, which give the coordinates of the Q points in turn.   It is known that the distance between two planes is 10, and all the coordinates given above are in the range of [0, 2500].

 * Line 1: Three space-separated integers, N, K, and B.   * Lines 2..N+1: Two space-separated integers in the range (1,1) to (2,B) giving the coordinates of the cell containing each cow. No cell contains more than one cow.

 * Line 1: A single integer, N   * Lines 2..N+1: Each line contains two space-separated integers describing a fuel stop: The first integer is the distance from the town to the stop; the second is the amount of fuel available at that stop.   * Line N+2: Two space-separated integers, L and P

 * Line 1: Two space-separated integers: N and M   * Lines 2..N+1: Line i+1 contains one integer: the longitude of the i-th farm. Line 2 contains the location of the farm of his best friend.   * Lines N+2..N+M+1: Line i+N+1 contains two integers giving the indices of two farms that are connected by a flight.  

 * Line 1: Two space-separated integers: N and K   * Lines 2..N+1: Each line contains a single integer elevation. Line i+1 contains the elevation for index i.

 * Line 1: Four space-separated integers: P, B1, B2, and R:     * P (1 <= P <= 5) indicates the number of pebbles,   * B1 (-500,000 <= B1 <= 500,000) and B2 (-500,000 <= B2 <= 500,000) are the x co-ordinates of two river banks, and   * R (1 <= R <= 500,000) the time at which you are to display the lake.   No two pebbles will be dropped at the same position at the same time. The two banks will have different x co-ordinates, and no pebble will be dropped on a bank.  * Lines 2..P+1: Each line contains three space-separated integers that describe a pebble: X (-500,000 <= X <= 500,000), Y (-500,000 <= Y <= 500,000), and and T (1 <= T <= 500,000)   * X and Y are the coordinates where a pebble is dropped   * T is the time at which the pebble is dropped

 * Line 1: Two space-separated integers, N and E.   * Lines 2..2*N: These lines each contain 2*E-1 characters and encode the map of the street. Every other input line gives the data for the east/west streets; the remaining lines show the north/south streets. The format should be clear from the example.

 * Line 1: Three space-separated integers: N, D, and K   * Lines 2..N+1: Line i+1 describes the diseases of cow i with a list of 1 or more space-separated integers. The first integer, d_i, is the count of cow i's diseases; the next d_i integers enumerate the actual diseases. Of course, the list is empty if d_i is 0.  

 * Line 1: Two space-separated integers: N and L   * Lines 2..N+1: Line i+1 contains two space-separated integers: s_i and e_i (0 <= s_i < e_i <= 1,000,000,000) that specify the start and end points of a mud pool along the road. The mud pools will not overlap. These numbers specify points, so a mud pool from 35 to 39 can be covered by a single board of length 4. Mud pools at (3,6) and (6,9) are not considered to overlap.  

 The input is consisted of several test blocks. For each block, the first line contains two integers n and m (1 <= n <= 200, 0 <= m <= n (n - 1)). We use positive integers from 1 to 2 * n to label the children dining round table. Then m lines followed. Each contains positive integers i and j ( i is not equal to j, 1 <= i, j <= 2 * n), which indicate that child i and child j consider each other as "enemy". In a input block, a same relationship isn't given more than once, which means that if "i j" has been given, "j i" will not be given.   There will be a blank line between input blocks. And m = n = 0 indicates the end of input and this case shouldn't be processed.

 The first line of the input is the number of scenarios that will follow. For each scenario the following information is given: The first line contains the number of files to follow (at least one, at most 100), each of which is given by a space separated triple of a filename f, a height h, a width w (1 <= w, h <= 100) and then h lines, each with exactly w characters. Following the file definition is a single line with a number m (at least one, at most 500), which is followed by a CSS file of m entries.  You can assume the resulting picture to be at most 1000 x 1000 characters large. All coordinates in CSS entries will be given as integers with an absolute value less than 1000000. All filenames and identifiers are made up from alphanumeric characters and dots only. No two files have the same name and no two identifiers are equal. The layer attribute will be at least 0 and at most 1000000.

 The first line contains two integer numbers N and M (N â€“ 1 <= M <= N * (N - 1) / 2). N denotes number of pieces of that miraculous orange and M denotes the number of strings. The pieces are numbered from 1 to N.   Each of the following lines contains three integer numbers A, B and C (1 <= A, B <= N, A is not equal to B, 0 <= C <= 2). It shows that there's a string connecting piece A and piece B in color C.   We ensure at beginning of the puzzle, for any K (2 <= K <= N), the pieces numbered from 1 to K are connected independently (i.e., without considering the pieces numbered from K + 1 to N, the pieces numbered from 1 to K are still connected).

 The input contains several test cases. For each test case it contains a positive integer L (1 <= L <= 10 ^ 8). The end of input is indicated by end-of-file.

 In the first line of input contains two integers N and M (1 <= N <= 20, 1 <= M <= 20). Then come N lines. The i-th line first contains an integer P (1 <= P <= M) referring to the number of barns cow i likes to play in. Then follow P integers, which give the number of there P barns.

 The first line is an integer T, which shows the number of test cases, and then T test cases follow. The first line of each case contains two integers m, n (0 < m <= 100, 0 < n <= 2000). The following m lines indicate the m sequence respectively. No integer in the sequence is greater than 10000.

 First line of input contains an integer N (1 <= N <= 1000), which represents the amount of sets. Then follow N lines. Each starts with a number C(i) (1 <= C(i) <= 10000), and then C(i) numbers, which are separated with a space, follow to give the element in the set (these C(i) numbers needn't be different from each other). The N + 2 line contains a number Q (1 <= Q <= 200000), representing the number of queries. Then follow Q lines. Each contains a pair of number i and j (1 <= i, j <= 10000, and i may equal to j), which describe the elements need to be answer.

 The input will consist of several test cases. For each test case, two integers M and N are given in the first line, indicating the number of rows and columns of the matrix; each of the following M lines contains N integers, indicating the matrix. The input is terminated by a single line with two zeros. You may assume that 2 <= M, N <= 500 and all elements of the matrix are integers in the range [0, 65535].   There may be some blank lines between test cases.

 The input represents a series of game boards. Each board consists of a description of a square array of n ^ 2 dots (where 2 <= n <= 1500) and some interconnecting horizontal and vertical lines. A record of a single board with n ^ 2 dots and m (m <= 300000 )interconnecting lines is formatted as follows:   Line 1: "n" the number of dots in a single row or column.  Line 2: "m" the number of interconnecting lines.  Each of the next m lines are one of following two types:   "H i j k" (1 <= i, j <= n, k >0, j + k <= n) indicates a horizontal line of length k from the dot in row i, column j to the dot in row i, column j + k.   or   "V i j k" (1 <= i, j <= n, k >0, i + k <= n) indicates a vertical line of length k from the dot in row i, column j to the dot in row i + k, column j.   The end of input is indicated by end-of-file. 

 There are 3 integers in the first line: m, n, k (0 < m, n <= 32, 0 <= K < m * n), the number of rows, column and holes. In the next k lines, there is a pair of integers (x, y) in each line, which represents a hole in the y-th row, the x-th column.

 The input will contain several test cases. Each test case contains three positive integers C, E, N (0 < C < N, 0 < E < N, 0 < N < 2 ^ 62).

 You should read the number of test cases Z in the first line â€“ Z <= 100.   Each of the following lines denotes a single test case, consisting of 8 integers N, M, P, Q, a, b, c, and d. The meanings of such integers are described above.

 In the first line, there's a single non-negative integer N (N <= 20000), denoting the number of basket chairs. Each of the following lines contains four floating numbers x1, y1, x2, y2, which means there’s a basket chair on the line segment of (x1, y1) – (x2, y2), and facing to its LEFT (That a point (x, y) is at the LEFT side of this segment means that (x – x1) * (y – y2) – (x – x2) * (y – y1) >= 0).

 The input contains multiple test cases. Each case contains two lines.  Line 1: a single integer n (n <= 50000), indicating the number of sticks.  Line 2: n different positive integers (not larger than 100000), indicating the length of each stick in order. 

 One integer per line, which is I (1 <= I <= 1000000).   A line containing a number "0" terminates input, and this line need not be processed.

 * Line 1: A single integer, K   * Lines 2..3*K+1: One integer per line, the number of cows in each city that are Jersey Cows. Line i+1 contains city i's cow census.

 * Line 1: Three space-separated integers: N, P, and T   * Lines 2..P+1: Line i+1 contains three space-separated integers, A_i, B_i, and L_i, indicating that a trail connects landmark A_i to landmark B_i with length L_i.

 * Line 1: Two space-separated integers: N and C   * Lines 2..N+1: Line i+1 contains an integer stall location, xi

 * Line 1: Two space-separated integers, N and K.   * Lines 2..N+1: Line i+1 contains two space-separated integers, a_i and b_i respectively, that are planet i's trading trading products. The planet will give item b_i in order to receive item a_i.

 * Lines 1..5: Each of the five lines contains five characters per line, each 'H' or 'J'. No spaces are present.

 The first input line contains the number of scenarios k. Each of the following k lines contains four integers a, b, c, and d, separated by single blanks. These integers in the range {1, . . . , 8} represent the chess board from which the squares (a, b) and (c, d) are removed. You may assume that (a, b) != (c, d).

 * Line 1: Four space-separated integers: C, F1, F2, and D   * Lines 2..C+1: Line i+1 contains two space-separated integers describing the presence of a cow. The first integer tells the first day the cow was on the farm; the second tells the final day of the cow's presence. Each day is in the range 1..2,000.

 Input contains a number of test cases. The data of each test case appear on a sequence of input lines. The first line of each test case contains a positive odd integer 1 < n < 200000 which is the number of brownie points. Each of the following n lines contains two integers, the horizontal (x) and vertical (y) coordinates of a brownie point. No two brownie points occupy the same place. The input ends with a line containing 0 (instead of the n of a test). 

 Each line of input (except last) contains a prime number p <= 100000. The last line contains 0 and this line should not be processed.

 Input consists of a number of cases. The data of each case appears on a number of input lines, the first of which contains two non negative integers n and m giving the number of the vertices of the polygon and the number of cutting lines to consider, 3 <= n <= 1000. The following n lines contain coordinates of the vertices of the polygon; each line contains the x and y coordinates of a vertex. The vertices are given either in clockwise or counterclockwise order. Each of the following m lines of input contains four numbers; these are x and y coordinates of the two points defining the cutting line. If a vertex of the polygon is closer than 1e-8 to the cutting line then we consider that the vertex lies on the cutting line.   Input is terminated by a line with n and m equal to 0.  

 Input contains a number of test cases. The data of each test case appear on a sequence of input lines. The first line of each test case contains a positive odd integer 1 < n < 200000 which is the number of brownie points. Each of the following n lines contains two integers, the horizontal (x) and vertical (y) coordinates of a brownie point. No two brownie points occupy the same place. The input ends with a line containing 0 (instead of the n of a test).

 Input is all integers. The first integer is the distance in kilometres from Waterloo to the big city, at most 10000. Next comes a set of up to 100 gas station specifications, describing all the gas stations along your route, in non-decreasing order by distance. Each specification consists of the distance in kilometres of the gas station from Waterloo, and the price of a litre of gas at the gas station, in tenths of a cent, at most 2000.

 Each line of input contains N followed by N*(N-1)/2 integer numbers separated by a space.

 The first line of input contains two integers: the x,y coordinates of the hangar (in metres). Up to 100 lines follow. Each gives the coordinates (in metres) of the beginning and end of a street. All roads are perfectly straight, with one lane in each direction. The plow can turn any direction (including a U-turn) at any intersection, and can turn around at the end of any street. The plow travels at 20 km/h if it is plowing, and 50 km/h if the lane it is driving on has already been plowed. It is possible to reach all streets from the hangar.

 The first line contains the number of scenarios. Each scenario describes one contest and its first line tells you how long the contest lasts (in minutes, from 30 to 1440) and the number of problems (from 3 to 24). In a second line you'll get the difficulties of the problems, as explained above they tell you how many minutes (from 1 to 600) the guys need in order to solve the problems.

 There are several test cases, each represented by two lines of input. The first line of each contains 4 integers: w, h, l, H. The next line contains 3 integers - the dimensions of the box.

 Input consists of an integer n <= 100, the number of shuffles that the dealer knows. 52n integers follow. Each consecutive 52 integers will comprise all the integers from 1 to 52 in some order. Within each set of 52 integers, i in position j means that the shuffle moves the i th card in the deck to position j.   Several lines follow; each containing an integer k between 1 and n indicating that you have observed the dealer applying the k th shuffle given in the input. 

 The input contains several test cases.  The first line of each test case contains an integer n (1 <= n <= 100000). Then a permutation of the integers 1 to n follows in the next line. There is exactly one space character between consecutive integers. You can assume that every integer between 1 and n appears exactly once in the permutation.  The last test case is followed by a zero. 

 The input consists of the text of the lecture, with "BULLSHIT" occurring occasionally. The first game starts with the first word in the input. Each occurrence of "BULLSHIT" indicates the end of one game.  You may assume, that    the word "BULLSHIT" occurs only in uppercase letters  every word has at most 25 characters, and each line has at most 100 characters  there are at most 500 different words before a game ends  the players follow the rules, so there is no need to check if a game is valid or not 

 The first line contains the number of scenarios. Each scenario is a single line that contains an id number with one digit replaced by a question mark and with six or seven digits length.

 The input contains several test cases.  Each test case starts with two integers n and m (2 <= n <= 100 , 1 <= m <= n*(n-1)/2). n is the number of intersections, m is the number of streets to be considered.  The next m lines contain the description of the streets. Each street is described by a line containing 3 integers a, b and p (1 <= a, b <= n , a != b, 1 <= p <= 100): a and b are the two end points of the street and p is the probability in percent that the Blues Brothers will manage to use this street without being caught. Each street can be used in both directions. You may assume that there is at most one street between two end points.  The last test case is followed by a zero. 

 The first line of the input file contains a number representing the number of test cases to follow. Each test case starts with a line containing three numbers n, w and h. n is the number of paintings already hanging on the wall, w is the width of the wall and h is the height of the wall. The next n lines contain 4 integers x1, y1, x2, y2 each (0 <= x1 < x2 <= w, 0 <= y1 < y2 <= h); the x-coordinates give the distance to the left end of the wall, the y-coordinates give the distance to the bottom of the wall. (x1, y1) is the position of the lower left corner of a painting, (x2, y2) is the position of the upper right corner. The last line of each test case contains the dimensions of the next painting to be placed, first its width w', then its height h' (1 <= w' <= w, 1 <= h' <= h). You are not allowed to rotate the painting.  You can assume that 0 <= n <= 200 and 1 <= w, h <= 1000000. Moreover, all paintings already hanging do not overlap.

 The first line of the input contains a number representing the number of test cases to follow. Each test case starts with an integer n (the number of different railway gauges required). The next line contains n integers between 1000 and 5000, each defining one required railway gauge.  You can assume that 1 <= n <= 8. Moreover, for every test case in the input file, there will be a solution requiring at most 5 rails. 

 The first line of the input contains a number representing the number of lines to follow.  Each line consists of a word, for which your program has to decide if it is a syntactically correct representation of a set. You may assume that each word consists of between 1 and 200 characters from the set { "{", "}", "," }. 

 Input consists of up to 100,000 dictionary entries, followed by a blank line, followed by a message of up to 100,000 words. Each dictionary entry is a line containing an English word, followed by a space and a foreign language word. No foreign word appears more than once in the dictionary. The message is a sequence of words in the foreign language, one word on each line. Each word in the input is a sequence of at most 10 lowercase letters.

 The input contains several test cases. Each test case starts with an integer n (2 <= n <= 1000), the number of teams participating in the tournament. The following n lines contain the names of the teams participating in the tournament. You can assume that each team name consists of up to 25 letters of the English alphabet ('a' to 'z' or 'A' to 'Z').  Then follow n - 1 lines, describing the games the sheikh would like to see (in any order). Each line consists of the two names of the teams which take part in that game. You can assume that it is always possible to find a tournament schedule consisting of the given games.  The last test case is followed by a zero. 

 The input contains several test cases. Each test case starts with an integer n (1 <= n <= 50), the number of nodes in the optimal binary search tree. For simplicity, the labels of the nodes will be integers from 1 to n. The following n lines describe the structure of the tree. The i-th line contains the labels of the roots of the left and right subtree of the node with label i (or -1 for an empty subtree). You can assume that the input always defines a valid binary search tree.  The last test case is followed by a zero. 

 There are several test cases. Each test case has only one line, which contains a positive integer n (2 <= n <= 10 6). There are no blank lines between cases. A line with a single 0 terminates the input.

 The input consists of T(<=30) test cases. The number of test cases (T) is given in the first line of the input.  Each test case contains two lines. The first line is an integer n(2<=n<=50000). The second line contains n integers: a1, a2, ..., an. (|ai| <= 10000).There is an empty line after each case.

 Input contain several test case.  A number N per line.  

 The input contains multiple test cases.  For each test case, the first line is an integer N (1 <= N <= 10 5), which is the number of cows. Then come N lines, the i-th of which contains two integers: S and E(0 <= S < E <= 10 5) specifying the start end location respectively of a range preferred by some cow. Locations are given as distance from the start of the ridge.   The end of the input contains a single 0.

 There are several test cases in the input. The first line of each case contains 3 integers: n, W, H, indicating the number of stars, the horizontal length and the vertical height of the rectangle-shaped window. Then n lines follow, with 3 integers each: x, y, c, telling the location (x, y) and the brightness of each star. No two stars are on the same point.   There are at least 1 and at most 10000 stars in the sky. 1<=W，H<=1000000, 0<=x，y<2^31.  

 There are several test cases in the input file. The first line of each case contains two integers: n and m, representing the number of nodes of the first tree and the second. 1<=n, m<=50. n-1 lines follow, with two integers each, indicating the label of the node and its parent in the first tree. Then m-1 lines follow, with two integers each line, indicating the label of the node and its parent in the second tree. Nodes are labeled from 1 and the node labeled 1 is always the root.There is an empty line after each case.

 There are several test cases. Each test case has only one line, which contains a positive integer n (1 <= n <= 10 6). There are no blank lines between cases. A line with a single 0 terminates the input.  

 The first line contains the number of scenarios.  The next line contains an integer p (1 <= p <= 100) specifying Tom's minimum success probability. Then follows a line with the number of sites n (2 <= n <= 100). The subsequent n lines contain n integers each, separated by a space. The i-th line contains the distances from site i to all other sites, e.g. the distance from site i to site j can be found in the i-th line at position j. Distances are non-negative integers less than 1000. The distance from a site to itself will always be zero. If the distance between two sites is "-1" there is no direct connection between those sites in the corresponding direction. You can assume that every site can be reached somehow from every other site.

 The first line of input is an integer T, which tells how many test cases followed.  The first line of each case is an integer N (3 <= N <= 500), which is the number of villages. Then come N lines, the i-th of which contains N integers, and the j-th of these N integers is the distance (the distance should be an integer within [1, 65536]) between village i and village j. There is an empty line after each test case.

 There are several test cases in the input  Each test case contains three parts.  The first part is two numbers N K, whose meanings we have talked about just now. We denote the nodes by 1 2 ... N. Since it is a tree, each node can reach any other in only one route. (1<=N<=100, 0<=K<=200)  The second part contains N integers (All integers are nonnegative and not bigger than 1000). The ith number is the amount of apples in Node i.  The third part contains N-1 line. There are two numbers A,B in each line, meaning that Node A and Node B are adjacent.  Input will be ended by the end of file.   Note: Wshxzt starts at Node 1.

 The first line contains the number of scenarios. Each scenario describes one collectors party and its first line tells you how many stamps (from 1 to 1000000) Lucy needs to borrow and how many friends (from 1 to 1000) offer her some stamps. In a second line youâ€™ll get the number of stamps (from 1 to 10000) each of her friends is offering.

 The input begins with a positive integer n in the first line. The following lines contain n test cases. Each test case consists of a single line with two positive integers p and q, such that 1 <= p * q <= 26. This represents a p * q chessboard, where p describes how many different square numbers 1, . . . , p exist, q describes how many different square letters exist. These are the first q letters of the Latin alphabet: A, . . .

 The first line of input contains a natural number c giving the number of cases to handle. The following lines form the input for the c cases, each in the format described below. The first line of data for a case contains two natural numbers n and m, 1 <= n, m <= 1000, giving the number of the visitors and the number of doctors' offices for the case. Each of the following n lines contains a sequence of natural numbers. Among these lines, line i (1 <= i <= n) has the following format     t k g1 g2... gk   meaning that the ith visitor arrives at time t and has to visit k offices in the order given by g1 g2 ... gk where each gj is a number of doctor's office, 1 <= gj <= m. We have that 0 <= t <= 1000000 and there is no more than 1000000 visits scheduled for a day at the hospital. 

 The first line contains the number of scenarios.  Each scenario starts with the number n of line segments (1 <= n <= 100000). Then follow n lines consisting of four integers x1, y1, x2, y2 in the range [0, 1000000] each, representing a line segment that connects the points (x1, y1) and (x2, y2). It is guaranteed that a line segment does not degenerate to a single point.

 The first line contains the number of scenarios. For each scenario, an integer number of jobs n, 1 <= n <= 14, is given. Then follow n lines, each containing exactly n integers. The i-th line contains the surcharges that have to be paid in garage number i for the i-th job and the base price for job i. More precisely, on the i-th line, the i-th integer is the base price for job i and the j-th integer (j != i) is the surcharge for job i that applies if job j has been done before. The prices will be non-negative integers smaller than or equal to 100000.

 The first line contains the number of scenarios. Each scenario describes one route and its first line tells you how many steps (3 <= S <= 333) the route has. The next S-1 lines each contain one consecutive pair of the steps on the route separated by a single space. The name of each step is always a single string of letters.

 The first line of the input contains the number of scenarios. Each scenario starts with one line giving the number of bugs (at least one, and up to 2000) and the number of interactions (up to 1000000) separated by a single space. In the following lines, each interaction is given in the form of two distinct bug numbers separated by a single space. Bugs are numbered consecutively starting from one.

 The first line contains the number of scenarios. Each scenario begins with a line containing the number n of words in the dictionary (0 <= n <= 10000), which are printed on the following n lines. After this there is a line containing the numbermof sentences that should be tested with the preceding dictionary (0 <= m <= 10000) and then m lines containing those sentences. The sentences consist of letters from a..z, A..Z and spaces only and have a maximal length of 10000 characters. For each word in the dictionary a limitation of 100 characters can be assumed.

 The first line contains the number of scenarios.  Every scenario consists of a single line containing two integers i and j (1 <= i, j <= 2*10 9) that represent  a node (i, j). You can assume that this is a valid node in the binary tree described above.

 The first line contains the number of scenarios.  Every scenario consists of a single line containing four integers separated by a space. The meaning of these numbers are in order:    The diameter d of the circle (1 <= d <= 1000).  The number n of points on the circle (4 <= n <= 109).  The number c of suitable points for the loudspeakers (4 <= c <= 1000 and c <= n).  The number g for the generator function (1 <= g <= n) which will be relatively prime to n (e.g. they do not have a common divisor greater than 1). 

 Standard input contains several lines of input: Each speed change is indicated by a line specifying the elapsed time since the beginning of the trip (hh:mm:ss), followed by the new speed in km/h. Each query is indicated by a line containing the elapsed time. At the outset of the trip the car is stationary. Elapsed times are given in non-decreasing order and there is at most one speed change at any given time. 

 Input consists of the x,y coordinates of your home and your school, followed by specifications of several subway lines. Each subway line consists of the non-negative integer x,y coordinates of each stop on the line, in order. You may assume the subway runs in a straight line between adjacent stops, and the coordinates represent an integral number of metres. Each line has at least two stops. The end of each subway line is followed by the dummy coordinate pair -1,-1. In total there are at most 200 subway stops in the city. 

 In the single line of input file there are space-separated real numbers x1 y1 r1 x2 y2 r2. They represent center coordinates and radii of two circles.

 Input contains multiple cases. Each case describes one polygon. It starts with an integer n <= 50, the number of vertices in the polygon, followed by three pairs of real numbers giving the x and y coordinates of three vertices of the polygon. The numbers are separated by whitespace. The input ends with a n equal 0, this case should not be processed.

 Each line of input contains one integer number n.

 Input is a sequence of lines, each line containing an integer number 0 <= n <= 250.

 Each line of input contains three positive floating point numbers giving the values of x, y, and c. 

 The input is a sequence of lines. Each line contains 6 floating point numbers giving values of: r, h, d1, A1, d2, and A2 

 Input is a sequence of lines. Each line contains two integer numbers giving the values of n and k. 

 There are two types of lines that can appear in input.  A data line will have the format Type Time Quantity, where Type is either the string Chocolate or Coffee, Time is a nonnegative integer, and Quantity is a positive real number indicating the number of units imbibed by the Tullia.   A query line indicates a time the Tullia's hyperactivity level is requested. It consists of the string Query followed by a nonnegative integer indicating the time of the request.   You should process all lines appearing in input. There will be at most 100 data lines (for the safety of the observers).  

 There will be one test case in each input file. The first line will contain an integer N (10 <= N <= 2500), specifying the number of books that are candidates for Dave's top shelf. The next N lines will each contain an integer E and a string S, separated by a single space. E is an integer no larger than 200 that represents the emotional value for Dave of the book with title S. Note that S can have an arbitrary number of spaces, but will not exceed 30 characters. S is guaranteed to contain at least one alphabetical character. Input should be read from stdin. 

 Input is a sequence of lines, each line containing a FEN description of a chessboard. Note that the description does not necessarily give a legal chess position. Input lines do not contain whitespace.

 Input is a sequence of lines, each line contains two words, separated by spaces, giving the colors of the endpoints of one stick. A word is a sequence of lowercase letters no longer than 10 characters. There is no more than 250000 sticks. 

 The input file will contain several test cases. In each of the test cases, there is an integer k (0 < k <= 2 ^ 31 - 1) in one line.   A line containing a number "0" terminates input, and this line need not be processed.  

 You should read the number of test cases Z (Z <= 30) in the first line. Each of the following lines denotes a single test case, consisting of two integers N and M. We guarantee that 1 <= N <= 10 ^ 41 and 3 <= M <= 100.

 The input consists of multiple test cases. The first line of each test case contains three integers N, M, K (0 < N, M, K < 50), which are described above. The next N lines give the shopkeepers' orders, with each line containing K integers (there integers are belong to [0, 3]), which represents the amount of goods each shopkeeper needs. The next M lines give the supply places' storage, with each line containing K integers (there integers are also belong to [0, 3]), which represents the amount of goods stored in that supply place.   Then come K integer matrices (each with the size N * M), the integer (this integer is belong to (0, 100)) at the i-th row, j-th column in the k-th matrix represents the cost to transport one unit of k-th goods from the j-th supply place to the i-th shopkeeper.   The input is terminated with three "0"s. This test case should not be processed. 

 The first line of the input is an integer X representing the number of test cases. The following X blocks each represents a test case.   The first line of each block contains two numbers N and M (1 <= N <= 30, 0 <= M <= N * N) representing the size of the matrix and the maximum area of each rectangle. The second line contains a number C (0 <= C <= N * N), representing the number of '*'s in matrix A. The following C lines each contains two numbers X and Y (1 <= X, Y <= N), representing A[X][Y] (A[X][Y] represents the element in the X-th row and Y-th column)contains a '*'. The following N lines each contains N numbers, representing the matrix A.  

 There are multiple test cases. Each contains a 4 * 4 square as the initial situation. Notice that the square only contains 'A', 'B', 'C' and 'D', and each kind of characters will appear exactly 4 times.

 Each line contains a number n.

 Input contains multiple test cases. Each test case starts a line containing three numbers N, L, U (1 <= L <= U <= N <= 1000000), which are the number of pearls of the necklace, the permitted shortest length and the longest length of the cut slice. Then the following line gives the brightness of each pearl (the value of brightness are integers and in the range of [-1000, 1000]).

 Input contains multiple test cases. Each test case contains two lines, which are the two DNA sequences to align. DNA sequences contain only characters 'A', 'G', 'C' and 'T'. The length of each sequence is not greater than 50000.   You can assume that all the input cases are highly similar sequences.  

 The input consists of several instances. Each instance contains four integers N, M, P and C, which are all in the range [0, 50000], separated by a single space.   N is the cost price of Jame good.  M is the sell price.  P is the total fake money the customer gave Jame.  C is how much Jame paid back to the customer.   Here N < M. And P may be less than M, as customer may pay with some fake money and some true money.   The input is terminated by a line containing 4 zeros.  

 The first line of input contains a number c giving the number of cases that follow. Each of the subsequent c lines contains three numbers: 1 <= m <= 220, 1 <= n <= 10 and 1 <= k which is not bigger than the number of partitions of m into n elements. 

 The first line of input contains a number c giving the number of cases that follow. The test data for each case start with two numbers m and n giving the number of rows and columns on the board. The remaining lines form an ASCII rendition of the initial board with the pieces placed on squares. The characters used in the rendition are +, -, |, * and space. See the sample input for the format. The size of the input board will be such that m * n <= 64. 

 The input consists of a number of cases. Each case starts with a line specifying the integers n and m. The next m lines each consists of two integers i and j, specifying that students i and j believe in the same religion. The students are numbered 1 to n. The end of input is specified by a line in which n = m = 0. 

 The first line of input contains a number c giving the number of cases that follow. The first line of data for a single case contains number 1 <= n <= 10000. The subsequent n lines contain two integer numbers each which are the x and y coordinates of a point. Every point is unique and we have that -10000000 <= x, y <= 10000000. 

 The input consists of a number of cases. The first line of each case specifies the two integers n and k (0 <= n, k <= 10000). The next n+1 integers give the coefficients of a(x), starting from a0 and ending with an. The input is terminated if n = k = -1. 

 The first line of input contains a number c giving the number of cases that follow. The first line of data for a single case contains number 1 <= n <= 10000. The subsequent n lines describe the posters in the order in which they were placed. The i-th line among the n lines contains two integer numbers l i and ri which are the number of the wall segment occupied by the left end and the right end of the i-th poster, respectively. We know that for each 1 <= i <= n, 1 <= l i <= ri <= 10000000. After the i-th poster is placed, it entirely covers all wall segments numbered l i, l i+1 ,... , ri. 

 The first line of input file contains integer N (1 <= N <= 50) -- number of rows. Following N lines contain 20 characters each, with characters that are either a letter from 'A' to 'Z' or the dot character (ASCII 46), representing an empty cell.

 The first line of input contains a number of nodes N (2 <= N <= 20). The following N lines, containing N space-separated integers each, represent the traffic matrix C (0 <= Cij <= 10000).  Output file must contain a single integer -- the maximum traffic between the subnetworks.  

 The first line of the input file contains integer numbers N and M - the sizes of the piece, separated by spaces. The following M lines contain N characters each - the piece of calendar. 2 <= N, M <= 10 

 The first line of input file contains the length of sequence N. The second line contains the elements of sequence - N integers in the range from 0 to 10000 each, separated by spaces. 1 <= N <= 1000 

 The first line of input file contains a numbers N H - the number of cards and the floating point height of a card. Each of the following N lines contains four floating-point numbers xi yi vi wi - coordinates of cards separated by spaces. 1 <= N <= 100, H > 0 

 The first line of input file contains integers N and P, the number of jury members and the number of problems. The following N lines contain P integers in range from 0 to 1000 each - the complexity ranks. 1 <= N, P <= 100 

 The input contains several cases. The first line of each case contains four positive integers less than 100: n, m, s, and v. The next n lines give the coordinates of the gophers; the following m lines give the coordinates of the gopher holes. All distances are in metres; all times are in seconds; all velocities are in metres per second. 

 Input is a sequence of lines, each line contains two integer numbers k and n, 1 <= n <= 100.

 Input consists of several lines of text. Each line may contain digits, spaces, upper case letters (except Q, A, Z), or punctuation shown above [except back-quote (`)]. Keys labelled with words [Tab, BackSp, Control, etc.] are not represented in the input.

 Each line of input contains t, a, b.

 Input consists of up to 50 lines, each containing an x,y coordinate pair followed by "Hotter", "Colder", or "Same". Each pair represents a position within the room, which may be assumed to be a square with opposite corners at (0,0) and (10,10).

 First line of input file contains two integers N (1 <= N <= 1000000) and L (1 <= L <= 1000), separated by space. Second line contains a string of N characters "0" and "1".

 In the first line of input file there is a single character h, s, d, or c, determining a trump suit. On the second line there is a string denoting first player's cards, and on the third line - the string with the second player's cards. All cards are different, and the players have equal number of cards.

 First input line contains number of expressions N. Following N lines are in format < Cell reference>=< expression>. All expressions are correct, and each cell is defined by at most one expression.

 The first line of input file contains of two integers - number of tables T and number of conditions D.   Starting from the second line there are T tables represented with number of rows RN and number of columns CN in the first line of a table, which is followed by RN lines consisting of exactly CN characters each. D lines with conditions follow the whole set of tables.   The constraints are: 1 <= T <= 26, 1 <= D <= 50, 1 <= CN <= 9, 1 <= RN <= 1000.

 In the single line of input file there are space-separated integers p1 p2 p3 i.

 The input contains multiple cases. Each case starts with three integers: the length of the board (in meters, at least 3), the weight of the board (in kilograms) and n the number of packages on the board (n <= 20). The board is supported at positions -1.5 and +1.5 by two equal fulcrums, both two meters tall and standing on a flat floor. The following n lines contain two integers each: the position of a package on board (in meters measured from the center, negative means to the left) and the weight of the package (in kilograms). A line containing three 0's ends the input.

 There are several test cases. For each test case, standard input has a single line with d, m, a, j.

 Several S, each consisting of a line containing an integer 1 <= n <= 1000 indicating the number of elements in S, followed by the elements of S, one per line. Each element of S is a distinct integer between -536870912 and +536870911 inclusive. The last line of input contains 0. 

 Input consists of several test cases. The first line of each case contains a single positive integer n. Several lines of text follow which will contain no more than 10000 words. The text for each case is terminated by a single line containing EndOfText. EndOfText does not appear elsewhere in the input and is not considered a word. 

 The input contains several test cases. Each test case consists of an integer n. You may assume that 1<=n<=3000. A zero follows the input for the last test case.

 The input contains several test cases. Each test case consists of an integer n. You may assume that 1<=n<=5000. The last test case is followed by a zero. 

 The input contains several test cases, each of which corresponds to a directed graph  G. Each test case starts with an integer number  v, denoting the number of vertices of  G=(V,E), where the vertices will be identified by the integer numbers in the set  V={1,...,v}. You may assume that  1<=v<=5000. That is followed by a non-negative integer  e and, thereafter,  e pairs of vertex identifiers  v1,w1,...,ve,we with the meaning that   (vi,wi)âˆˆE. There are no edges other than specified by these pairs. The last test case is followed by a zero.

 The input data will contain multiple test cases. Each test case begins with a line containing a pair of integers m and n. The number m specifies the number of team members (1 <= m <= 3), and n specifies the number of problems to be solved (1 <= n <= 10).  The next line contains  m positive integers giving the intelligence amounts of the  m team members. Following this are  n lines, describing the time-brightness tradeoffs for each of the  n problems. Each line starts with a positive integer  k ( k <= 10), followed by  k pairs of positive integers  s1,t1,s2,t2,...,sk,tk that satisfy  si < si+1 for  1 <= i < k. The minimum intelligence requirement of the problem is  s1, i.e. it cannot be solved by a member with less intellectual capacity than this number. If the problem is solved by a team member with brightness  s, where  si <= s < si+1 for some  i, then its solution time will be  ti. Finally, if the problem is solved by a team member with intellectual capacity  sk or more, then its execution time will be  tk.  A pair of zeroes will follow the input for the last test case.   You may assume that each problem will be solved in exactly the time specified for the given brightness, regardless of the number of other problems being solved by other team members at the same time. No problem will have an intelligence requirement larger than that of the brightest team member. 

 The input contains several test cases. Each test case consists of four real numbers  mw, mi, tw, ti. The mass of water  mw and the mass of ice  mi are both non-negative, given in grams, and  mw + mi > 0. The water temperature  tw and the ice temperature  ti follow, both given in degrees Celsius, and you may assume that  -30 < ti <= 0 <= tw < 100. The last test case is followed by four zeroes.

 The input contains several test cases, each on a separate line. Each line contains a nonempty string of characters A and V describing the longer edge of the sheet. You may assume that the length of the string is less than 200. The input file terminates immediately after the last test case. 

 The input contains several test cases, each on a separate line. Each line contains a nonempty string of characters A and V describing the longer edge of the sheet. You may assume that the length of the string is less than 200. The input file terminates immediately after the last test case. 

 The first line contains 0 < n <= 100, the number of freckles on Dick's back. For each freckle, a line follows; each following line contains two real numbers indicating the (x,y) coordinates of the freckle. 

 Each line of input contains two unsigned integers less than 10 digits. The last line of input contains 0 0.

 The first line of input contains the date of issue of the license (yyyymmdd) Subsequent lines contain information on offenses, in chronological order. Each such line contains the offense date (yyyymmdd) and the number of points applied (an integer between 2 and 15).

 For a given dictionary, you are to compute the length of the longest edit step ladder. The input to your program consists of the dictionary - a set of lower case words in lexicographic order - one per line. No word exceeds 16 letters and there are no more than 25000 words in the dictionary.

 The first line of the input specifies the number of sections n followed by the total distance of the relay d in kilometers. You may safely assume that 1<=n<=20 and 0.0 < d < 200.0. Every following line gives information about one team: the team number t (an integer, right-justified in a field of width 3) is followed by the n results for each section, separated by a single space. These running times are given in the format "h:mm:ss" with integer numbers for the hours, minutes and seconds, respectively. In the special case of a runner being disqualified, the running time will be denoted by "-:--:--". Finally, the data on every line is terminated by a newline character. Input is terminated by EOF. 

 The input file contains several test cases. Each test case starts with two numbers n and k. Input is terminated by n=k=0. Otherwise, 1<=n<=100000 and there follow n integers with absolute values <=10000 which constitute the sequence. Then follow k queries for this sequence. Each query is a target t with 0<=t<=1000000000. 

 The input contains several test cases. Each starts with a number n on a separate line, denoting the number of lines of the test case. The input is terminated by n=0. Otherwise, 1<=n<=64, and there follow n lines, each with a maximal length of 80 characters. The concatenation of these n lines, where the end-of-line characters are omitted, gives the text sample you have to examine. The text sample will contain printable ASCII characters only. 

 The input contains several test cases. Each test case starts with the number of nodes of the network n. Input is terminated by n=0. Otherwise, 1<=n<=200. Nodes have the numbers 1, ..., n. Then follows a list of connections. Every connection starts with two numbers A, B. The list of connections is terminated by A=B=0. Otherwise, 1<=A,B<=n, and they denote the start and the endpoint of the unidirectional connection, respectively. For every connection, the two nodes are followed by the companies that have a connection from node A to node B. A company is identified by a lower-case letter. The set of companies having a connection is just a word composed of lower-case letters.  After the list of connections, each test case is completed by a list of queries. Each query consists of two numbers A, B. The list (and with it the test case) is terminated by A=B=0. Otherwise, 1<=A,B<=n, and they denote the start and the endpoint of the query. You may assume that no connection and no query contains identical start and end nodes. 

 The input file consists of several test cases. For each test case the first line contains the number of locations n to be checked followed by the position of the satellite: its latitude, its longitude (both in degrees) and its height (in km) above the earth's surface.  Each of the following n lines contains a location on the earth's surface: the location's label (a sequence of less than 60 printable ASCII characters containing no whitespace characters) followed by its latitude and longitude (both in degrees).  Input is terminated by n=0. 

 The input contains several test cases. Each specifies on a single line a Turing equation. A Turing equation has the form "a+b=c", where a, b, c are numbers made up of the digits 0,...,9. Each number will consist of at most 7 digits. This includes possible leading or trailing zeros. The equation "0+0=0" will finish the input and has to be processed, too. The equations will not contain any spaces. 

 Numbers m and n separated by space.

 The first line of input contains n, followed by n lines giving the crossing times for each of the people. There are not more than 1000 people and nobody takes more than 100 seconds to cross the bridge. 

 Standard input contains a series of no more than 100 coordinate pairs, one pair per line. These coordinates give the vertices of the perimeter of the province; the border is formed by connecting them in order. All coordinates are in the first quadrant; they range from 0 to 100,000. 

 Each line of input contains an integer n < 3000 followed by n integers representing the sequence.

 The first line of input contains n the number of people at the picnic. n lines follow. The first line gives the weight of person 1; the second the weight of person 2; and so on. Each weight is an integer between 1 and 450. There are at most 100 people at the picnic. 

 The input to your program consists of up to 1000 3-digit unsigned integers, representing the contents of consecutive RAM locations starting at 0. Unspecified RAM locations are initialized to 000.

 Input to this problem will consist of a single data set. The data set will be formatted according to the following description.   The data set will consist of a single line containing 3 numbers, separated by single spaces. Each number represents the height of a single underpass in inches. Each number will be between 0 and 300 inclusive. 

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.   A single data set has 3 components:    Start line - A single line:  START R C  where R and C are integers (2 <= (R,C) <= 9) indicating the number of rows and columns in the input image described by this data set.  Original Image - A series of R lines, each of which contains C integers from 0 to 9 inclusive. These integers represent the grayscale value of a pixel in the original image and will not be separated by spaces.  End line - A single line:  END  After the last data set, there will be a single line:    ENDOFINPUT   

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.   A single data set has 4 components:    Start line - A single line:  START M N  where M indicates the starting room, and N indicates the number of rooms in the house (1 <= N <= 20).  Room list - A series of N lines. Each line lists, for a single room, every door that leads to a room of higher number and the keys necessary to open the door from either side. Rooms will be represented by numbers and each key will be represented by a single capital letter (A - Z). For example, if room 3 had doors to rooms 1, 5, and 7, and the door to room 1 took an A key, the door to room 5 took an F key, and the door to room 7 took an X key and a P key, the line for room 1 would read:  3A  and the line for room 3 would read:  5F 7PX  The first line in the list represents room 0. The second line represents room 1, and so on until the last line, which represents room N - 1. It is possible for lines to be empty (in particular, the last line will always be empty since it is the highest numbered room). On each line, the adjacent rooms are always listed in ascending order. It is possible for rooms to be connected by multiple doors and for doors to require multiple keys; required keys for a door will be listed in alphabetical order.  Key list - A series of N lines. Each line lists, for a single room, the keys, in alphabetical order, that are in that room.  End line - A single line:  END  After the last data set, there will be a single line:   ENDOFINPUT   Notes:  There will be no more than 100 doors in any data set.  No room will have more than 20 doors.  Some doors may not require keys.  In any data set, all keys are unique and can be used multiple times.  

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.   A single data set has 1 component:   Start line - A single line:   A B C D E   where:  A: (0.01 <= A <= 5.00) is a decimal number (to two decimal places) of a monetary amount.  B: (0 <= B <= 100) is an integer number of quarters (one quarter = $0.25).  C: (0 <= C <= 100) is an integer number of dimes (one dime = $0.10).  D: (0 <= D <= 100) is an integer number of nickels (one nickel = $0.05).  E: (0 <= E <= 100) is an integer number of pennies (one penny = $0.01). 

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.   A single data set has 4 components:    Start Line - A single line:  START L W D  where (1 <= (L,W,D) <= 20). L is the length of the bayou along the x-axis, W is the width of the bayou along the y-axis, and D is the depth of the bayou on the z-axis.  Dynamite List - A single line containing a space-separated list of 1 to 10 data elements. Each element contains the location and fuse length of a single stick of dynamite as it is dropped into the bayou formatted as:  x,y,f  x and y give the surface coordinates of the drop where (0 <= x <= L) and (0 <= y <= W). f is the length of the fuse and is in the range (0 <= f <= 30).  Fish List - A single line containing a space-separated list of 1 to 15 data elements. Each element represents the location of a fish in the bayou formatted as:  x,y,z  where (0 <= x <= L), (0 <= y <= W), and (0 <= z <= D), where z = 0 indicates the fish is at the surface of the water.  End line A single line:  END  After the last data set, there will be a single line:   ENDOFINPUT   Note:  All numeric values will be given as integers.  The dynamite drops at a constant speed from the top of the bayou (z = 0).  The fuse burns up one unit of its length in precisely the amount of time it takes the dynamite to sink one unit deeper into the bayou.  If the dynamite reaches the bottom of the bayou before the fuse runs out, it will stay there until it detonates.  Multiple fish will not occupy the same position.  Fish are killed if their distance from any dynamite explosion is <= 1.  

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.   Each data set consists of a single line containing the space-separated integer values of the polynomial evaluated at 0, 1, and 2 (in that order). These values will be in the range (-10 3 <= (f(0), f(1), f(2)) <= 10 3). 

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.   A single data set has 4 components:    Start line - A single line:  START X  where (1 <= X <= 20) is the number of contestants demanding shirts.  Tolerance line - A single line containing X space-separated pairs of letters indicating the size tolerances of each contestant. Valid size letters are S - small, M - medium, L - large, X - extra large, T - extra extra large. Each letter pair will indicate the range of sizes that will satisfy a particular contestant. The pair will begin with the smallest size the contestant will accept and end with the largest. For example:  MX  would indicate a contestant that would accept a medium, large, or extra large T-shirt. If a contestant is very picky, both letters in the pair may be the same.  Inventory line - A single line:  S M L X T  indicating the number of each size shirt in Boudreaux and Thibodeaux's inventory. These values will be between 0 and 20 inclusive.  End line - A single line:  END    After the last data set, there will be a single line:   ENDOFINPUT   

 Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.   A single data set has 3 components:    Start line - A single line:  START   Screen Shot - Four lines that represent the current graphical representation of the windows on Boudreaux's screen. Each position in this 4 x 4 matrix will represent the current piece of window showing in each square. To make input easier, the list of numbers on each line will be delimited by a single space.  End line - A single line:  END    After the last data set, there will be a single line:   ENDOFINPUT   Note that each piece of visible window will appear only in screen areas where the window could appear when brought to the front. For instance, a 1 can only appear in the top left quadrant. 

 Input is a sequence of lines, each containing two positive integers s and d.

 Input consists of a line containing n <= 1000, the number of airports. n lines follow, each giving the latitude (between -90 and +90 degrees) and longitude (between -180 and +180 degrees) of an airport.

 Assume that the southwest corner of the field is at (0,0) and the northwest corner at (0,1000). The input consists of a line containing n <= 1000, the number of snakes. A line follows for each snake, containing three real numbers: the (x,y) location of the snake and its strike distance. The snake will bite anything that passes closer than this distance from its location. 

 Each type of card is denoted by a single letter or digit. The first line of input Jane's initial pile of cards, from top to bottom. The second line of input is John's initial pile. Jane and John start with the same number of cards; not more than 50 each. 

 Input consists of a line containing n, the number of test cases.

 Input will contain several test cases; each contains a single positive integer N (1 <= N <= 10000000), which has been described above.

 The input contains multiply test cases. The first line in each case is an integer N (1 <= N <= 1000000), representing the number of student. Then come N lines, each contains a studentâ€™s point (The point is an integer within the range [0, 150]). The next line is an integer M (1 <= M <= 200), representing the number of queries (These numbers are all from the last N lines). Then come M line, each contains an initial point (also in the range [0, 150]).   There may be blank lines between cases. And N = 0 represent the end of input. 

 The input will consist of several test cases. For each test case, one integer N (2 <= N <= 100000) is given in the first line. Second line contains N integers. The input is terminated by a single line with N = 0.

 The input will consist of several test cases. For each test case, two integers N (1 <= N <= 500) and M (0 <= M <= 5000) are given in the first line, indicating the number of points and the number of one-way roads in the graph respectively. Each of the following M lines contains two different integers A and B, indicating there is a one-way from A to B (0 < A, B <= N). The input is terminated by a single line with two zeros.

 The input contains several test cases. For each test case, it contains three lines.   Line 1: two integers n (1<= n <= 50000) and C.  Line 2: n integers p1, p2 ... pn (|pi| < 1000 for 1 <= i <= n).  Line 3: n integers q1, q2 ... qn (|qi| < 1000 for 1 <= i <= n).  

 The first line of the input contains a single integer t, the number of test cases, followed by the input data for each test case. The first line for each test case contains an integer n (1 <= n <= 10), the number of dice. In the next lines, each line contains six integers for a die, by the order A, B, C, D, E, F, as in the following figure. There is a single space between two numbers.

 The input contains multiple test cases. For each test case, it consists of M + 1 lines:  Line 1: a single positive integer M (M <= 80), indicating the number of line segments Bob has drawn.  Line 2 to M +1: each contains two different integers S, E (-10000 <= S, E <=10000), indicating the two end positions of a line segment.

 The input consists of many test cases. Each case contains a float number L (0 < L < 10) in a single line.

 The first line of an input contains two integers: N and K separated with a space. Here N is the number of airports (N <= 1000) and K is the number of an airport, which is the starting point of the game (1 <= K<= N). The next n-1 lines of the file contain pairs of integers separated with a space. These integers are numbers of airports, connected with a flight (all the flights are symmetric and are mentioned only once). There are at most 20 flights to each airport. Input data are always correct.

 The first line of an input contains an integer n. The next n lines contain pairs of real numbers which are co-ordinates of points M i. And the last n lines of the file consist of degree values of angles Î± i. 

 The first line of an input contains an integer n. The next two lines consist of numbers a 0 and a n+1 each having two digits after decimal point, and the next n lines contain numbers c i (also with two digits after decimal point), one number per line.

 The first line of an input file contains a single number N (1<=N<=1000000) - the length of the integers (in order to make their lengths equal, some leading zeroes can be added). It is followed by these integers written in columns. That is, the next N lines contain two digits each, divided by a space. Each of the two given integers is not less than 1, and the length of their sum does not exceed N. 

 Input file contains ten numbers separated by a space. 

 No input

 An input contains an integer N (2<=N<=200) specifying the number of rabbits. Each of the next N lines in the input contains the x coordinate and the y coordinate (in this order) separated by a space (-1000<=x,y<=1000). 

 The first line of input contains two positive integers: f,the number of existing fire stations (f <= 100) and i, the number of intersections (i <= 500). The intersections are numbered from 1 to i consecutively. f lines follow; each contains the intersection number at which an existing fire station is found. A number of lines follow, each containing three positive integers: the number of an intersection, the number of a different intersection, and the length of the road segment connecting the intersections. All road segments are two-way (at least as far as fire engines are concerned), and there will exist a route between any pair of intersections. 

 Each line of input contains a single word, all upper case, less than 20 letters long.

 The first line of input contains a single integer between 1 and 100: the length of the ferry (in metres). For each car in the queue there is an additional line of input specifying the length of the car (in cm, an integer between 100 and 3000 inclusive). A final line of input contains the integer 0. The cars must be loaded in order, subject to the constraint that the total length of cars on either side does not exceed the length of the ferry. Subject to this constraint as many cars should be loaded as possible, starting with the first car in the queue and loading cars in order until no more can be loaded. 

 The first line of input contains four floating point numbers: the (x,y) coordinates of the gopher followed by the (x,y) coordinates of the dog. Subsequent lines of input each contain two floating point numbers: the (x,y) coordinates of a gopher hole. All distances are in metres, to the nearest mm.

 The input consists of several lines, each containing between 2 and 30 digits (to account for future prices) and a decimal point immediately before the last digit. There are no useless leading zeroes; that is, there is a leading zero only if the price is less than 1.

 The first line of input contains a single postitive integer n <= 10. The next n lines represent the positions of the mines. Each line represents the contents of a row using n characters: a period indicates an unmined positon while an asterisk indicates a mined position. The next n lines are each n characters long: touched positions are denoted by an x, and untouched positions by a period. The sample input corresponds to the middle figure above.

 Input consists of a sequence of lines. Each line contains four non-negative integer numbers giving values for p, q, r, and s, respectively, separated by a single space. All the numbers will be smaller than 10,000 with p>=q and r>=s. 

 The first line of input contains two integers: the amount of wine to be bottled (in litres, between 0 and 1,000,000) and the number of sizes of bottles (between 1 and 100). For each size of bottle, one line of input follows giving the minimum and maximum capacity of each bottle in millilitres. The maximum capacity is not less than 325 ml and does not exceed 4500 ml. The minimum capacity is not less than 95% and not greater than 99% of the maximum capacity. You may assume that an unlimited number of each bottle is available. 

 Standard input contains several pairs of a and b. Each string is on a separate line and consists of between 0 and 1,000 lowercase letters.

 The first part of the input file contains a program for the origami machine. The first line contains the number of steps of the program. One line follows for each step of the program. Each line contains fold-line coordinates x1 , y1 , x2 , y2 (real numbers) separated by spaces. The program consists of at most 8 steps. The second part of the input file contains several potential points for making a hole. The first line contains the number of such places and each of the next lines contains coordinates of the point.

 The first line contains the regional coefficient L. Then there are pairs N1 S1, N2 S2, ..., Nm Sm, 0 S m+1. Each pair is located in a separate line. The number in pairs are separated by one or several spaces. The values of L and coefficients Si are given in percents (i.e. they are integers from 0 to 99).   Each of the next lines contains the total annual net profit of the citizen on some enterprise, where he worked, taking into account the regional coefficient and taxes.   The input is ended by âˆ’1. All the parameters are integer not greater than 10 9 within two digits after a decimal point. The number of different workplaces of the citizen doesn't exceed 30. An amount of taxation coefficients (m) is not greater than 20.

 The first input line contains two numbers X and Y separated with one or several spaces. Analogously, the second line consists of the numbers A and B, the third line â€“ of the numbers C and D. Then there amy be an informtaion about the walls.   After a symbol 'v', situated in a separate line, there are pairs of integers describing the walls. Here the pair of numbers M and N define a wall between the cells N, M and N+1, M. Each pair of numbers is located in a separate line.   After a symbol 'h, located in a separat line, there are pairs of integers (analogously to the previous paragraph) describing the horizontal walls. The pair M, N define a wall between the cells N, M and N, M+1.

 Input contains two integer numbers M and N in the range from 1 to 1000000000 separated with space(s).

 First line of the input contains number M (1 <= M <= 5000). Subsequent lines of input contain pairs of numbers Li and Ri (abs(Li), abs(Ri) <= 50000). Each pair is placed on separate line. Numbers in the pair are separated with space(s). List of pairs is ended with pair of integers "0 0". i <= 100000

 The first line consists of the numbers u, v, w separated with a space. The second line contains an integer n. The third, ..., (n+2)-nd line â€“ the numbers x(i), y(i), z(i)separated with a space.   The number n is written without a decimal point. All other numbers are written with not more than two digits after a decimal point (if a number is integer a decimal point may be omitted). All the input numbers are non-negative not greater than 1000.

 In the first line an number N (1<=N<=100 000) of following lines is written. In the second and all next lines coordinates of set's points is written. In every line there are coordinates (two numbers separated several spaces, each number is greater or equal to 0 and less or equal to 1000) of only one point. Some points of set can overlap, thus the same coordinates can be found in different lines.

 The first line of input contains the only integer number N - the length of the sequence. Sequence itself follows in subsequent lines, one number in a line. The length of the sequence lies in the range from 1 to 250000. Each element of the sequence is a positive integer not greater than 2^32 - 1 inclusive. 

 Each line of input contains eight floating point numbers: the (x,y) coordinates of one of the endpoints of the first side followed by the (x,y) coordinates of the other endpoint of the first side, followed by the (x,y) coordinates of one of the endpoints of the second side followed by the (x,y) coordinates of the other endpoint of the second side. All coordinates are in meters, to the nearest mm. All coordinates are between -10000 and +10000. 

 Input consists of a sequence of lines each containing a single positive integer n, 1<=n<=22, giving the size of the set of coupons.

 Input consists of a sequence of lines giving players' abilities. Each line gives the abilities of a single player by two integer numbers separated by a single space. The first number is the player's ability to play white and the second is the player's ability to play black. There will be no less than 30 and no more than 1000 lines on input. 

 The first line of input contains two positive integer numbers: v -- gopher's speed in meters per second and m -- the time after which the gopher becomes prey to hawks if he stays outside a hole. The second line of input contains two floating point numbers: the (xs,ys) coordinates of the gopher starting hole. The third line contains the (xt, yt) coordinates of the target hole. Each Subsequent line of input contains two floating point numbers: the (x,y) coordinates of a gopher hole. All distances are in metres, to the nearest mm. 

 Input consists of data for a number of tables. For each table, a line will give an integer t, between 3 and 50, indicating the number of legs on the table. t subsequent lines will give, in order around the table's circumference, the lengths of the legs in millimetres. Each leg is perpendicular to the table top. A line containing 0 follows the data for the last table. 

 Input consists of pairs of lines. The first line of a pair contains a and the second contains b. Each string is on a separate line and consists of at most 1,000 lowercase letters. 

 Each input case will begin with the number of rows and columns on the panel, 1 <= r,c <= 5 alone on a line. The next three lines describe how pressing a button will affect the nearby lights. This description consists of a 3x3 character grid, where the character "*" indicates that the light in that position switches state (from lit to unlit or from unlit to lit) while "." means its state remains unchanged.  Input ends with 0 0 alone on a line.  

 Input to the problem is a sequence of lines, each containing three positive integers: the number of a village, the number of a different village, and the length of the road segment connecting the villages in kilometers. All road segments are two-way.

 The first line of input is K, the number of test cases. Each test case starts with one line consisting of two integers, 1 <= A, B <= 100, giving the size of the warehouse in meters. A is the length in the EW-direction, and B in the NS-direction.  The second line contains two integers, 1 <= N, M <= 100, denoting the numbers of robots and instructions respectively.  Then follow N lines with two integers, 1 <= Xi <= A, 1 <= Yi <= B and one letter (N, S, E or W), giving the starting position and direction of each robot, in order from 1 through N. No two robots start at the same position.     Figure 1: The starting positions of the robots in the sample warehouse  Finally there are M lines, giving the instructions in sequential order.  An instruction has the following format:  < robot #> < action> < repeat>  Where     is one of     L: turn left 90 degrees,  R: turn right 90 degrees, or  F: move forward one meter,  and 1 <= < repeat> <= 100 is the number of times the robot should perform this single move. 

 The first line of input is N <= 100, the number of test cases. Each of the next N lines consists of X, K and then the K numbers F1, F2, . . . , Fk, having no more than 6 decimals

 The input consists of no more than 20 test cases. Each test case is a line with the integers 4 <= K <= 10 100 and 2 <= L <= 10 6. K is the key itself, a product of two primes. L is the wanted minimum size of the factors in the key. The input set is terminated by a case where K = 0 and L = 0.

 The input contains exactly one test case.The first line of the test case contains two integers N, M (N ≤ 10,000, M ≤ 100,000) which represent the number of cities and roads in the nation of TN, respectively.M lines follow, each line contains two integers a, b, which means that there was a road from city a to city b (0 ≤ a, b < N). All the roads were directional.Cities are numbered from 0 to N − 1, the capital is numbered 0.The last line of each test case is an integer t, which is the city that Ikki was going to destroy.

 Input will start with a single integer 1 <= N <= 20, indicating the number of test cases to follow. Then follow N lines, each describing a test case. Each test case starts with an integer 1 <= K <= 10, indicating the number of power strips in the test case. Then follow, on the same line, K integers separated by single spaces, O1 O2 . . . OK, where 2 <= Oi <= 10, indicating the number of outlets in each power strip.

 The input will consist of several test cases, each consisting of two parts.  The first part begins with an integer 1 <= n <= 50000, indicating the number of different years for which there is information. Next follow n lines. The ith of these contains two integers -10 9 <= yi <= 10 9 and 1 <= ri <= 10 9 indicating that there was ri millilitres of rain during year yi (note that the amount of rain during a year can be any nonnegative integer, the limitation on ri is just a limitation on the input). You may assume that yi < y i+1 for 1 <= i < n.  The second part of a test case starts with an integer 1 <= m <= 10000, indicating the number of queries to process. The following m lines each contain two integers -10 9 <= Y < X <= 10 9 indicating two years.  There is a blank line between test cases. The input is terminated by a case where n = 0 and m = 0. This case should not be processed.   Technical note: Due to the size of the input, the use of cin/cout in C++ might be too slow in this problem. Use scanf/printf instead. In Java, make sure that both input and output is buffered.

 The input contains several test cases. The first line of each test case is N, G and E, where N and G are as defined above and E < 5000 is the number of roads. Then follow E lines, each of which contains three integers: A and B, the ZIP codes of the endpoints, and φ, the time required to travel the road,φ < 1000. The last line of the input is a line containing a single 0.

 On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario consists of one line containing a non-empty string of zeros and ones of length at most 100.

 The input contains one or more lines ended with an integer pair “0 0”. Each of the above lines contains two integers n, k (n, k ≤ 500), respectively.

 Each data set consists of a number 0 < K <= 20 on a line by itself, followed by a line of K space-separated numbers ai. Each number is in the range 0 < ai < 10 7, and has at most 3 digits after the decimal point.  The input will be terminated by a zero on a line by itself.

 Input consists of a sequence of lines, each containing five nonnegative integers separated by whitespace. The five numbers are: a, b, s, m, and n, respectively. All numbers are positive integers not greater than 10000.  Input is terminated by a line containing five zeroes.  

 The first part of input consists of a line containing a number N (1 <= N <= 200), the number of brick types, and then N lines containing the copper concentration (between 1 and 999) and price (in cents) of each brick type. No brick costs more than 10 dollars.  The second part consists of a line containing a number C (1 <= C <= 100), the number of clients you are serving, followed by C lines containing M (1 <= M <= 20), CMin (1 <= CMin <= 999), and CMax (1 <= CMax <= 999) for each client.   All input numbers will be positive integers.  

 The first line of input contains a positive integer n satisfying 2 <= n <= 20, the number of candidates in the riding. n pairs of lines follow: the first line in each pair is the name of the candidate, up to 80 characters; the second line is the name of the party, up to 80 characters, or the word "independent" if the candidate has no party. No candidate name is repeated and no party name is repeated in the input. No lines contain leading or trailing blanks.  The next line contains a positive integer m <= 10000, and is followed by m lines each indicating the name of a candidate for which a ballot is cast. Any names not in the list of candidates should be ignored.  

 Input consists of a positive integer n <= 8, followed by n lines giving the rows of an n by n grid. This grid describes the maze you are trapped in. Written on the screen, north is up. Blocked locations are denoted by the character "O" (that's an uppercase "o"), while unblocked locations are indicated by the character ".". 

 Input consists of multiple problems, each on a separate line. Each problem consists of the integers p and q separated by a single space. Note that p and q will both fit into an unsigned long integer.  Input is terminated by a line consisting of two zeroes.  

 Standard input will contain the information for several trips. The information for each trip consists of a line containing a positive integer, n, the number of students on the trip, followed by n lines of input, each containing the amount, in dollars and cents, spent by a student. There are no more than 1000 students and no student spent more than $10,000.00. A single line containing 0 follows the information for the last trip. 

 Input consists of the dictionary followed by a number of word pairs. The dictionary consists of a number of words, one per line, and is terminated by an empty line. The pairs of input words follow; the words of each pair occur on a line separated by a space. 

 Standard input has two parts: the fare structure, and the license photos. The fare structure consists of a line with 24 non-negative integers denoting the toll (cents/km) from 00:00 - 00:59, the toll from 01:00 - 00:59, and so on for each hour in the day. Each photo record consists of the license number of the vehicle (up to 20 alphanumeric characters), the time and date (mm:dd:hh:mm), the word "enter" or "exit", and the location of the entrance or exit (in km from one end of the highway). All dates will be within a single month. Each "enter" record is paired with the chronologically next record for the same vehicle provided it is an "exit" record. "enter" records that are not paired with an "exit" record are ignored, as are "exit" records not paired with an "enter" record. You may assume that no two records for the same vehicle have the same time. Times are recorded using a 24-hour clock. There are not more than 1000 photo records. 

 The input to your program consists of several lines, each containing two non-negative integers, n and m, both less than 2^31.

 Your input consists of two programs separated by a blank line. No input line exceeds 80 characters and no program contains more than 1000 lines. Each label used in a goto statement appears to the left of exactly one statment; no label is repeated.

 Input is a number of lines, each with two numbers: an integer 1 <= n <= 30, and a real 0 <= t <= 1. Input is terminated by a line containing 0 0. This line should not be processed. 

 The first line of input contains c, the number of test cases. Each test case begins with n, t, m. m lines follow, each giving the arrival time for a car (in minutes since the beginning of the day), and the bank at which the car arrives ("left" or "right"). 

 Input consists of a number of cases. The data for each case start with 1 <= n <= 100000, the number of sticks for this case. The following n lines contain four numbers each, these numbers are the planar coordinates of the endpoints of one stick. The sticks are listed in the order in which Stan has thrown them. You may assume that there are no more than 1000 top sticks. The input is ended by the case with n=0. This case should not be processed. 

 Input consists of several test cases. The first line of input for each case contains 1 <= n <= 100 1 <= k <= 100 as defined above. For each game, a line follows containing p1, m1, p2, m2. 1 <= p1 <= n and 1 <= p2 <= n are distinct integers identifying two players; m1 and m2 are their respective moves ("rock", "scissors", or "paper"). A line containing 0 follows the last test case.

 Input consists of several test cases. Each test case is a sequence of Algol 68 definitions, as described above, one per line. A line containing "-" separates test cases. A line containing "--" follows the last test case.

 There may be several test cases. In the first line of each test case, there is an integer N (1 <= N <= 7), which represents the number of days you should analyze. Then there comes N lines, each contains two non-negative integers (each smaller than 10). The first integer represents how many hours Jinjin studies at school on the day, and the second represents how many hours she studies in the supplementary classes on the same day.   A case with N = 0 indicates the end of the input, and this case should not be processed.

 First line of the input consists of integers N, Z and M, 2 <= N <= 1000, 2 <= Z <= N, 0 <= M <= N - 2. N represents number of fields on the game-board and Z is a given goal-field.   Next line consists of M different integers that represent marks of fields having an obstacle. It is confirmed that fields marked 1 and Z do not contain an obstacle.

 The first line of the input contains an integer N, the number of verses in the song, 1 <= N <= 5.   The following 4N lines of the input contain the lines of the song. Maximal length of each line is 50.  

 First line of input contains three integers: A, B and K, 1 <= A, B, K <=100. A represents the number of rows, B the number of columns and K the number of thrown bombs.   Each of the next K lines contains integers R, S, P and T, describing a bomb thrown in the field at R-th row and S-th column with diameter P, 1 <= R <= A, 1 <= S <= B, 1 <= P <= 99, P is odd. If the pillbox is in the range of this bomb, T equals to 1; otherwise it is 0.  

 The input consists of several test cases. Each case begins with a line containing integers 0 < k, m <= 100 as defined above. k lines follow, each giving x,y,z - the location in space of a satellite at the scheduled time of attack. m lines then follow, each giving x,y,z - the location of a target tropical depression. Assume the earth is a sphere centred at (0,0,0) with circumference 40,000 km. All targets will be on the surface of the earth (within 10 -9 km) and all satellites will be at least 50 km above the surface. A line containing 0 0 follows the last test case. 

 There are several test cases. For each test case, there is one line of input containing y. A line containing 0 follows the last test case. 

 The menu is described as follows: a menuitem occupies a single line, and the sub-menuitems of a menuitem is listed just below this menu item. The description of the sub-menuitems starts with a "<" before the first sub-menuitem and ends with a ">" after the last sub-menuitem. "<" and ">" will take a whole line by itself. Since we may consider the menuitems in the top level belong to a global menu, there is always a "<" at the beginning of the input and a ">" at the end of the input.   Each menuitem may contain words and white spaces separating them. The length of a menuitem name is less than 50 characters.   There are no more than 10000 menuitems. It is confirmed that all the input are legal menuitems described above. 

 Input contains several test cases followed by a line containing 0. Jimmy has numbered each intersection or joining of paths starting with 1. His office is numbered 1, and his house is numbered 2. The first line of each test case gives the number of intersections N, 1 < N <= 1000, and the number of paths M. The following M lines each contain a pair of intersections a b and an integer distance 1 <= d <= 1000000 indicating a path of length d between intersection a and a different intersection b. Jimmy may walk a path any direction he chooses. There is at most one path between any pair of intersections. 

 Input consists of several test cases followed by a line containing -1. Each test case is a line containing an integer 0 <= n <= 30. 

 Input consists of several test cases. For each case, the first line of input contains 1 <= k <= 100, the number of courses Freddie has chosen, and 0 <= m <= 100, the number of categories. One or more lines follow containing k 4-digit integers follow; each is the number of a course selected by Freddie. Each category is represented by a line containing 1 <= c <= 100, the number of courses in the category, 0 <= r <= c, the minimum number of courses from the category that must be taken, and the c course numbers in the category. Each course number is a 4-digit integer. The same course may fulfil several category requirements. Freddie's selections, and the course numbers in any particular category, are distinct. A line containing 0 follows the last test case. 

 There are several test cases in the input. Each case starts with an integer L (1 <= L < 2000000000) representing the length of the road and M (1 <= M <= 5000) representing the number of sections that are assigned for other use.   The following M lines each describes a section. A line is in such format:   Start End   Here Start and End (0 <= Start <= End <= L) are both non-negative integers representing the start point and the end point of the section. It is confirmed that these sections do not overlap with each other.   A case with L = 0 and M = 0 ends the input.

 The input may contain several sets of test data. Each contains three integer numbers in a single line. The first number is speed u (0 < u < 10000), which takes meter per second as the unit. The second is the angle a (0 < a < 180), which is measured in degree. The last one is d (0 < d < 1000000), which is measured in meter.   A line with three zeros ends the input, and this line should not be processed.

 There are several test cases in the input.   The following lines describe test cases. Each line for one case is given in such format:   (n 1, n 2, ... n k ) 0 < n i <= 20, 0 < k <= 20   It gives the time when customers come. n i represents the interval time of each sequential customer. The parenthesis means that the customer will come periodically.  For example, assuming the first customer at time 1, if the customers arrive at 1, 3, 5, 7, 9, 11, 13, ... the representation is (2). The representation (1,3,7) represents that the customers will come at time 1, 2, 5, 12, 13, 16, 23, 24, 27, 34...   The example shown in Fig. 5 the description corresponds to the representation (1), and of course more customers will come in time 4, 5, 6, 7...   A line containing "(0)" ends the input.

 There are multiple test cases. Each contains two positive integers D and N in a single line, where D is the damage of the first attack of the catapult, and N is its life measured by the number of attacks it can make. D and N are both positive integers and not more than 2000000000.   Input ends with two zeros and this line should not be processed.

 There are multiply test cases. In the first line of each test case, there is an integer N (2 <= N <= 30), which indicates the number of jewellery-rooms (these rooms are numbered from 1 to N). Then comes N lines, each contains N non-negative integers, which are not larger than 100. The i-th integer in the j-th line represents the distance between room i and room j. It is clear that the distance between room i and room i is 0, and that the distance between room i and room j is a positive integer which is equal to the distance between room j and room i.   You may assume that Georgia and Bob are initially in room 1.   A case with N = 0 indicates the end of input, and this line should not be processed.

 There will be several test cases. The first line of each test case contains two integers N and M (1 <= N <= 1000, 1 <= M <= 100), which represent the number of magic stones the sorcerer has and the number of chests in the room. Each of the following N lines contains a string, which is the name of one magic stone the sorcerer has. After that, each of the following M lines describes one chest (of course, including the chest with "Sorcerer's Stone" in) is like this:     Magic Stone 1, Magic Stone 2, ... Magic Stone T: Magic Stone R  which means Magic Stone R is lying in this chest, and Magic Stone 1, Magic Stone 2, ..., Magic Stone T are needed to open the chest (1 <= T <= 9). You should notice that Magic Stone 1 to T - 1 is followed by a comma and a blank, while Magic Stone T is followed by a colon and a blank. All the names of magic stones are strings excluding commas or colons, and no longer than 20 characters.   A test case with N = M = 0 ends the input and should not be processed.

 The input contains several test cases. The first line in each case contains an integer N, no more than 300, where (N-1) is the number of places he has to deliver to. The following N lines describe N points including his current location and the (N-1) destinations he has to go to. These N points are described clockwise based on their locations from Jimmy's current location. Each line consists of two integers m and t. m is the number of packages ordered by this place, which is always 0 in the first line and positive integers in the other lines. t, measured in minute, represents the time to go from this point to the next (the next point of the (N-1)-th destinations is Jimmy's current location).   A test case with N = 0 indicates the end of input, and this case should not be processed.

 The first line contains an integer t (0 <= t < 1000000), and an integer x (0 < x < 10). The second line contains a single integer m (0 <= m < 1000). There are m lines following the second line, each has 2 integers d i (0 < d i < 1000000) and s i (0 < s i < 1000000).

 The input consists of multiple descriptions (data sets) of the creation moment. File structure is as follows:  N  LV  DIR POS NAME  ...  The first line defines the number of inhabitants (N<32000). Data set starting with value N=0 represents the end of the input file. The second line contains length of the world L(float) and velocity of inhabitants V(float). Both values are always positive. In next N lines the data about inhabitants are given in an order of increasing POS (positive direction):  DIR – initial direction ('p' or 'P' for positive and 'n' or 'N' for negative)  POS – position in the time of creation (0<=POS<=L)  NAME – name of inhabitant (string up to 250 characters)  Input values within one line are separated with at least one space and there will be no empty lines in input. You may assume that input is always correct and that each data set has only one unique solution. 

 Each data set in the input stands for a particular set of songs that must be recorded on a tape. A data set starts with the number N (fits a 16 bit integer) of songs. Follow N the song specifications, and in the end, a number representing the position of a song S on the optimized tape. A song specification consists of the song identifier (fits an integer), the length of the song (fits a 16 bit integer), and the frequency of playing the song (a floating-point number). The program prints the identifier of the song S.  White spaces can occur freely in the input. The input data are correct and terminate with an end of file.

 The input data will start with the number of the test cases. For each test case, 9 lines follow, corresponding to the rows of the table. On each line a string of exactly 9 decimal digits is given, corresponding to the cells in this line. If a cell is empty it is represented by 0.

 The program input is from a text file. Each data set in the file stands for a particular set of points. For each set of points the data set contains the number of points, and the point coordinates in ascending order of the x coordinate. White spaces can occur freely in input. The input data are correct.

 The first line of input contains a single integer T indicating the number of test cases. Each test case starts with number N of patches, and four integer numbers – the coordinates X and Y of Mothy’s position and coordinates U and V of his mother’s position, separated by white spaces (-10000 <= X, Y, U, V <= 10000). Each patch is described on a separate line starting with the number of vertices and followed by a pair of integer coordinates (-10000 <= Xi, Yi <= 10000) for each of the vertices of the patch, separated by white spaces. The total number of vertices of polygons will not exceed 300. 

 Write a program that reads several data sets from a text file. Each data set encodes a road map and starts with four integers: the number 1<=n<=1100 of towns on the map, the number 0<=m<=5000 of roads, the departure town 0<=A<=n-1, and the destination town 0<=B<=n-1. Follow m data quintuples (u,v,fuv[L]fvu), where u and v are town identifiers (integers in the range 0..n-1), 100<=fuv, fvu<=100 are integer fees for driving on the road (u,v), and 1<=L<=100 is the integer length of the road. The quintuples may occur in any order. Except the quintuples, which do not contain white spaces, white spaces may occur freely in input. Input data terminate with an end of file and are correct.

 Every input line contains one natural number n (0 < n <= 1000).

 The input consists of multiple datasets, each in the following format. The last dataset is followed by a line containing five zeros (separated by a space).   n m p a b  t1 t2 ... tn  x1 y1 z1  x2 y2 z2  ...  xp yp zp   Every input item in a dataset is a non-negative integer. If a line contains two or more input items, they are separated by a space.   n is the number of coach tickets. You can assume that the number of tickets is between 1 and 8. m is the number of cities in the network. You can assume that the number of cities is between 2 and 30. p is the number of roads between cities, which may be zero.   a is the city index of the starting city. b is the city index of the destination city. a is not equal to b. You can assume that all city indices in a dataset (including the above two) are between 1 and m.   The second line of a dataset gives the details of coach tickets. ti is the number of horses specified in the i-th coach ticket (1<=i<=n). You can assume that the number of horses is between 1 and 10.   The following p lines give the details of roads between cities. The i-th road connects two cities with city indices xi and yi, and has a distance zi (1<=i<=p). You can assume that the distance is between 1 and 100.   No two roads connect the same pair of cities. A road never connects a city with itself. Each road can be traveled in both directions. 

 The first line of the input will contain a positive integer value N (less than 60,000) indicating the number of cases. Each case will consist of two words, possibly empty, each given on a single line (for a total of 2N additional lines).  Although they may have zero length, the words are simple ---the letter are all lowercase and are taken from the usual twenty-six letter English alphabet (abcdefghijklmnopqrstuvwxyz). The longest word is pneumonoultramicroscopicsilicovolcanoconiosis. 

 The input contains several programs, separated with an empty line. Each of them is a correct Tomato program. 

 The input consists of datasets. The entire input looks like:     the number of datasets (=m)   1st dataset   2nd dataset   ...   m-th dataset   The number of datasets, m, is no more than 100. Each dataset is formatted as follows.     the initial amount of the fund for operation   the number of years of operation   the number of available operations (=n)   operation 1   operation 2   ...   operation n   The initial amount of the fund for operation, the number of years of operation, and the number of available operations are all positive integers. The first is no more than 100000000, the second no more than 10, and the third no more than 100.     Each ``operation'' is formatted as follows.   simple-or-compound annual-interest-rate annual-operation-charge  where simple-or-compound is a single character of either '0' or '1', with '0' indicating simple interest and '1' compound. annual-interest-rate is represented by a decimal fraction and is an integral multiple of 1/8192. annual-operation-charge is an integer not exceeding 100000.   

 The input consists of multiple datasets. The end of the input is indicated by a line which contains a zero.   A dataset is given as follows.   n  Polygonal line0  Polygonal line1  Polygonal line2  ...  Polygonal linen  n is the number of polygonal lines for the object of search on xy-plane. n is an integer, and 1 <= n <= 50. Polygonal line0 indicates the template.   A polygonal line is given as follows.   m  x1 y1  x2 y2  ...  xm ym    m is the number of the vertices of a polygonal line (3 <= m <= 10). xi and yi, separated by a space, are the x- and y-coordinates of a vertex, respectively (-10000 < xi < 10000, -10000    

 The input is as follows. The first line contains a positive integer n (<= 500) that indicates the number of the following lines. The k+1 th line is the specification of the k th computation (k=1, ..., n).   n  specification1  specification2  ...  specificationn   Each specification is described in a line:   MCXI-string1 MCXI-string2  The two MCXI-strings are separated by a space.   You may assume that the sum of the two MCXI-values of the two MCXI-strings in each specification is less than or equal to 9999. 

 The input consists of multiple maps, each representing the size and arrangement of the room. A map is given in the following format.   w h  c11 c12 c13 ... c1w  c21 c22 c23 ... c2w  ...  ch1 ch2 ch3 ... chw   The integers w and h are the lengths of the two sides of the floor of the room in terms of widths of floor tiles. w and h are less than or equal to 20. The character cyx represents what is initially on the tile with coordinates (x, y) as follows.   '.' : a clean tile  '*' : a dirty tile  'x' : a piece of furniture (obstacle)  'o' : the robot (initial position)   In the map the number of 'dirty tiles' does not exceed 10. There is only one 'robot'.   The end of the input is indicated by a line containing two zeros. 

 Each line of input will contain two positive integers, L and U, with L < U. The difference between L and U will not exceed 1,000,000. 

 Each line of input contains 5 integers between 1 and 6, indicating the values of the five dice thrown in each round. There are 13 such lines for each game, and there may be any number of games in the input data.

 Your input will consist of the information for a number of RFPs and associated proposals. The information for each RFP will consist of:    a line containing two integers: 0 < n <= 1000, the number of requirements, and p the number of proposals. The line 0 0 indicates there are no more RFPs.  n lines naming the requirements. Each requirement is a string up to 80 characters long, terminated by the end of line. All strings are case sensitive.  for each of the p proposals:   a line naming the proposal (up to 80 characters terminated by end of line)  a line containing a floating point number d and an integer 0 <= r <= n: d is the price; r is the number of met requirement lines to follow.  for each met requirement, the name of the requirement, each on a separate line. All requirements are from the RFP requirement list, and no requirements are duplicated.   

 The test file begins with a number n, n <= 10, the number of test cases. In each test case, there are two FSMs to read in. The first FSM is the program and the second is the requirement. Each FSM begins with a line of three numbers s e i, where s is the number of states, e is the number of edges. 2 <= s <= 500 and 2 <= e <= 2000, and i is the starting state of the FSM. Following the three numbers are e lines of edges. Each edge begins with starting state, action symbol (aâ€“z), and the destination state. A trap state is represented by '-1'. A blank and empty line is used to separate the data of two FSMs.

 The first line of input is an integer n <= 20 indicating the number of candidates. The next n lines consist of the names of the candidates in order. Names may be up to 80 characters in length and may contain any printable characters. Up to 1000 lines follow; each contains the contents of a ballot. That is, each contains the numbers from 1 to n in some order. The first number indicates the candidate of first choice; the second number indicates candidate of second choice, and so on.  

 Standard input consists of a number of lines, each containing two floating point numbers indicating the (x,y) coordinates of a chip in the square surface of cookie dough. Each coordinate is between 0.0 and 50.0 (cm). Each chip may be considered a point (i.e. these are not President's Choice Cookies). Each chip is at a different position. There are at most 200 chocolate chips. 

 The first line contains the number of hands w, w <= 100. Then the w hands are listed one by one. Note that each hand comes from a complete deck of52 cards. Each hand is listed in one line with 5 cards. Each card consists of two upper case letters. The first letter is its suit, and the second letter is its rank. There is a blank between two cards. The cards in one hand are not sorted at all.

 The input consists of several test cases.   Each test case begins with a line of 5 numbers - the direction of FS as a vector (Fx, Fy), the number N, 1 <= N <= 100 of all sites on the map, the starting site number S, 1 <= S <= N where the herd enters this map, and a real number D the limit of trip distance between adjacent sites.Each of the next N lines consists of a pair of real numbers x and y representing the coordinates of the intermediate feeding sites.   The last test case is followed by a line consisting of 5 zeros. Each of the real numbers (including FS's components and D) has 1 digit after the decimal point and is within the range -999999 <= x, y <= 999999. The input has been checked against relevant degenerate cases. That is, you can be sure that deciding whether a turn is less than or greater than 90 degrees will never give an answer extremely close to 90 degrees, provided that all computations are done in at least single precision arithmetics. Ditto for other tests.

 The first line contains the number n of test cases. Each of the following n lines contains the sequence a, b, c, d, e, f, g, h, i of integers.

 The first line contains the number of test cases w, w <= 6. Then the w test cases are listed one by one. Each test case consists of 8 lines, 4 characters per line. The first 4 lines are the initial board position. The remaining 4 lines are the final board position. The i-th line of a board is the board at the i-th row. A character 'b' means a black stone, a character 'w' means a white stone, and a '*' means an empty cell.

 The first line contains the number m of test cases. Each test case starts with a line containing two numbers k and n, where 1 <= k <= 10 is the number of DVD drives and 1 <= n <= 100 is the number of requests. In the following n lines, the i-th line contains the i-th request xi.

 The first line of the input file contains an integer m, m <= 10, which represents the number of test cases. The following m lines contain m score sequences in which each line contains a score sequence. Note that each score sequence contains at most ten scores.

 Each line of the input contains 5 integers n, a, b, s and t, which means hat there are n space stations, the two numbers marked on the space ship are a and b respectively, the space ship is at station s and wants to go to station t. The last line is followed by a 0, which means that there are no more test data. Assume that n < 2 31 and a, b < n.  

 The input consists of several test cases.  Each test case begins with a line of 2 real numbers and 1 integer - R0 the minimum radius, R1 the minimum radius, and n, 1 <= n <= 20 the number of islands.  Each of the next n lines represents an island. The first number ni, 3 <= n <= 20 on a line gives the number of vertices of this island. The following ni, pairs of real numbers represent the x- and y- coordinates of the vertices around the island.  The next line gives the path. The first number m, 2 <= m <= 20 gives the number of vertices of the path. The following m pairs of real numbers represent the x- and y-coordinates of the vertices along the path.  The last test case is followed by a line consisting of three zeros. Every real number t in the input file has at most one digit after the decimal  point and âˆ’9999.9 <= t <= 9999.9.

 The input contains data for one to thirty boards, followed by a final line containing only the integer -1. The data for a board starts with a line containing a single positive integer n, 4 <= n <= 34, which is the number of rows in this board. This is followed by n rows of data. Each row contains n single digits, 0-9, with no spaces between them. 

 The input file will contain data for one or more simulations. The end of the input is signalled by a line containing -1. Each simulation will begin with the integer width of the shelf, s, 5 <= s <= 100, followed by a series of add and remove events. An add event is a single line beginning with an upper case 'A' followed by the book ID, followed by the integer width of the book, w, 0 < w <= s. A remove event is a single line beginning with an upper case 'R' followed by the the book ID. Finally, the end event is a line containing only a single upper case 'E'. Each number in an event is preceded by a single blank.

 The input contains from 1 to 20 datasets followed by a line containing only two zeroes, "0 0". The first line of each dataset contains the maximum coordinate N and the number of total moves M where 3 < N < 21, 4 < M < 250, and M is odd. The rest of the dataset contains a total of M coordinate pairs, with one or more pairs per line. All numbers on a line will be separated by a space. M being odd means that Black will always be the last player. All data will be legal. There will never be a winning move before the last move. 

 The input consists of one or more test cases, each of which is a single line containing four positive integers A, B, C, and D, separated by a space, representing an AxBmm image and a CxDmm piece of paper. All inputs will be less than one thousand. Following the test cases is a line containing four zeros that signals the end of the input.

 There are one to twenty-five data sets, followed by a final line containing only the integers -1 -1. A data set starts with a line containing two positive integers n, 1 <= n <= 12, which is the number of courses in this data set and m, 2 <= m <= 6, which is the maximum number of courses that can be taken in any single semester. The next line contains the n course identifiers. Each is a 1-5 character string from the set {a-z, 0-9}. Following the course identifiers is the individual course information. This consists of n lines, one line for each course, containing the course identifier, semester offered ('F'=Fall, 'S'=Spring, 'B'=Both semesters), the number of prerequisite courses, p, 0 <= p <= 5, and finally p prerequisite course identifiers. The first example data set below corresponds to the problem described above.  

 There are several test cases. The battlefield and paths are all the same for all test cases as shown in Figure 1. Each test case starts with integers N (1 <= N <= 10) and M (1 <= M <= 1000), separated by a blank. N represents the number of the tanks playing in the battlefield, and M represents the number of commands to control the tanks' moving. The following N lines give the initial information (at time 0) of each tank, in the format:     Name x y α  The Name of a tank is consisted of no more than 10 letters. x, y, α are integers and x, y ∈ {0, 10, 20, ..., 120}, α ∈ {0, 90, 180, 270}。Each field is separated by a blank.   The following M lines give commands in such format:     Time Name Content  Each field is separated by a blank. All the commands are giving in the ascending order of Time (0 <= Time <= 30), which is a positive integer meaning the timestamp when the commands are sent. Name points out which tank will receive the command. The Content has different types as follows:      MOVE When receiving the command, the tank starts to move in its facing direction. If the tank is already moving, the command takes no effect.   STOP When receiving the command, the tank stops moving. If the tank is already stopped, the command takes no effect.   TURN angle When receiving the command, the tank changes the facing direction α to be ((α + angle + 360) mod 360), no matter whether it is moving or not. You are guaranteed that ((α + angle + 360) mod 360) ∈ {0, 90, 180, 270}. TURN command doesn't affect the moving state of the tank.   SHOOT When receiving the command, the tank will shoot one shot in the direction it's facing.    Tanks take the corresponding action as soon as they receive the commands. E.g., if the tank at (0, 0), α = 90, receives the command MOVE at time 1, it will start to move at once and will reach (0, 1) at time 2. Notice that a tank could receive multiple commands in one second and take the action one by one. E.g., if the tank at (0, 0), α = 90, receives a command sequence of "TURN 90; SHOOT; TURN -90", it will turn to the direction α = 180, shoot a shot and then turn back. If the tank receives a command sequence of "MOVE; STOP", it will keep still in the original position.   Some more notes you need to pay attention:    If a tank is hit by an explosion, it will take no action to all the commands received at that moment. Of course, all the commands sent to the already destroyed tank should also be omitted.  Although the commands are sent at discrete seconds, the movement and explosions of tanks and shots happen in the continuous time domain.  No two tanks will meet on the path guaranteed by the input data, so you don't need to consider about that situation.  All the input contents will be legal for you.   A test case with N = M = 0 ends the input, and should not be processed.  

 The input consists of one or more test cases, followed by a line containing only zero that signals the end of the input. Each test case consists of a single line of five or more integers, which are separated by a space. The first integer N is the number of different colors (3 <= N <= 12). Following that are N different nonnegative integers, each at most 1,000, that specify the amount of each color needed. Last is a nonnegative integer G <= 1,000 that specifies the amount of gray needed. All quantities are in ml.  

 The input file begins with a line containing a single integer specifying the number of problem sets in the file. Each problem set is specified by four base 10 numbers on a single line, n d b e, where n and d are the numerator and denominator of the rational number and 0 <= n <= 5,000 and 1 <= d <= 5,000. b and e are the beginning and ending positions for the desired range of digits, with 0 <= b,e <= 250 and 0 <= (e-b) <= 20. Note that 0 is the position immediately to the right of the decimal point. 

 The input file will begin with a line containing a single integer representing the number of test cases, which is at most 25. Each test case will begin with a line containing a single positive integer n representing the number of rows in the map, followed by a single non-negative integer d representing the maximum leaping distance for the lizards. Two maps will follow, each as a map of characters with one row per line. The first map will contain a digit (0-3) in each position representing the number of jumps the pillar in that position will sustain before collapsing (0 means there is no pillar there). The second map will follow, with an 'L' for every position where a lizard is on the pillar and a '.' for every empty pillar. There will never be a lizard on a position where there is no pillar.   Each input map is guaranteed to be a rectangle of size n x m, where 1 <= n <= 20 and 1 <= m <= 20. The leaping distance is always 1 <= d <= 3.

 The input will consist of one or more lines, terminated by end-of-file. Each line of the input will contain one tire descriptor, as discussed in the preceding paragraphs. All numerical quantities will be positive integers. Exactly one blank space will separate consecutive items (including the slash) on the input line. 

 The input consists of a number of test cases. Each test case starts with a line containing the integer n, which is at most 100. Each of the next n lines gives a pair of integers xi and yi specifying vi. The coordinates are less than 1000 in magnitude. The end of input is specified by n = 0. 

 The input consists of a number of lines. Each line contains input for one instance of the problem: three positive integers representing the values for B, W, and C, as described above. The input is terminated with a line where B = W = C = 0.

 The input consists of a number of cases. Each case starts with a line containing the integers M, N, and S separated by spaces (10 <= M, N <= 256, 1 <= S <= 4). The next M lines contain the rows of the image A specified by N characters that are '.' (0) or '*' (1). The next 2S+1 lines specify the structuring element B in a similar manner. The input is terminated by M = N = S = 0. 

 The input consists of a number of lines, each representing one instance of the problem. Each line contains three positive integers which represent the values of M, N, and T. You may assume that 2 <= M < N <= 200 and M <= T <= 2000. The input is terminated by a line containing three zeroes.

 The first line of input contains the number of cases to follow. For each case, there is one line of input containing at least two but no more than 10 decimal digits. (The decimal digits are 0, 1, ..., 9.) No digit appears more than once in one line of the input. The digits will appear in increasing order, separated by exactly one blank space.

 Each line of input contains a positive integer in the range 1..999999999 which represents an odometer reading. (Leading zeros will not appear in the input.) The end of input is indicated by a line containing a single 0. You may assume that no odometer reading will contain the digit 4.

 The input consists of a number of test cases. Each test case starts with the integer b (1 <= b <= 100) called the base. On the next line is the integer i (1 <= i <= 100) called the iteration count. And finally, the last line contains the number n (1 <= n <= 7), which is the number of decimal digits to output. The input is terminated when b = 0. 

 The input consists of a number of cases. Each case consists of two integers a, b (0 <= a, b <= 13, a + b <= 13). The input is terminated by a = b = -1. 

 There are several test cases. Each test case starts with a line consisting of one positive integer N (0 < N < 10), which is the number of the squares. The next line contains four decimal numbers: xa, ya, xb, yb, which denote two points A (xa, ya) and B (xb, yb). The radial lines OA and OB form the angle. Each of the following N lines contains a decimal number, which is the edge length of a square. All the decimal numbers mentioned above are in the range [1, 20]. A test case with N = 0 ends the input, and should not be processed.

 There are several test cases. Every test case starts with a line containing two positive integers N (1 <= N <= 2 10) and M (1 <= M <= 2 11) separated by a space, the first integer represents the number of types of keys and the second integer represents the number of doors. The 2N keys are numbered 0, 1, 2, ..., 2N - 1. Each of the following N lines contains two different integers, which are the numbers of two keys in a pair. After that, each of the following M lines contains two integers, which are the numbers of two keys corresponding to the two locks in a door. You should note that the doors are given in the same order that Ratish will meet. A test case with N = M = 0 ends the input, and should not be processed.

 There are several test cases. The first line of each test case contains an integer M (1 <= M <= 200), which is the length of a section of straight raceways. The next several lines will contain a map of an F1 circuit. A circuit map only contains the circuit, some white spaces and some blank lines. The description will occupy 50 lines or less, and the number of characters in each line will not exceed 100. A test case with M = 0 ends the input, and should not be processed.

 There are several test cases. Each test case starts with a line containing two numbers N and M (1 <= N <= 10, 1 <= M <= 1000). N is the number of switches in the machine and M is the number of infected operations Mike has done. Each of the following M lines contains a switch state of the machine. A test case with N = M = 0 ends the input and should not be processed.

 There are several test cases. Each test case has three parts of input. The first part contains several lines indicating the original marks with the one of the following two formats:     M  or:     M x y  Here M is the mark symbol, and x and y are integers in the range of [0, 100]. The first format means that we don't know the position of the mark. The second format means that we know the position of the mark is (x, y). In this part, one mark will be mentioned at most once.   The second part contains some instructions with the following formats:     N A B C  Here N (= 1, 2 or 3) indicates which kind of instruction is used. A, B are symbols of the marks you have already had, and C is the symbol of a new mark you will get. You may assume that A and B are different marks and have been mentioned before, and it's the first time for C to show up.   The third part is one line containing a mark symbol, of which we want to know the position. It is assured that this mark has been mentioned before.   A line with "END" indicates the end of the input.   To make it easier, we use 'A', 'B', ... and 'Z' as mark symbols, which implies there are no more than 26 marks.

 There are several test cases. The first line of each test case is an integer N (1 <= N <= 10000), which is the number of hotels. Each of the following N lines describes a hotel, containing two integers D and C (1 <= D, C <= 10000). D means the distance from the hotel to the seashore, and C means the cost of staying in the hotel. You can assume that there are no two hotels with the same D and C. A test case with N = 0 ends the input, and should not be processed.

 The input contains several test cases, and there are two sections in each test case. The first section is the original problem's input started by "#Start Input#" and ended by "#End Input#". The second section is the programmer's output started by "#Start Programmer's Output#" and ended by "#End Programmer's Output#". A line with "#End#" indicates the end of the input.   You can assume that all the data in the first section is valid, but the second section may contain anything except the string "#End Programmer's Output#". The valid programmer's output always contains 1 line, which means if you find that the programmer's output is less or more than 1 line, it's obviously wrong. Each line in the programmer's output will not exceed 2000 characters.

 There are several test cases. Each test case starts with a line containing a number N (2 <= N <= 1000), which is the number of villages. Each of the following N lines contains three integers, x, y and z (0 <= x, y < 10000, 0 <= z < 10000000). (x, y) is the position of the village and z is the altitude. The first village is the capital. A test case with N = 0 ends the input, and should not be processed.

 The input file consists of multiple scenarios. Each scenario begins with an integer 100 >= n >= 1 followed by n insignificant words, all in lower case, one per line with no extra white space. (A line containing 0 indicates end of input.) Following this are one or more test cases for this scenario, one per line, followed by a line containing the phrase "LAST CASE". Each line containing a test case begins with an abbreviation (uppercase letters only) followed by a phrase (lowercase letters and spaces only). The abbreviation has length at least 1 and the phrase contains at least one significant word. No input line (including abbreviation, phrase, and spaces) will contain more than 150 characters. Within these limits, however, abbreviations and phrase words may be any length.

 Input will consist of multiple test cases. The first line of the input will contain a single integer indicating the number of test cases. Each test case starts with a single line containing two positive integers n and d, where n indicates the number of lines to follow containing information about the family tree, and d indicates the specific question being asked about the tree: if d = 1, then we are interested in persons with the most children (1 generation away); if d = 2, then we are interested in persons with the most grandchildren (2 generations away), and so on. The next n lines are of the form  name m dname1 dname2 ... dnamem  where name is one of the family members' names, m is the number of his/her children, and dname1 through dnamem are the names of the children. These lines will be given in no particular order. You may assume that all n lines describe one single, connected tree. There will be no more than 1000 people in any one tree, and all names will be at most 10 characters long.

 There will be multiple test cases. Each case will start with a line containing a pair of positive integers m and n, indicating the number of rows and columns of the configuration, respectively. The next line will contain a nonnegative integer k indicating the number of "live" cells in the configuration. The following k lines each contain the row and column number of one live cell, where row and column numbering both start at zero. The final test case is followed by a line where m = n = 0 -- this line should not be processed. You may assume that the product of m and n is no more than 16.

 There will be multiple test cases. Each test case will consist of 4 lines. The first line will contain two integers n and m, indicating the dimensions of the board, giving rows and columns, respectively. Neither integer will exceed 1000. The next three lines will each be of the form  k r1 c1 r2 c2 ... rk ck  indicating the location of the queens, knights and pawns, respectively. The numbering of the rows and columns will start at one. There will be no more than 100 of any one piece. Values of n = m = 0 indicate end of input.

 The input consists of multiple datasets. The end of the input is indicated by a line containing three zeros separated by a space. It is not a dataset.  The format of each dataset is as follows.  m c n  k 1 b 11 ... b 1k1 ...  k n b n1 ... b nkn Here, all data items are positive integers. m is the number of desks not exceeding 10. c is the number of books allowed to put on a desk, which does not exceed 30. n is the number of students not exceeding 100. k i is the number of books requested by the i-th student, which does not exceed 50. b ij is the ID number of the book requested by the i-th student on the j-th turn. No two books have the same ID number. Note that a student may request the same book more than once. b ij is less than 100.  Here we show you an example of cost calculation for the following dataset.  3 1 2  3  60 61 62  2  70 60  In this dataset, there are 3 desks (D1,D2,D3). At most 1 book can be put on each desk. The number of students is 2. The first student requests 3 books of which IDs are 60, 61, and 62, respectively, and the second student 2 books of which IDs are 70 and 60, respectively.  The calculation of the cost for this dataset is done as follows. First, for the first request of the first student, the librarian takes the book 60 from the shelf and puts it on D1 and the first student goes to the end of the queue, costing 5. Next, for the first request of the second student, the librarian takes the book 70 from the shelf, puts it on D2, moves the book 60 from D1 to D3, and finally moves the book 70 from D2 to D1, costing 13. Similarly, the cost for the books 61, 60, and 62, are calculated as 14, 12, 14, respectively. Therefore, the total cost is 58.

 There will be multiple test cases for this problem. Each test case will start with a pair of integers n (<= 15) and m (<= 20) on a line indicating the number of buildings (numbered 1 through n) and the number of potential inter-building connections, respectively. (Values of n = m = 0 indicate the end of the problem.) The following m lines are of the form b1 b2 c (all positive integers) indicating that it costs c to connect building b1 and b2. All connections are bidirectional.

 Input will consist of multiple test cases. The first line of each case will be a positive integer n <= 1000 which will indicate the number of rooms in the museum. After this will be n lines, each containing a description of one room. Each room will be rectangular in shape and will be described by a line of the form  x1 y1 x2 y2  where (x1, y1) and (x2, y2) are opposing corner coordinates (integers) of the room. No two rooms will overlap, though they may share a side. If the shared side is of length m > 2, then a door of length mâˆ’2 exists between the two rooms, centered along the shared length. No square of any size will overlap more than two rooms. All x and y values will be <= 1, 000, 000. An input line of n = 0 terminates input and should not be processed.

 There will be a series of test cases. Each test case is one photograph described by a line containing a positive integer n (<= 1000), the number of distinct spots in the photograph, followed by n lines containing the integer coordinates of the spots, one (x, y) pair per line. All coordinates are between 0 and 10000. The last photo description is followed by a line containing a zero, marking the end of the input. This line should not be processed.

 There will be multiple test cases. Each test case will be contained on one line. Each line will start with an even integer n followed by n positive integers. A value of n = 0 indicates end of input. You may assume that n is no more than 1000. Furthermore, you may assume that the sum of the numbers in the list does not exceed 1,000,000.

 The input is a sequence of positive integers each in a separate line. The integers are between 2 and 10 000, inclusive. The end of the input is indicated by a zero.

 The input is a sequence of datasets. A dataset consists of a header and a body appearing in this order. A header is a line containing one positive integer n and the body following it consists of n lines. You can assume that 1 <= n <= 4. Each line in a body contains six color names separated by a space. A color name consists of a word or words connected with a hyphen (-). A word consists of one or more lowercase letters. You can assume that a color name is at most 24-characters long including hyphens.  A dataset corresponds to a set of colored cubes. The integer n corresponds to the number of cubes. Each line of the body corresponds to a cube and describes the colors of its faces. Color names in a line is ordered in accordance with the numbering of faces shown in Figure 5. A line     color1 color2 color3 color4 color5 color6  corresponds to a cube colored as shown in Figure 6.  The end of the input is indicated by a line containing a single zero. It is not a dataset nor a part of a dataset.        

 The input consists of one or more datasets. A dataset has the following format:  x y  p1P1 q1Q1  p2P2 q2Q2 ...  pyPy qyQy  s0  s1 ...  s x-1 t0  t1 ...  t x-1 x is the number of parking lines, which are numbered from 0 to x-1. y is the number of exchange lines. Then y lines of the exchange line data follow, each describing two ends connected by the exchange line; pi and qi are integers between 0 and x-1 which indicate parking line numbers, and Pi and Qi are either "E" (East) or "W" (West) which indicate the ends of the parking lines.  Then x lines of the arrival (initial) configuration data, s0, ... , s x-1, and x lines of the departure (target) configuration data, t0, ... t x-1, follow. Each of these lines contains one or more lowercase letters "a", "b", ..., "z", which indicate types of cars of the train in the corresponding parking line, in west to east order, or alternatively, a single "-" when the parking line is empty.  You may assume that x does not exceed 4, the total number of cars contained in all the trains does not exceed 10, and every parking line has sufficient length to park all the cars.  You may also assume that each dataset has at least one solution and that the minimum number of moves is between one and six, inclusive.  Two zeros in a line indicate the end of the input.

 The first line of the input gives the number of datasets. Then the specified number of datasets follow. A dataset has the following format.  r  s  w1 ...  w s r is a decimal fraction representing the width of the room, which satisfies 0 < r < 10. s is the number of the stones. You may assume 1 <= s <= 6. wi is the weight of the i-th stone, which is an integer. You may assume 1 <= wi <= 1000.  You can assume that no mobiles whose widths are between r - 0.00001 and r + 0.00001 can be made of given stones.

 The input consists of multiple datasets each corresponding to a race situation. The format of a  dataset is as follows.  n  a1 a2 . . . an  b  r v e f  The meaning of each of the input items is given in the problem statement. If an input line contains two or more input items, they are separated by a space.  n is a positive integer not exceeding 100. Each of a1, a2, ..., and an is a positive integer satisfying 0 < a1 < a2 < . . . < an <= 10000. b is a positive decimal fraction not exceeding 100.0. r is a nonnegative integer satisfying 0 <= r <= an - 1. Each of v, e and f is a positive decimal fraction. You can assume that v - e * (an - 1 - r) >= 0.01 and v - f * r >= 0.01.  The end of the input is indicated by a line with a single zero.

 The input is a series of distance matrices, followed by a line consisting of a single '0'. Each distance matrix is formatted as follows.  N  a11 a12 ... a1N  a21 a22 ... a2N  ...  ...  ...  ...  aN1 aN2 ... aNN    N is the size, i.e. the number of rows and the number of columns, of the matrix. aij gives the distance between the i-th leaf node (computer) and the j-th. You may assume 2 <= N <= 50 and the matrix is symmetric whose diagonal elements are all zeros. That is, aii = 0 and aij = aji for each i and j. Each non-diagonal element aij (i != j) satisfies 2 <= aij <= 30. You may assume there is always a solution. That is, there is a tree having the given distances between leaf nodes.

 The input consists of multiple datasets. The format of each dataset is as follows.    All data items are integers. P is the number of the cards, namely the number of the players. M is the number of rows and the number of columns of the matrix on each card. N k ij means the number written at the position (i, j) on the k-th card. If (i, j) != (p, q), then N k ij != N k pq. The parameters P, M, and N satisfy the conditions 2 <= P <= 4, 3 <= M <= 4, and 0 <= N k ij <= 99.  The end of the input is indicated by a line containing two zeros separated by a space. It is not a dataset.  

 The input consists of multiple datasets. Each dataset is given in the following format.  L  Polygon1  Polygon2    L is a decimal fraction, which means the required distance of two polygons. L is greater than 0.1 and less than 50.0.  The format of each polygon is as follows.  n  x1 y1  x2 y2  ...  xn yn  n is a positive integer, which represents the number of vertices of the polygon. n is greater than 2 and less than 15.  Remaining lines represent the vertices of the polygon. A vertex data line has a pair of nonnegative integers which represent the x- and y-coordinates of a vertex. x- and y-coordinates are separated by a single space, and y-coordinate is immediately followed by a newline. x and y are less than 500.  Edges of the polygon connect vertices given in two adjacent vertex data lines, and vertices given in the last and the first vertex data lines. You may assume that the vertices are given in the counterclockwise order, and the contours of polygons are simple, i.e. they do not cross nor touch themselves.  Also, you may assume that the result is not sensitive to errors. In concrete terms, for a given pair of polygons, the minimum width is a function of the given minimum distance l. Let us denote the function w(l). Then you can assume that |w(LÂ±10 -7)-w(L)| < 10 -4.  The end of the input is indicated by a line that only contains a zero. It is not a part of a dataset.

 The first line of input contains the number of test cases T (1 <= T <= 1000000). Then T lines follow. Every line only contains a number n (1 <= n <= 2000000000) representing the number of logs in the bottom layer.

 The first line of input consists of 3 integers N, A and B (2 <= N <= 500, 0 <= A <= 1000, 0 <= B <= 1000), which are the number of barns, the number of pairs of barns in which the cows hate each other and the number of pairs of barns in which the cows are friends with each other.   Next line contains 4 integer sx1, sy1, sx2, sy2, which are the coordinates of two different transferring point S1 and S2 respectively.   Each of the following N line contains two integer x and y. They are coordinates of the barns from the first barn to the last one.   Each of the following A lines contains two different integers i and j(1 <= i < j <= N), which represent the i-th and j-th barns in which the cows hate each other.   The same pair of barns never appears more than once.   Each of the following B lines contains two different integers i and j(1 <= i < j <= N), which represent the i-th and j-th barns in which the cows are friends with each other. The same pair of barns never appears more than once.   You should note that all the coordinates are in the range [-1000000, 1000000].  

 There will be a single test data in the input. You are given an integer N (4 <= N <= 100000) in the first input line.   The second line contains N integers, which are the initial attractive value of each potted flower. The i-th number is for the potted flower on the i-th position.   A single integer M (4 <= M <= 100000) in the third input line, and the following M lines each contains an instruction "A B" in the form described above.   Restriction: All the attractive values are within [-1000, 1000]. We guarantee the maximal sum will be always a positive integer.  

 For every test block in the input, the first line contains an integer N (1 <= N <= 10000), representing the number of parts. Next follow N lines. Each line contains two integers a and b (0 <= a, b <= 100), representing the time consumed in S1, S2 for the corresponding part.   There is a single 0 after the last test block, and you should not process it.  

 The input contains a number of test cases. Each test case occupies a single line that contains the string S described above.   Restrictions: Only lowercase letters may appear in the input. 1 <= Length of S <= 400000.  

 The input contains a number of test cases. Each of the following blocks denotes a single test case.  A test case starts by an integer N (4 <= N <= 400) and N lines followed. The i-th line followed contains 3 * (N â€“ i + 1) integers, in which the j-th triple denotes Pairs[i, j + i - 1], Low[i, j + i - 1] and Up[i, j + i - 1].   Restrictions: -10000 <= Low[i, j] < Up[i, j] <= 10000, -100000 <= Pair[i, j] <= 100000. From the input given, you may assume that there is always a solution.  

 The input contains a number of test cases. Each of the following blocks denotes a single test case. A test case starts by an integer M (1 <= M <= 200) and M lines followed. The i-th line followed contains four integers: Pairs[i], Multi[i], Low[i], Up[i].   Restrictions: -25 <= Low[i] < Up[i] <= 25, 0 <= Pairs[i] <= 100000, 1 <= Multi[i] <= 20. From the input given, you may assume that there is always a solution.  

 Two strings with lowercase letters on two of the input lines individually. Number of characters in each one will never exceed 100000.

 There may be several test cases. Each contains a single line with two positive integers M and N, which means the shape of M * N. Here M * N = 60.

 The first line contains a single integer T, the number of test cases. The following lines contain 2 integers A, B(A, B < 32768) each. The size of input will not exceed 50K.

 The input contains a single test case with two lines. The first line is a single integer n(n < 10 1001), the second line is a single integer b(1 < b < 1001).

 The first line of input file contains initial text.   The second line contains then number of commands n. And the following n lines describe each command. There are two formats of commands:   I ch p: Insert a character ch before the p-th. if p is larger than the current length of text, then insert at end of the text.   Q i j: Ask the length of matching started from the i-th and j-th character of the initial text, which doesn't include the inserted characters.   You can assume that the length of initial text will not exceed 50000, the number of I command will not exceed 200, the number of Q command will not exceed 20000.

 The input consists of several data sets (at most 20). Each data set consists of four lines. The first line contains an integer 1 ≤ n ≤ 5, the number of candy types. The next line contains n integers w 1, ..., w n, where 1 ≤ w i ≤ 10 is the weight (in grams) of the i:th candy type. The third line contains an integer 1 ≤ q ≤ 10, the number of queries. The last line of a data set contains q integers P 1, ..., P q, where 1 ≤ P j ≤ 10 15 is the j:th query. Input is terminated by an incomplete data set where n = 0, which should not be processed.

 The first line of input contains two integers n and m, the following two lines contain n integers each, representing the difficulty values of each tree, from left to right. You may assume that n<10001, m<=min{2*n,1000}. The sum of all difficulty values would not exceed 2 30.

 The first line contains a single integer n, the number of curtains. The second line contains four integers minx,miny,maxx,maxy, where minx < maxx, miny < maxy. That means the floor lies in range [minx,miny]-[maxx,maxy]. The floor has a height of 0. The third line contains three integers lx, ly, lh, that is the position of the super light.   The following n lines each has 5 integers x1,y1,x2,y2,h, where minx < x1 < x2 < maxx, miny < y1 < y2 < maxy, 0 < h < lh. This means the curtain lies in range [x1,y1]-[x2,y2], the height of the curtain is h.   You may assume that n<=500, every other numbers in the input do not exceed 20000 in absolute value. If two numbers differ at most 10 -6, they are considered to be equal. Be careful that there may be many many cases.  

 The first line contains n and m, indicates the number of dogs and the number of feedings.   The second line contains n integers, describe the pretty value of each dog from left to right. You should notice that the dog with lower pretty value is prettier.   Each of following m lines contain three integer i,j,k, it means that Jiajia feed the k-th pretty dog in this feeding.   You can assume that n<100001 and m<50001.  

 The first line contains a single integer T, the number of test cases. And followed T cases.   The first line for each case contains two integers n, m(0 < n < 1001,m < 6000), the number of rooms and corridors in the cave. The next m lines each contains two integers u and v, indicating that there is a corridor connecting room u and room v directly.  

 The first line contains three integers n, q, s. There are n huts in XX Village, q messages to process, and Wind is currently in hut s. n < 100001 , q < 100001.   The following n-1 lines each contains three integers a, b and w. That means there is a road directly connecting hut a and b, time required is w. 1<=w<= 10000.   The following q lines each is one of the following two types:   Message A: 0 u   A kid in hut u calls Wind. She should go to hut u from her current position.  Message B: 1 i w   The time required for i-th road is changed to w. Note that the time change will not happen when Wind is on her way. The changed can only happen when Wind is staying somewhere, waiting to take the next kid.  

 The input consists of several test cases. Each test case consists of two parts.   The first part of a test case begins with an integer P, 1 ≤ P ≤ 10, the number of different products in this test case, on a line of its own. Then follows the description of the P products. Each product description consists of a line giving the name of the product, followed by a line containing an integer n, 1 ≤ n ≤ 100, giving the number of ingredients in this product. Then follow n lines, the i:th of which contains the name of the i:th most common ingredient of the product. In case of ties, the ingredients will be listed in arbitrary order. Optionally, every ingredient name can be followed by space, an integer p, 0 ≤ p ≤ 100 and a percentage sign. If this is present, it specifies the exact amount of this ingredient in the product. Otherwise, because all percentages in this problem are integers, the ingredient makes up at least one percent of the total product.   The second part of a test case begins with an integer Q, 1 ≤ Q ≤ 100, the number of queries. Then follow Q lines, each containing a query. A query is of the form "least X", or "most X", where X is the name of an ingredient. In the "most X" case, the ingredient X is guaranteed to be present in at least one of the products.   A name of a product or an ingredient is a string of alphabetic characters (A-Z and a-z), digits (0-9) and underscore. Case is significant. No name will be longer than 30 characters. You may assume that each declaration of content is valid.   The last test case to be processed is followed by a line consisting of the integer 0.  

 On the first line of the input is a single positive integer, telling the number of test cases to follow. The first line of each test case consists of two integers n r, where 1 ≤ n ≤ 50 is the size of the board and 1 ≤ r ≤ 50 the number of right-turners. The following r lines contain the coordinates x y of the right-turners. No two right-turners will have the same coordinates.   Finally, a line with two integers indicating the laser position follows. The bottom of column six is denoted by 6 0 and the start of row seven by 0 7. If the zeroes are replaced by n+1, the laser is placed at the top of column six and the end of row seven, respectively.  

 On the first line of the input is a positive integer, telling the number of test cases to follow. Each case starts with one line containing an integer n, the number of bowls (2 ≤ n ≤ 9). The following n lines each contain three positive integers h, r, R, specifying the height, the bottom radius and the top radius of the bowl, and r < R holds true. You may also assume that h, r, R < 1000. 

 The input will consist of several data sets. Each set will start with a line consisting of two numbers, n, m where 2 ≤ n ≤ 50000 is the number of key points on the map and 0 ≤ m ≤ 500 is the number of traps.  The next n lines will consist of 2 to 4 space-separated integers. Line i contains an integer n i, 1 ≤ n i ≤ 3, the number of passages connecting to key point i, followed by a list of the n i key points that the passages lead to, in clockwise order. The next m lines consist of single integers, the key points at which there are traps. Key points are labelled 1, ..., n and key point 1 is the (implicit) entrance to the outside world. Key point 1 is guaranteed to always have exactly one passage.  The last case will be followed by a line with m = n = 0, which should not be processed.

 On the first line of the input is a single positive integer N, telling the number of test cases (groups) to follow. Each case starts with one line containing the integer G (1 ≤ G ≤ 300): the number of students in the group. The following G lines each contain one SIN. The SINs within a group are distinct, though not necessarily sorted. 

 The first line in the input will contain the number of cases (at most 50).  Each case begins with a single line containing an integer n (1 ≤ n ≤ 20), the number of tiles that have already been played. Then follow n lines containing the coordinates and description of these tiles. The first character in the tile description belongs to the link facing up; the remaining colours follow as per usual in clockwise direction. Then follows a line with the description of the five tiles in hand, the tile descriptions being separated with a single space.   The mapping between the spaces and the coordinates is shown in the figure below (note that the playing field is infinite and not restricted to these coordinates). All tiles in the input will be valid and distinct. The layout will represent a position that could have arisen from a legal game. One of the played tiles will have coordinates 0,0. 

 The first line of the input consists of an integer T ≤ 100 giving the number of test cases. The first line of each test case consists of an integer N ≤ 500 giving the number of pupils. Next there will be one line for each pupil consisting of four space-separated data items:    an integer h giving the height in cm;  a character 'F' for female or 'M' for male;  a string describing the preferred music style;  a string with the name of the favourite sport.   No string in the input will contain more than 100 characters, nor will any string contain any whitespace.  

 One line with a positive number: the number of test cases. Then for each test case:     One line with three numbers N, F, B with 1 ≤ N,F ≤ 1000 and 1 ≤ B ≤ 1000000: the number of persons, the number of floors (0=ground floor, F=penthouse) and the number of boxes that are still on the ground floor.   N lines with two numbers fi and bi with 0 ≤ fi ≤ F and bi = 0 or bi = 1: the floors where the persons are initially and whether or not they have a box in their hands (1=box, 0=no box). 

 The input contains multiple test cases. For each test case, it contains two integers m (1 <= m <= 1000000), K (1 <= K <= 100000000). 

 Input consists of several cases. Each case starts with a line containing one positive integer n, which is the length of test vector. The integer n is less than 100. Following this there will be n positive integers, which are less then 10000, on the next line. The input will end with a case starting with n = 0. This case should not be processed.

 One non-negative integer N <= 1000 occupies the first line. On each of the 2nd ~ (N + 1)-th line, there will be four integers Xi, Yi, Ri, Ti. An arc of type Ti (1 <= Ti <= 4) with radius of Ri is situated on coordinate (Xi, Yi). We have â€“5000 <= Xi, Yi <= 5000, 1 <= Ri <= 5000.

 First line of input contains L (1 <= L <= 100000), T (1 <= T <= 30) and O (1 <= O <= 100000). Here O denotes the number of operations. Following O lines, each contains "C A B C" or "P A B" (here A, B, C are integers, and A may be larger than B) as an operation defined previously.

 First line contains two integer m (0 <= m <= 10), n (1 <= n <=2000000000). Here, m is the number of genetic disease segment, and n is the length of sequences.   Next m lines each line contain a DNA genetic disease segment, and length of these segments is not larger than 10.  

 First line – an integer N.  Second line – a sequence of N uppercase letters, denoting the expected word to be seen.  3rd – (2 + N)-th lines – each contains the information of a single atomic warhead: an uppercase letter (assigned to that warhead), and two integers Xi, Yi denoting the coordinate of this warhead. (-2000 <= Xi <= 2000, 0 < Yi <= 2000).  

 Input will contain multiple test cases. Each describes a star map.   For each test case, the first line of the input contains the number of stars N (2 <= N <= 1000). The following N lines describe coordinates of stars (two integers X and Y per line separated by a space, 0 <= X, Y <= 1000). There can be only one star at one point of the plane.  

 The huge file of all living camarades is simplified so as to obey the following format. The first line in the file is the number of camarades, say N , an integer 1<=N<=10 5 . Camarades are labeled from 0 to N - 1 . Follow N lines. Each line starts with the camarade label c , followed by the number of other camarades he/she knows, say n c , followed by the labels of those nc camarades. All these integers are separated by a single blank. It is assumed that nc is always less than 100. The last line in the file is the label of the camarade seeking help (say c1 ) followed by the label of the camarade he wants help from, say c2 ( c2 != c1 ). 

 The first line of the input contains the number of items n (1<=n<=10 5) . The second line contains one integer that corresponds to the bin length l<=10000 . We then have n lines containing one integer value that represents the length of the items. 

 The input has the following format. The first line contains the number N of hooks, ( 1<=N<=300 ). We then have the number l of lines in the file after the current one. Follow l lines with two different possible formats. The first one is:   D n   to deposit n clothes. The second one is:   W k   to indicate that clothes corresponding to ticket k must be withdrawn ( 0<=k < N ). 

 The first line contains the number n of cities in the country ( 1<=n<=1000 ) followed by the number q of existing subnetworks ( 0<=q<=8 ). Cities are identified by a unique integer value ranging from 1 to n . The first line is followed by q lines (one per subnetwork), all of them following the same pattern: The first integer is the number of cities in the subnetwork. The second integer is the the cost of the subnetwork (not greater than 2 x 10 6 ). The remaining integers on the line (as many as the number of cities in the subnetwork) are the identifiers of the cities in the subnetwork. The last part of the file contains n lines that provide the coordinates of the cities (city 1 on the first line, city 2 on the second one, etc). Each line is made of 2 integer values (ranging from 0 to 3000) corresponding to the integer coordinates of the city. 

 The first line of the input file contains the size of the lists n (this value can be as large as 4000). We then have n lines containing four integer values (with absolute value as large as 2 28 ) that belong respectively to A, B, C and D . 

 The first line contains the number n of orders (n can be as large as 800000 for some test cases). It is followed by n lines. Each of which describes an order made of two integer values: the amount of steel (in tons) required for the order (lower than 1000) and its due date (in seconds; lower than 2 x 10 6 ). 

 The first integer (on the first line) is the size s of the box. The second line contains an integer n that corresponds to the total number of mirrors in the box. We then have n lines, each of which containing 4 integers : the coordinates (x, y, z) of the corresponding mirror and its orientation (with respect to the above figure). Notice that the coordinates (x, y, z) of mirrors are pairwise distinct. 

 Input is a log of experiments performed over a given box. The first line is an integer e (0 < e<=32) . Integer e is the number of experiments performed. Then, come e lines, each line being made of two integers. The first integer i is a gate number expressing that the beam enters the box at gate i . The second integer o is either a gate number, expressing that the beam leaves the box at gate o , or the integer `-1', expressing that the beam is absorbed. 

 Input is made of two lines, the first line is number n ( 2<=n<=2 10 , n even). The number n is the size of images, one image is represented internally by a n x n pixel matrix (a j i) , where i is the row number and j is the column number. The pixel at the upper left corner is at row 0 and column 0.   The second line is a non-empty list of at most 32 words, separated by spaces. Valid words are the keywords id, rot, sym, bhsym, bvsym, div and mix, or a keyword followed by ``-". Each keyword key designates an elementary transform (as defined by Figure 1), and key- designates the inverse of transform key. For instance, rot- is the inverse of counter-clockwise 90 o rotation, that is clockwise 90 o rotation. Finally, the list k1, k2,..., kp designates the compound transform Ï† = k 1ok 2o ... ok p . For instance, ``bvsym rot-" is the transform that first performs clockwise 90 o rotation and then vertical symmetry on the lower half of the image.     

 The input contains a single line with the expression. Expression does not have any leading, trailing, or inner spaces and consists of at most 1000 characters.

 The first line of the input consists in the number n<=400 of lines. The second line contains m<=400 , the number of columns. Then comes the n lines of the matrix. Each line consists in m characters `0' or `1'.   The input matrix is chosen so that there exists only one smart permutation which preserves column 0 in position 0. To make things easier, any two columns share few common one entries. 

 The first line of the input contains an integer number m - the number of chimneys at the "Area 51" facility (1 <= m <= 100). The second line of the input file contains a string of m letters from A to Z that describe the chimneys that Nick saw from his left to his right. A single letter can be used more than once (if Nick saw the same shape more than once). Then follow m lines that describe chimneys on the map. Each line contains three tokens separated by spaces - chimney shape letter (from A to Z), and two integers xi and yi - chimney coordinates (-100 <= xi <= 100, 0 <= yi <= 100). On these m lines letters appear in arbitrary order, but each letter from A to Z appears the same number of times as on the second line of the input. No two chimneys have the same coordinates. 

 The first line of the input contains two integer numbers n and m (1 <= n <= 20000, 0 <= m <= 1000).   Here n is the number of vertices in the graph. Vertices are numbered from 1 to n. Edges of the graphare represented by a set of edge-distinct paths, where m is the number of such paths.   Each of the following m lines contains a path in the graph. A path starts with an integer number ki(2 <= ki <= 1000) followed by ki integers from 1 to n. These ki integers represent vertices of a path. Path can go to the same vertex multiple times, but every edge is traversed exactly once in the whole input file.   There are no multiedges in the graph (there is at most one edge between any two vertices). 

 The input contains nine lines. Each line contains the description of four cards that form a pile in the beginning of the game, from the bottom card to the top one.   Each card is described with two characters: one for rank, one for suit. Ranks are denoted as '6' for six, '7' for seven, '8' for eight, '9' for nine, 'T' for ten, 'J' for jack, 'Q' for queen, 'K' for king, and 'A' for ace.   Suits are denoted as 'S' for spades, 'C' for clubs, 'D' for diamonds, and 'H' for hearts. For example, "KS" denotes the king of spades.   Card descriptions are separated from each other by one space.  

 The input contains the output tape that the archaeologists have. The output tape is the sequence of colors of caves in order the robot visited them. The colors are denoted by capital letters of the English alphabet. The length of the tape does not exceed 300 characters.

 The first line of the input contains n - the number of days of Bill's life he is planning to investigate(1 <= n <= 100 000). The rest of the file contains n integer numbers a1, a2, ... an ranging from 0 to 10 6 - the emotional values of the days. Numbers are separated by spaces and/or line breaks.

 The input consists with three integer numbers - n1, n2, and n3 (1 <= n1, n2, n3 <= 1000). Here n1 is the minimum required number of guards during daylight shifts on workdays, n2 is the minimum required number of guards during daylight shifts on weekends, and n3 is the minimum required number of guards during nighttime shifts.

 The first line of the input contains two integer numbers m and n - the sizes of the board(1 <= m, n <= 20).   The following m lines contain n characters each and describe the marking of the board. Each unit squarefoot of the initial board is marked with some English letter or digit. Unit squares that belong to thesame piece are marked with the same character. All unit squares that are marked with some character form an edge-connected piece of hardwood. Capital and lower-case letters are considered different.  

 The first line of the input contains a single integer number m (1 <= m <= 1000). The following m lines contain IP addresses, one address on a line. Each IP address may appear more than once in a case.

 The input file contains n and k (1<= n, k <= 10 9).

 The first line of the input contains a single integer number n (1 ≤ n ≤ 20) - The number of the bombs. The following n lines describe the places of the bombs. Each line contains two integer numbers φ i and λ i (−90° < φ i < 90°, −180° < λ i ≤ 180°) - latitude and longitude of the bomb. No two bombs are situated in the same place.

 Input to this problem will begin with a line containing a single integer n indicating the number of Plinko boards that require analysis. The following lines contain the boards. Each board has four lines representing the probabilities that each peg will cause a chip falling on it to go right as a fraction (see the Introduction; the numerator and denominator of each fraction will be a single digit). Each board is followed by three lines, containing starting and ending column letters for the three chips dropped.   

 Input to this problem will begin with a line containing a single integer n indicating the number of words to define. Each of the following n lines will contain a single word. You need to expand at most one prefix and one suffix, and each word is guaranteed to have a non-empty root (i.e., if the prefix and/or suffix are removed, a non-empty string will remain). Each word will be composed of no more than 100 printable characters.   

 Input to this problem will begin with a line containing a single integer n indicating the number of cities in the input. Each city is made of 100 city blocks (10x10), each of which contains a skyscraper of an integer height from 0 to 9. A city is represented in the input as 10 lines of 10 integers, where the integers are the height values of the corresponding skyscrapers. This is followed by one line with four sets of coordinates. The first denotes your position; the other three denote the positions of players A, B, and C, respectively. Positions are given in the format (x, y, height), where x is measured from left to right on the input city grid, y is measured from top to bottom, height is measured from the ground up, and (0,0,0) is at the top left of the input city grid at ground level.   Note:    The coordinates of player positions may contain floating point numbers.  Neither you nor any of the other players will ever be inside a building or on one of its edges or sides. Your line of sight to another player will never be tangent to the side, edge, or corner of a building in such a way that it changes the outcome of the program.  

 Input to this problem will begin with a line containing a single integer n indicating the number of boards that require analysis. The following 5n lines contain the boards. Each board has a representation like that in the figure above, with a period (.) representing an empty space, lower case o representing a peg, and # representing a non-playable space.   

 Input to this problem will begin with a line containing a single integer n indicating the number of data sets. For each data set, the next six lines are a representation of the hex-hex grid's terrain, with F representing fields, W representing woods, H representing hills, M representing mountains, and U representing underwater cells.   The next line of each data set will consist of two integers M P (1 <= M, P <= 10) representing the number of units on each side of the battle. Following that are M lines with two values T L, where T is the type of unit (G for Guardian, M for Mage, S for Swordsman) and L is the starting location for that unit represented as described above. The P lines following that are a similar representation for the second side.   The next line of each data set consists of an integer V (1 <= V <= 100) representing the number of moves to test. The next V lines contain two values S E, where S and E are coordinates in the proper format describing the starting cell (and therefore unit) and attempted ending cell for that move. Note that moves may involve either of the sides.   

 Input to this problem will begin with a line containing a single integer n indicating the number of data sets. The first line in each data set will be in the format B I N G O X Y where:    B is the amount of numbers in the B category that have already been called;  I is the amount of numbers in the I category that have already been called;  N is the amount of numbers in the N category that have already been called;  G is the amount of numbers in the G category that have already been called;  O is the amount of numbers in the O category that have already been called;  X (where 1 <= X <= 19) is the number of input patterns (the winning patterns are described through combinations of the input patterns);  and Y (where 1 <= Y <= minimum (5, X)) is the minimum number of input patterns that must be combined to form a winning pattern.  The next 5 lines in each data set will be a series of 5 x 5 grids of the input patterns in a format where X represents a square that must be marked and O represents a square that does not have to be marked. Using the input patterns and Y given above, the entire set of winning patterns can be determined.  For example, given an X of 4, a Y of 2, and a set of input patterns as follows:   XXOOO OOOXX OOOOO OOOOOXXOOO OOOXX OOOOO OOOOOOOOOO OOOOO OOOOO OOOOOOOOOO OOOOO XXOOO OOOXXOOOOO OOOOO XXOOO OOOXXthe set of winning patterns (of which only one must be marked to have a bingo) is:   XXOXX XXOOO XXOOO OOOXX OOOXX OOOOOXXOXX XXOOO XXOOO OOOXX OOOXX OOOOOOOOOO OOOOO OOOOO OOOOO OOOOO OOOOOOOOOO XXOOO OOOXX XXOOO OOOXX XXOXXOOOOO XXOOO OOOXX XXOOO OOOXX XXOXX  

 Input to this problem will begin with a line containing a single integer n indicating the number of simulations in the file. For each simulation, the first line contains three integers X Y S (1 <= X,Y <= 50; 1 <= S <= 26) where X and Y represent the width and height of the board and S represents the number of different species represented on the board. The next Y lines are a textual representation of the board in turn 0, as shown above. The following S lines are the definitions of the rulesets for each species, given in the format described above. The last line of each data set is an integer T representing the number of turns to simulate. (For example, the figure above was a simulation of 4 turns.) 

 Input to this problem will begin with a line containing a single integer n indicating the number of input polynomials. Each of the following n lines contain:    a value of x at which the first derivative of the polynomial is to be evaluated;  and the polynomial.  All polynomials are expressed in terms of x, with single-digit integer coefficients (positive or negative) and non-negative single-digit integer powers of x. Polynomials do not contain spaces. Coefficients and powers of 1 (and powers of 0) are omitted from the notation, as is any "+" sign that might apply to the leading term. The leading term has the highest order, and is followed by the one (if any) with the next-highest order and so on.   

 The input contains several test cases. Each test case consists of three lines. The first line of a test case contains two integers N and Q indicating respectively the number of songs chosen by the DJ and the number of queries made by the participants (1 <= N <= 26 and 1 <= Q <= 1000). In the second line, there will be the N titles of the songs (the title of a song is a chain of alphanumerical characters of at least one and at most 100 characters) separated by single spaces. The last line of a test case contains a sequence of queries. Each query is a number k (1 <= k <= 100000000) corresponding to the kth song played in the party. The end of the input is indicated by N = Q = 0.

 Input consists of one or more lines, each of the form:   A U R V   where A is the amount of a vitamin/mineral present in one serving of the food product, U is the units in which A is measured, R is the minimum daily requirement for that vitamin/mineral, measured in the same units as A , and V is the name of that vitamin/mineral. A and R will be floating point numbers. U will be a string of alphabetic characters with no embedded spaces. V will be a string of characters, possibly including spaces. A , U , R , and V will be separated from one another by exactly one space, and V is terminated by the end of the input line. End of the input is signaled by a line in which A is negative. 

 Input will consist of one or more lines, each containing 3 positive integers. The first integer, K , indicates the size of the set of dominoes - a "double-K set" as described above. The remaining integers, w and h , indicate the size of the area in which the dominoes should be placed, measured in units the same size as one of the constituent squares of a domino. The end of input will be signaled by a non-positive K value.

 Input consists of one or more data sets consisting of the following information:     An integer, N , indicating the number of vertices making up the polygon. End of input is signaled by any N less than 3.  Next are N lines, each containing a pair of floating-point numbers, (xi, yi) , each denoting one vertex of the polygon. Vertices will be presented in clockwise order (relative to the closest interior point) proceeding around the perimeter of the polygon. The xi and yi values are in units of meters.  The data set is terminated by a floating point value indicating the amount of molten metal available (in cubic meters).  

 Input data will consist of multiple test cases. Each test case will consist of one line of input of the form    B E TEXT    where B is an integer giving the (inclusive) beginning location of the substring, E is an integer giving the (exclusive) ending location of the substring, and TEXT contains the text from which to extract the substring. The TEXT begins after a single blank character immediately following E , and continues to the end of the line. B and E will be specified so that 0 <= B <= E <= length(TEXT) .   End of input will be signaled by the line ``-1 -1 " with a single space following the second -1.   No input line will be longer than 200 characters.   The TEXT will be composed of characters with an ASCII value >= 32 (the ASCII space) and <= 126 (the ASCII ' '). Opening tags will be of the form ``< X > " where X contains at least 1 character and is composed entirely of the characters `a' to `z', `A' to `Z', `0' to `9', and `-'. Closing tags will be of the form ``< /X > ". The character `< ' will only occur in the input as the first character of an opening or closing tag.   The input text will be well formed - all opening tags will be matched with a closing tag, all closing tags will match an opening tag, each closing tag will close the most recent unclosed tag, and tags will not be recursive (each tag must be closed prior to reopening).   0 <= B <= E <= length(TEXT) . Neither B nor E will reference a character that is part of an opening or closing tag except for the character `< '. 

 The input consists of two lines. The first line contains two integers  n and  k which are the lengths of the array and the sliding window. There are  n integers in the second line.  

 The input consists of a number of mobile design specifications. Each mobile design is given as a series of numbered elements, beginning with number 1 and increasing sequentially until the end of the specification.   Each element is described on one line, beginning with the the element number. The next nonblank character will be either `B' or `D' to indicate that the element is a bar or a decorative object, respectively.   If the element is a bar, the `B' indicator is followed by a floating-point number denoting the length of the bar, and then two integers giving the element numbers of the two elements hanging from the two ends of the bar. Every element in the input except the top bar will listed as hanging from one end of some bar.   If the element is a decorative object, the `D' is followed either by a single floating point number denoting the weight of that object or by the character `X' indicating that the weight of that object has not been determined. There will be exactly one `X' object in each mobile specification.   In each line describing an element, the numbers and characters making up that line are separated by one or more blank spaces.   The end of a specification is indicated by a line containing a non-positive value in the place of the element number. If that number is negative, it indicates the end of the final mobile specification in the input file. 

 Input will consist of one test case per line, of the form    A HH :MM :SS    where A is the integral number of degrees that must be traversed clockwise to get from the hour hand to the minute hand and HH : MM : SS is the overheard time in 24 hour form. 0 <= A <= 359 , 0 <= HH <= 23 , 0 <= MM <= 59 , and 0 <= SS <= 59 . HH , MM , and SS will be exactly two digits with a leading zero if necessary.   End of input will be signaled by the line   -1 00:00:00  

 Input consists of one or more mazes. Each maze begins with a line containing two integers, W and h , denoting the width and the height of the maze. End of input is indicated when either of these values is less than 3.   This is followed by h lines of input. In each of these lines, only the first w characters are significant. If the input line contains fewer than w characters, you should treat the missing characters as `X'.   The interpretation of the characters in these lines is as follows:    ' ' denotes an open space  'G' is an open space representing a goal location - there will be exactly one of these in any maze.  'X' denotes a wall  'E' is an open space representing an entrance. All entrances will occur on the outer perimeter (as defined by the w and h values) of the maze and no two entrances will be adjacent.   All mazes will be completely enclosed by a combination of 'X' and 'E' characters. 

 Input data will consist of one or more test sets.   The first line of each set will be an integer N (1 <= N <= 10) giving the number of words in the test case. The following N lines will contain the words, one word per line. Each word will be made up of the characters 'a' to 'z' and will be between 1 and 10 characters long (inclusive).   End of input will be indicated by a non-positive value for N . 

 The input contains several test cases. Each test case consists of two lines followed by a blank one. On the first line there are two integers which are n and k in the order they appear. On the second line is a rule of constraint. Two zeroes on a separate line follow the last test case.

 Input consists of one or more lines, each of the form:     Q D N P C  where Q is the number of quarters in the dispenser, D is the number of dimes, N the number of nickels, P the number of pennies, and C is the number of cents (0. . . 99) owed to the customer.  End of the input is signaled by a line of 5 zeros.

 The input consists of one or more lines each containing a positive integer between 2 and 10 15 and followed by a line containing a single zero which indicates the end of input and should not be processed. Each line represents a separate test case. The integer it contains gives the number of towns in the kingdom.  

 The input consists of a single test case. The first line of input contains a positive integer  N not exceeding 10 5 which is the number of cities in the kingdom. Then  N lines follow. Each line contains a pair of non-negative integers within 50,000, giving in that order the  x- and  y-coordinates of a city in the Cartesian coordinate system. The distance between two cities was measured in the  L 2-metric, which means for two cities located at ( x 1,  y 1) and ( x 2,  y 2), the distance between them was       

 The input consists of a single test case. On the first line of input there is a positive integer  n not greater than 2 17 that perfectly factors over the first eight prime numbers. It is the length of the sequences. Then follow 2 n lines each containing a real number. The first  n lines give the sequence  β and the next  n lines the sequence  γ.  

 The input consists of a single test case. The first line of input contains two positive integers  N not exceeding 10 5 and  M which are the numbers of cities and expressways. The follow  N +  M lines. The first  N lines give the coordinates of the cities in the same way as in  TN's Kingdom II - Construction assuming the positive direction of the  x-axis points east and that of the  y-axis points north. Among them are two cities which are uniquely the farthest to the west and to the east. They were the two bordering cities. The last  M lines give the details of the expressway system. Each line contains two integers  i,  j and a real number  c, meaning there was an expressway of estimated capacity  c connecting the cities that appear in the ( i + 1)-th and ( j + 1)-th lines of the input.  

 The input consists of one or more data sets, followed by a last line containing a single zero. Each data set begins with a line containing an integer  N, 1 ≤  N ≤ 500, which is the number of line segments that would be drawn. Then follow  N lines, each containing two real numbers and an integer referring to Δ xi, Δ yi and the money that a player could win after the  i-th step.

 The input consists of several lines. Each line contains a positive integer  n â‰¤ 1000.  

 The first line contains the number of test cases.  Each test case consists of 8 integers not exceeding 10,000 by absolute value,  x 1,  y 1,  x 2,  y 2,  x 3,  y 3,  x 4,  y 4. ( x 1,  y 1), ( x 2,  y 2) are the endpoints of one board, and ( x 3,  y 3), ( x 4,  y 4) are the endpoints of the other one.  

 The input consists of multiple lines. The first line contains a single positive integer M ≤ 10,000 indicating the number of records in the list. Each of the next M lines contain a record i j v (1 ≤ i, j ≤ 109, −20,000 ≤ v ≤ 20,000) in the list meaning that the result of an operation sum(i, j) is v.

 There will be several test cases in the input. Each test case consists of N + 1 lines where N (1 ≤ N ≤ 200,000) is given in the first line of the test case. The next N lines contain the pairs of values Posi and Vali in the increasing order of i (1 ≤ i ≤ N). For each i, the ranges and meanings of Posi and Vali are as follows:  Posi ∈ [0, i − 1] — The i-th person came to the queue and stood right behind the Posi-th person in the queue. The booking office was considered the 0th person and the person at the front of the queue was considered the first person in the queue. Vali ∈ [0, 32767] — The i-th person was assigned the value Vali.  There no blank lines between test cases. Proceed to the end of input.

 The input contains several blocks of test cases. Each block begins with a line containing four integers: 1 ≤ n, m ≤ 10000 describe the size of the plain, ks ≤ 100 is the number of small nuclear plants, and kl ≤ 100 is the number of large nuclear plants. The next ks lines describe the coordinates of the small nuclear plants, each line contains two integers 0 ≤ x ≤ n and 0 ≤ y ≤ m . The next kl lines describe the large nuclear plants in a similar fashion.   The input is terminated by a block with n = m = ks = kl = 0 .   

 The input consists of several test cases. Each test case consists of two lines: Line 1: A single positive integer N ≤ 100,000. Line 2: N real numbers a1, a2, …, aN (|ai| ≤ 30 for all i s.t. 1 ≤ i ≤ N) which are either integral or accurate to one digit after decimal point. Process to the end of input.

 The first line of input contains three integers N, M and Q (1 < N ≤ 1,000, N − 1 ≤ M ≤ 100,000, 0 < Q ≤ 100,000), where N is the number of villages, M is the number of paths, and Q is the number of queries. Each of the next M lines contains three integers a, b, and c (1 ≤ a, b ≤ N, a ≠ b, 0 ≤ c ≤ 1,000,000). The triplet (a, b, c) describes a path. Each of following Q lines contains two integer i and x (1 ≤ i ≤ M, 0 ≤ x) describing a query, “Can a highway be built along the i-th path if the cost of is reduced to x?” x is strictly lower than the original cost of building a highway along the i-th path. It is assumed that every pair of village will be connected either directly or indirectly if all possible highways are built. And there may be more than one highway that can be built between a pair of villages.

 The first line of input contains three integer N, M and Q (1 < N ≤ 10,000, 0 < M ≤ 50,000, 0 < Q ≤ 10,000). N is the number of vertices, M is the number of edges and Q is the number of queries. Each of the next M lines contains three integers a, b, and c (1 ≤ a, b ≤ N, 0 ≤ c < 108) describing an edge connecting the vertices a and b with length c. Each of the following Q lines gives a query consisting of a single integer A (0 ≤ A < 108).

 The input consists of several test cases. Each test case consists two lines. The first line contains three integers n1, n2 and n (1 ≤ n1, n2 ≤ 10, n1 + n2 < n ≤ 5,000,000) separate by a single space. The second line contains n positive integers ai (1 ≤ ai ≤ 108 for all i s.t. 1 ≤ i ≤ n) separated by a single space. The last test case is followed by three zeroes.

 The input only contains a line with three integers N, S and P. Here N is positive and not more than 1000000, and the absolute values of S and P do not exceed 150000000.

 The input contains four parts separated by a blank line: Part 1: An integer M (2 ≤ M < 10,000) which is the number of places. The places are number 0 through M − 1. Part 2: An integer R (0 ≤ R < 1,000) which is the number of roads and is followed by R lines each giving the numbers of two places connected by a road. Part 3: An integer F (0 ≤ F < M) which is the number of Jon’s destinations and is followed by a line containing the numbers of the destinations in the order Jon reaches them. Part 4: An integer T (0 ≤ T < M) which is the number of Cely’s appearances and is followed by T lines each giving a pair of integers p and d meaning Cely will appear in the place numbered p on day d in increasing order of d.

 The input consists of multiple test cases. Each test case is given in one line. In each test case, given first is the integer n (1 ≤ n ≤ 10), which is followed by a1, a2, …, an (ai ≤ 50, 1 ≤ i ≤ n). The last case, with n = 0, indicates the end of input and should not be processed.

 The input consists of several test cases. Each test cases begins with a line containing a single integer n (2 ≤ n ≤ 15). Each of the next n lines contains two integers x, y (−1,000 ≤ x, y ≤ 1,000) giving the coordinates of a point. It is assumed that no two points are the same as each other. A single zero follows the last test case.

 The input contains only an integer K (1 <= K <= 9).

 The first line of the input contains an integer numbers N (2 <= N <= 1000) -- the number of vertices in G. The second line contains the number of commands Q (1 <= Q <= 20000). Then the following Q lines describe each command, and there are three kinds of commands:   I u v: Insert an edge (u, v). And we guarantee that there is no edge between nodes u and v, when you face this command.  D u v: Delete an existed edge (u, v). And we guarantee that there is an edge between nodes u and v, when you face this command.  Q u v: A querying command to ask the connectivity between nodes u and v.   You should notice that the nodes are numbered from 1 to N.  

 The first line of the input contains an integer number n, which is the number of the points. The follow n lines contain two integer numbers x i and y i, which describes the coordinate of each point. Then the next line contains an integer number m, which is the number of triangles, and there are 6 integer numbers ax i, ay i, bx i, by i, cx i and cy i in each of the follow m lines, which describe the coordinate of vertices in a triangle.   We guarantee that n and m do not exceed 100000. The absolute value of integers appear above is not larger than 20000000.  

 The first line consists of only one integer T (T <= 30), representing the number of test cases. Then T cases follow.   Each test case consists of only one line, representing the time now. Each line includes 2 integers H, M separated by a symbol ":". (0 <= H < 24, 0 <= M < 60)  

 There are two integers N and M in the first line. It is guaranteed that both N and M do not exceed 1000. N lines follows, and each line contains M characters describing the grid:   - In first and N-th of there N lines, 'H' stands for harbor, '.' stands for land.  - In other lines, '.', 'O','F','B' and 'S' stand for Empty grids, Obstacles, Fortune's wheels, Blessing stones and Invocations of storm respectively.  

 The first line contains the positive number n, which is not larger than 10.  The second line contains n positive numbers a 1, a 2, a 3, ...,a n, representing the range of each dimension of matrix S.  The third line contains n positive numbers b 1, b 2, b 3, ...,b n, representing the range of dimensions of matrix T.  The fourth line gives the elements in S.  The fifth line gives the elements in T.   To give out an n-dimension matrix with size c 1 * c 2 * c 3 * ... * c n in a line, we will give the element at the position (d 1, d 2, d 3, …,d n) in the matrix as the (c 2 * c 3 * ... * c n * (d 1 – 1) + c 3 * c 4 * ... * c n * (d 2 – 1) + ... + c n * (d n - 1 – 1) + d n)–th element in the line.   We guarantee that b i <= a i, elements in S and T are all positive integers that are not larger 100, and the number of the elements in S and T are both not larger than 500000.  

 The input consists of a single test case. The first line of input contains two positive integers N and M (1 <= N <= 1000, 1 <= M <= 10000), which are the size of cake and the numbers of cuts. The following M lines, each contains 4 integers x 1, y 1, x 2, y 2 (1 <= x 1 <= x 2 <= N, 1 <= y 1 <= y 2 <= N), which are the coordinates of the top left cell and bottom right cell. The M rectangles are given in order.

 The first line of input contains an integer  N, ( 1 ≤ N ≤ 1000), which is the number of binary addition problems that follow. Each problem appears on a single line containing two binary values separated by a single space character. The maximum length of each binary value is 80 bits (binary digits). Note: The maximum length result could be 81 bits (binary digits).

 The first line of input contains an integer N which is the number of datasets that follow (1 ≤ N ≤ 1000). Each dataset consists of a single line containing two dates: the transaction date and the document date; there is a single space between them. The transaction date is of the form M/D/Y where M is the month number (1 ≤ M ≤ 12), D is the day of month (1 ≤ D ≤ md1) and Y is the year (2000 ≤ Y ≤ 2200). The document date is of the form m/d where m is the month number (1 ≤ m ≤ 12) and d is the day of month (1 ≤ d ≤ md2). The values of md1 and md2 will not exceed the number of days in the respective months M and m.

 The input begins with a line containing only the count of problem instances, nProb, as a decimal integer, 1 ≤ nProb ≤ 1000. This is followed by nProb lines, each of which contains a string of between 1 and 10 decimal digits ending in 1, 3, 7 or 9.

 The input begins with the number of problems N, (1 ≤ N ≤ 1000), on a line by itself followed by Nproblem instances each on its own line. A problem instance has the form: probNumber nGirls nBoys where     probNumber increases sequentially from 1 to    N.      nGirls is the number of girls.     nBoys is the number of boys.     There is at least 1 child and at most 24 children in a class.

 The input contains several test cases. The first line of a test case contains one integer N indicating the number of original concrete posts in the fence (5 <= N <= 5000). The second line of a test case contains N integers Xi indicating the state of each concrete post after the tornado (0 <= Xi <= 1 for 1 <= i <= N). If Xi = 1 post i is in good condition, if Xi = 0 post i is broken or missing. Note that post N is next to post 1. The end of input is indicated by N = 0.

 The first line of input contains an integer N, (1 ≤ N ≤ 100) , which is the number of brainf*ck programs that follow. Each program consists of one or more lines of brainf*ck commands ending with a line that consists of the word `end'. Your program should ignore any illegal characters (I.E. any character not in the set: <>+-.[]), If a percent sign (%) is encountered during parsing, the remainder of the line should be discarded. This constitutes a comment. The maximum number of commands in a brainf*ck program is 128000.

 The input begins with a line containing the count of problem instances, nProb, as a decimal integer, (1 ≤ nProb ≤ 1000) . This is followed by nProb input lines. An input line consists of the number, n, of cylinders on the bottom row followed by n floating point values giving the x coordinates of the centers of the cylinders (the y coordinates are all 1.0 since the cylinders are resting on the floor (y = 0.0)). The value of n will be between 1 and 10 (inclusive). The distance between adjacent centers will be at least 2.0 (so the cylinders do not overlap) and at most 3.4 (so cylinders at level k cannot touch cylinders at level k − 2).

 The first line of input contains an integer N which is the number of data sets that follow (1 ≤ N ≤ 100) . Each data set consists of three lines. The first line of each dataset specifies your two hole cards. The second line is your opponent's hole cards. The third line is the four community cards. A card is specified by two characters: it's rank (A,2,3,4,5,6,7,8,9,T,J,Q,K) and it's suit (S,D,H,C) for Spades, Diamonds, Hearts, and Clubs respectively. For example, the Ace of Hearts would be AH, the Nine of Spades would be 9S. Within a line, there are no spaces or invalid characters. All input will be valid.

 The first line of input contains the number of shots that follow N (1 ≤ N ≤= 100) and the parameters HA and HB in that order as decimal values (the values are separated by one or more spaces). These values would be measured once at the beginning of the day and remain fixed through all N rocket shots. Each succeeding line of input will contain the angles α, β, γ and δ in that order (measured in degrees) as decimal values. The angles α, β and γ will be strictly between 0 and 90 degrees and δ will be strictly between 90 degrees and 180 degrees.

 The input contains set of Î»-expressions, one per line. Only the last line contains the expression consisting of a single constant z. You can assume that the input is correct.

 The first line of input will contain the number of problem instances N on a line by itself, (1 ≤ N ≤ 1000) . This will be followed by N lines, one for each problem instance. Each problem line will have the problem number, a single space and the number to be written as a sequence of consecutive positive integers. The second number will be less than 231 (so will fit in a 32-bit integer).

 The input is a sequence of lines, each containing times t1, t2, t3, t4 and t5, separated by white space. All times are distinct and given in increasing order. Each time is given in the hh:mm:ss format on the 24-hour clock. A line containing -1 terminates the input.

 The input consists of several test cases. Each test case begins with a line containing n – the size of the board – and m – the number of stones placed in the game. m lines follow, each giving a placement in the format above. Note that m counts only stone placements – passes may result in two consecutive placements by the same player. You may assume that each move is legal. A line containing 0 0 follows the last test case.

 The input contains multiple test cases. Each test case starts with an integer c, the number of countries to follow. Each of the following c lines contains the name of a country and three integers g, s, and b â€“ the number of gold, silver, and bronze medals won by the country. The last test case has c = 0 and must not be processed. It is guaranteed that each test case contains at most 20 different countries and that the total number of medals smaller than 100. Country names do not contain whitespace characters.

 Input contains multiple cases. The first line of each case contains 4 numbers, the length of the rectangle H, the height of the rectangle V and then the numbers h and v. The next line contains one integer number n, the number of points to consider. The following n lines contain two numbers each, the x and the y coordinate of a point.

 The first line contains an integer 1 ≤ N ≤ 100,000 indicating the number of words in the dictionary. N lines follow, with one dictionary word on each line. Each dictionary word consists of only lowercase letters. The following line contains an integer 1 ≤ M ≤ 1000 indicating the number of Crabbles hands Jennifer wants to play. M hands follow. Each hand begins with a line containing an integer 1 ≤ P ≤ 10 indicating the number of tiles in the hand. This is followed by P lines, one for each tile. Each of these lines consists of a lowercase letter (the letter on the tile), a space, and an integer 0 ≤ V ≤ 10 (the value of the tile).

 The first line of input will be a positive integer, N (5 ≤ N ≤ 500,000), which indicates the number of points on the coordinates. The second line contains two positive integers A and B (A, B ≤ 1,000,000,000), which should be the width and height of the rectangle, respectively. The i-th line of next N lines will contain xi and yi (−1,000,000,000 ≤ xi, yi, ≤ 1,000,000,000), which represent the i-th point.

 First line has three positives integers, N (1 ≤ N ≤ 30), M (1 ≤ M ≤ 4), and K (1 ≤ K ≤ 10). Each of next K lines contains the number of blocks piled at the room. This represents the initial state. Likely, another K lines are given, and this indicates the final state that the Little Prince want to make. Input is always valid.

 The first line has a positive integer N (6 ≤ N ≤ 111), which indicates the number of cities. Information on connection of the cities is given by an adjacent-matrix: if city A and city B is connected, bits of A-row B-column and B-row A-column are 1. Otherwise, both are 0. There is no space in a line.

 The input consists of several test cases. The first line of each test case describes the border of the enemy country, in the format  B X1 Y1 X2 Y2 ... XB YB  where 3 <= B <= 1000 is the number of border points, and each Xi Yi is the coordinate of the i-th point in the border. The border of the country consists of line segments between points i and i + 1, and between points B and 1. The second line gives the number of informers and their respective positions, in the format  N X1 Y1 X2 Y2 ... XN YN  where 1 <= N <= 1000 is the number of informers, and Xi Yi is the coordinate of the i-th informer. The third line describes the position and radius of the radars, in the format  M X1 Y1 R1 X2 Y2 R2 ... XM YM RM  where 1 <= M <= 30 is the number of radars, Xi Yi is the coordinate of the i-th radar, and Ri is the radius of the i-th radar. All the coordinates are integers 0 <= X, Y <= 1000. The radius of the radars are integers in the range 1 <= R <= 1000. A test case where B = N = M = 0 indicates the end of the input. This test case must not be processed.

 The input contains several test cases. The first line of a test case contains two integers N and D indicating respectively the number of alumni and the number of dinners organized (1 <= N <= 100 and 1 <= D <= 500). Alumni are identified by integers from 1 to N. Each of the next D lines describes the attendees of a dinner, and contains N integers Xi indicating if the alumnus/alumna i attended that dinner (Xi = 1) or not (Xi = 0). The end of input is indicated by N = D = 0.

 The input contains several test cases.  The first line of a test case contains two integers T and E indicating respectively the number of tasks and the number of employees (1 <= T <= 1000 and 1 <= E <= 1000). Tasks are numbered from 1 to T and employees from 1 to E.  Then it will come a sequence of lines describing the tasks 1 to T in ascending order. Each task is described by two lines. The first of these lines contains three integers BS, ND and NE, representing respectively the basic significance of the task, the number of tasks that depend directly on it, and the number of employees who perform it (1 <= BS <= 1000, 0 <= ND < T and 1 <= NE <= E). The second line contains ND+NE integers corresponding first to the ND directly dependent tasks and then the NE employees who perform the task.  The end of input is indicated by T = E = 0.

 The input consists of multiple test cases. Each test case starts with a line containing the number of cities N (1 <= N <= 1000) in the country. Following, for each city, there is a sequence of lines. The first line contains the (unique) name of the city (only capital letters, at most 15), and the number of candidate sites Ci (1 <= Ci <= 50) where the optical router can be installed. Then, there is one line per candidate site, containing two integers X and Y representing the coordinates of the site (-10000 <= X, Y <= 10000). You should use the euclidean distance between the sites to compute the corresponding fiber length necessary to connect them. After the description of each city with its candidate sites, there are N - 1 lines, each containing the names of two cities that will have a fiber link installed between them. The end of the input is indicated by N = 0.

 The input contains several test cases. The first line of a test case contains one integer N indicating the number of genes in the genome (1 <= N <= 50000). You may assume that the initial order of the genes is the sequence of integers from 1 to N in increasing order. The second line of a test case contains one integer R (0 <= R <= 1000) indicating the number of reversals to be applied to the genome. Then R lines follow, each containing two integers i, j (1 <= i <= j <= N), separated by a single space, indicating the two indexes that define the corresponding reversal. After the description of the reversals there is a line containing one integer Q (0 <= Q <= 100), indicating the number of queries for genes, followed by Q lines, where each line contains an integer representing a gene whose final position you must determine.  The end of input is indicated by N = 0.

 The input has a certain number of p-network design problems. Each problem is described in just one line that contains the values N, i1, i2, . . . iN, separated by a single blank space. The value N is the order of the desired p-network, i.e., its number of wires (1 <= N <= 20). The values i1, i2, . . . iN represent that the p-network should determine the set of transformations {1 -> i1, 2 -> i2, . . . N -> iN} (1 <= i  j <= N, for each 1 <= j <= N). The input ends with a line in which N = 0; this line must not be processed as a p-network design problem.

 The input contains several test cases. The first line of a test case contains two integers N, M indicating respectively the number of rows and the number of columns of the board (1 <= N <= 7, 1 <= M <= 7). The second line contains one integer B indicating the number of barrier squares (0 <= B <= N Ã— M). Each of the next B lines describe a barrier, containing three integers R, C and K, representing respectively the row number (1 <= R <= N), the column number (1 <= C <= M) and the barrier number (-1 <= K <= 4); K = -1 means the barrier is unnumbered. The end of input is indicated by N = M = 0.

 The input is a series of temperatures, one per line, ranging from -10 to 200. The temperatures may be specified up to two decimal places. After the final observation, the number 999 will indicate the end of the input data stream. All data sets will have at least two temperature observations.  

 The input consists of two sections, the dictionary and the emails. The first line of input specifies the number of words in the dictionary, followed by that many lines, with one word per line. There is no whitespace before, after, or in any words,although there may be apostrophes or hyphens in the words, which are considered part of the word (i.e. "bobs" is different than "bob's". There will be no duplicate words. All words will be in lower case.   Following that are the emails. The first line of this section has the number of emails in the input. Following that line begins the first email. It has been preprocessed, so it consists of one word per line, with no punctuation (other than apostrophes and hyphens) or whitespace, and all words are in lower case. The last word in the email is followed by a line with only "-1". Each email will have at least one word.

 Each line of the input will contain a compression-expression, presented as a single line containing an arbitrary number of 0â€™s and 1's. The input ends following the line with the final compressionexpression.  All input sets used in this problem will be valid compression-expressions.  

 The first line contains N (1 ≤ N ≤ 30), the number of days for which Mark has collected stock prices. The next N lines contain N integers in the range [0, 100], one on each line. These integers represent the stock prices over N days.

 The first line of input will contain two integers, w, and h, denoting the width and height (in numbers of squares) of the map. w and h will be in the range 1  – 50, inclusive.   This is followed by w*h integers distributed across an arbitrary number of subsequent lines. Each of these represents the expected tax collection (in gold pieces per year) for one map square. They occur in the order:      (0, 0)(1, 0), . . . , (w - 1, 0)(0, 1)(1, 1), . . . , (w - 1, h - 1)   Each item will be in the range 0–40, inclusive. A value of 0 denotes water or land that is otherwise uninhabitable--castles cannot be built on those squares.   All maps used as input in this problem will be large enough to guarantee that both castles can be placed on a non-zero square, no matter where the first one is placed (i.e., you cannot crowd your rival entirely off the map).  

 The first line of the input will contain the number of data sets. The are no blank lines before or after each data set.   The first line of each data set will contain three integers (X Y Z), indicating the X and Y position of the starting point on the grid, and the number of moves the robot makes. (X, Y , and Z are all non-negative integers, X is the number of feet from the western edge, Y is the number of feet from the southern edge of the yard). (X and Y range from 0 to 100, inclusive.)   The next Z lines will contain a character D and an integer F, separated by a space. The character will indicate the direction (N, S, E, W) and the integer will indicate how far in that direction the robot traveled.   The path will never leave the 100' by 100' yard. The path may or may not be closed. It may cross itself or retrace its steps (walk along lines in the grid it previously laid fence). It automatically stops building fence until it moves onto an edge without fence on it.  

 Each line of input will be a single number between 0 and 12, inclusive, indicating the order of the approximation. The input stops when end-of-file is reached.

 The first line of input will indicate how many data sets are included. (N)  The next N lines will each contain 9 numbers. These numbers indicate the shape of each tile The first entry on the line will correspond to tile A, the second to tile B, ..., the 9th for tile I. Each  number will reflect the layout of a tile as specified above (the left most layout is 1, the rightmost is 7).  

 On the first line of the input, there is an integer t, which is the number of cases that follow. Each test case, is on a line by itself, and contains two integers n and k, where 1 <= n <= 9, and 1 <= k <= 9.

 The first line of the input contains a single integer t (1 <= t <= 20) which is the number of test cases in the input. Each test case starts with one line containing four integers: N (1 <= N <= 100), the number of orders, S, R, and A, the costs of a single print, all prints from one roll, and all prints of all rolls respectively. Then follows N lines, each representing an order from one of the clients (team members and their friends). An order line contains a number of items separated by blank characters. Each item is of the form PlaceName : RollNo : FromPhoto..ToPhoto. PlaceName is the name of a place which is a string of at most 100 characters (case sensitive). RollNo specifies the desired roll among several rolls for the PlaceName and is between 1 and 10 inclusive. FromPhoto and ToPhoto are two numbers specifying the range of photos to be printed from the specified roll (1 <= FromPhoto <= ToPhoto <= 36). You may assume there are at most 20 places. If there is only a single photo required from a roll, the format may be simplified as PlaceName : RollNo : PhotoNo. All costs are non-negative integers.

 The first line of the input contains a single integer t (1 <= t <= 20) which is the number of test cases in the input. Each test case has three parts. The first part consists of m lines (1 <= m <= 100) of the form vehicle speed where vehicle is the unique name of a vehicle and speed is a positive integer giving the top speed of the vehicle measured in Km/h.   The next part of the test case identifies the locations in the city and is separated from the first part by exactly one blank line. It consists of n lines (2 <= n <= 500) of the form location vehicle where location is the unique name of a location in the city and vehicle is the name of the vehicle available in that location. The list of locations always includes the starting location PayPhone and the destination WKCharriot.   The third part of the test case identifies the roads between locations and is separated from the previous part by exactly one blank line. It consists of several lines of the form loc1 loc2 distance indicating there is a (two-way) road of length distance between the locations loc1 and loc2. Distances are expressed in kilometers and are positive integers. The test case is terminated by a line containing a single asterisk character (*).   All names (for vehicles and locations) are strings of at most 100 letters and digits with no space characters and are considered case sensitive. Items in an input line are separated by one or more space characters. Also, there may be arbitrary leading or trailing blanks except in empty lines used as separators.   

 The first line of the input contains a single integer t (1 ≤ t ≤ 20) which is the number of test cases in the input. For 1 ≤ i ≤ t the line i+1 consists a nonzero number of binary strings. The number of binary strings in each line is at most 41, and the length of each binary string is no more than 40 characters. The last string in each line stands for the new incoming string s and the other strings in that line make the fixed code of the relevant test case.   

 The first line of the input contains a single integer t (1 ≤ t ≤ 20) which is the number of test cases in the input. Each test case contains a sequence of lines containing characters A..Z, a..z, blank and asterisk (*). After each test case, there is a line containing single hash character (#) which is not a part of the lines you must consider in your algorithm. 

 The first line of the input contains the initial string. You can assume that it is non-empty and its length does not exceed 1,000,000. The second line contains the number of manipulation commands N (0 < N â‰¤ 2,000). The following N lines describe a command each. The commands are in one of the two formats below:  I ch p: Insert a character ch before the p-th character of the current string. If p is larger than the length of the string, the character is appended to the end of the string. Q p: Query the p-th character of the current string. The input ensures that the p-th character exists.  All characters in the input are digits or lowercase letters of the English alphabet.

 The first line of the input contains a single integer t (1 ≤ t ≤ 20) which is the number of test cases in the input. Each test case starts with an integer M, the number of food cubes. Each line i (1 ≤ i ≤ M) of the M following lines contains integers xi, yi and zi, all between 1 and 100 inclusive, indicating the three coordinates of a food cube in the 3D space.  

 The first line of the input contains a single integer t (1 ≤ t ≤ 20) which is the number of test cases in the input. The first line of each test case contains two integers n (2 ≤ n ≤ 500) which is the number of points and m (1 ≤ m ≤ 10000) which is the number of rules. In each of the following m lines, there is one rule of the form i rel j which means that pi has relation rel with pj. 

 The first line of the input contains a single integer t (1 ≤ t ≤ 20) which is the number of test cases in the input. Each test case starts with a line containing a single integer N(1 ≤ N ≤ 1000) which is the number of rows in the cost table. Following the first line, there are N lines of the form  code cost where code is an integer between 1 and 9999 inclusive, and cost (1 ≤ cost ≤ 100) is a positive integer which is the cost rate of the calls to the country code. There are no two lines with the same country code in a test case.  

 There are several test cases in the input. Each test case starts with two integers  N (0 <  N ≤ 500,000) and K (1 ≤ K ≤ N) on the first line. The next N lines contains the names of the children (consisting of at most 10 letters) and the integers (non-zero with magnitudes within 108) on their cards in increasing order of the children’s numbers, a name and an integer separated by a single space in a line with no leading or trailing spaces.

 The first line of the input contains the number of test cases. Each test cases starts with a line containing three integers n (1 ≤ n ≤ 109, gcd(n, 9973) = 1), m (1 ≤ m ≤ 10), k (1 ≤ k ≤ m(m − 1) ⁄ 2). The next k lines each contain two integers a and b (1 ≤ a, b ≤ m), indicating beads of kind a cannot be stringed to beads of kind b.

 The input contains multiple test cases. Each test case contains consists of two lines. The first line gives the integers N and M. The second line gives the integers a1, a2, â€¦, aN. A pair of zeroes indicates the end of the input and should not be processed.

 The input contains multiple test cases. Each test cases consists of some lines:  Line 1: Contains two integers K (K < 1000) and M (0 ≤ M ≤ 10K), indicating the dimension of the matrix is K × K and K + M elements of the matrix are 1’s. Lines 2 ~ M + 1: Each contains two integers i and j (0 ≤ i, j < K, i ≠ j), indicating the element in the (i + 1)-th row and (j + 1)-th column is 1.  All elements on the primary diagonal of the matrix are 1’s.

 The input contains multiple test cases. Each test cases consists of some lines.  Line 1: Contains the integer k. Lines 2 ~ k + 1: Each contains a pair of integers ai, ri (1 ≤ i ≤ k).  

 The first line of the input contains two positive integers n and m (n, m â‰¤ 50,000) indicating the number of villages and events. Each of the next m lines describes an event. There are three different events described in different format shown below:  D x: The x-th village was destroyed. Q x: The Army commands requested the number of villages that x-th village was directly or indirectly connected with including itself. R: The village destroyed last was rebuilt.  

 The input consists of multiple test cases. Each test case starts with a line containing M and N (2 ≤ M, N ≤ 999). This line is followed by M lines containing N numbers each describing an M × N puzzle. The input ends with a pair of zeroes which should not be processed.

 The input contains multiple test cases. The first line of the input, contains t, the number of test cases that follow. Each of the following t blocks, describes a test case.   The first line of each block contains one integer n (0 <= n <= 26). After this, there are n lines, each containing one capital alphabet letter, followed by two integers a and b, (0 <= a < b <= 1000). The capital letter shows the key pressed. The number a is the first time step at which the key is pressed and the number b is the second time step at which the key is pressed. During the interval a, a + 1, . . . , b -1, theLED of the key is on. You can assume that, in each test case, these letters are distinct.  

 The input file contains multiple test cases. The first line of the input, contains t, the number of test cases that follow. Each of the following t blocks, describes a test case.   The first line of each block contains p and w (1 <= p,w <= 1000), which show the amount of time in milliseconds for pressing a letter and waiting for it to be fixed, respectively. The second line contains a non-empty string of length at most 1000, consisting of spaces or capital English letters. There is no leading or trailing spaces in a line.  

 The first part of the input describes the set of area codes. It starts with a line containing a single integer A (1 <= A <= 1000), which is the number of area codes in Olandica, followed by A lines of the following form:     area-code area-name  where area-code is a string of at least one, and at most 5 digits, and area-name is a string of at least one, and at most 20 letters (both uppercase and lowercase). There are no two lines with the same area-code or area-name.   The second part of the input describes the rules applied by OTC. The first line of this part contains a single integer R (0 <= R <= 10000), the number of rules applied, followed by R lines of the following form:     year rule-info  where year is the year in which the rule is applied. You may assume the rule is applied on the first day of the year, and at most one rule is applied each year. The rule-info part depends on the specific rule applied. The following list shows the rule-info formats corresponding to the rules described in the problem statement:  • 1 area-name i  • 2 area-name i  • 3 area-name new-area-code  You can assume that input data is consistent; i.e. in the rules section, indices are not out of range, and an area code will never be prefix of another, at any fixed time. The third part of the input consists of several lines of the following form:     year1 year2 number  The query says that in year1, there was a telephone number number, and asks for that number in year2 (year1 <= year2). You must change the number according to the rules applied in the years between year1 + 1 and year2 in that order. The queries end with a line containing three zeros. The years are positive integers less than 10^9.   In every line in the input containing more than one data item (number or name), the data items are separated by one or more spaces. There may be arbitrary number of leading or trailing spaces too. Each data item is at least one character. Each line of the input is at most 50 characters.

 The input consists of several test cases. Each test case starts with the character map which is given in m lines of length n characters (1 <= m, n <= 1000). Characters in the initial map are all lowercase letters. After this, there is a single line containing a single integer k which is the number of selected table entries, followed by k lines, containing two integers r (1 <= r <= m) and c (1 <= c <= n) which are the row and the column numbers of the table entry, respectively. Besides, the items are always inside the current table.

 The only number of the first line, T, is the number of different instances to be solved. T blocks follow, which describe different independent problems.   The first line of a block, contains two integers 0 ≤ F ≤ 1000, the number of trees in the field, and the specified area A. The following F lines, each describes the location of a tree, by two nonnegative integers x, y (1 ≤ x, y ≤ 1000). No two trees have the same position.  

 The input file contains multiple test cases. The first line of the input, contains t, the number of test cases that follow. Each of the following t blocks, describes a test case.   The first line of each block, contains two positive integers R and C, which are the number of horizontal and vertical gridlines, respectively (2 <= R,C <= 1000). The coordinates of the starting point comes on the next line, as two positive integers y and x, (1 <= y <= R, 1 <= x <= C ); for the upper-left point of the grid, we have x = y = 1. The third line of each test case, contains a two-character code which is one of the following:  "DR", the first move is in the down-right direction, "DL", the first move is in the down-left direction, "UL", the first move is in the up-left direction, "UR", the first move is in the up-right direction. 

 The only number in the first line is t, the number of test cases that follow. The first line of each test case contains four integer numbers, 0 ≤ m ≤ 500 the number of male tour participants, 0 ≤ f ≤ 500 the number of female tour participants, 0 ≤ r ≤ 500 the number of rooms reserved by Zebel, and c ≥ 0 which is the number of marriage relations between tour participants. Note that polygamy is not allowed in the tour; i.e. each participant is either single or has a unique mate.   The description of the reserved rooms comes on the following r lines. Each line describes a room, by two integer numbers 1 ≤ bi ≤ 5, and 1 ≤ pi ≤ 1000, which are the capacity and price of this room.  

 The input file contains multiple test cases. The first line of the input, contains t, the number of test cases that follow. Each of the following t blocks, describes a test case, and is preceded by a blank line.   The first line of each block contains three integers, m, n and k (0 ≤ m, n, k ≤ 300), which are the number of bombers, airplanes, and our missiles, respectively. The second line contains three integers, vm, vn, and vk (1 ≤ vm, vn, vk ≤ 10, 000), which are the respective velocity of bombers, airplanes and our missiles. Airplanes and enemy’s bombers, are assumed to move to the right, for simplicity, while our missile move upwards, without changing their x-coordinates.   Next come m lines, that each gives the x and y coordinate of the head of a bomber, at time zero. The planes in the sky, are described similarly, in the following n lines. The last line contains k integers, each being the x-coordinate of a defending missile which is ready to launch. The coordinates are all nonnegative integers less than 10, 000.  

 The only number of the first line, T, (1 <= T <= 20) is the number of different test cases to be solved. T input blocks follow, which describe different independent test cases.  The first line of a block, contains two integers R, C (1 <= R,C <= 50), the number of rows and columns of the city map, respectively. Next R lines, each contains C non-negative integers, 0 <= H ij <= 1000, describing the building heights. The first entry is the leftmost building in the uppermost row. The coordinates of the starting and ending points are given next; the row coordinates come first in each line.  The lower and rightmost intersection is (R,C), while the opposite intersection is (0, 0).  Followed is A, (0 <= A <= 100), the number of mobile antennas. Next A lines describe the antennas by three numbers, r, c, (0 <= r <= R, 0 <= c <= C), and h, (0 <= h <= 1000). It means that there is an antenna with height h at the intersection (r, c).

 The input starts with a single integer N (1 ≤ N ≤ 10) indicating the number of test cases to follow. Each test case is described by a line containing two integers: k and m, separated by a single space.

 The first line of the input file consists of seven integers separated by spaces. These integers specify (in order): the number of programs which follow, the unit execution times for each of the five statements (in the order given above), and the number of time units comprising the time quantum. The remainder of the input consists of the programs, which are correctly formed from statements according to the rules described above. All program statements begin in the first column of a line. Blanks appearing in a statement should be ignored. Associated with each program is an identification number based upon its location in the input data (the first program has ID=1, the second has ID=2, etc.).

 On the first line is a single positive integer n, specifying the number of test scenarios to follow. Each scenario begin with two positive integers m and p on a line of their own, m ≤ 1000, telling the number of pianos to be moved, and p ≤ 2000 the number of piano-tuners. Then follow m lines, each containing a piano move order on the format of two integers bi and ei with 1 ≤ bi ≤ ei ≤ 100 meaning that between the beginning of day bi and the end of day ei, the piano i must be moved. Day 1 is always a Monday, 2 a Tuesday and so on.

 First there will be a line containing the number of scenarios you are asked to help Karel in. For each scenario there will first be a line containing the size of the world. This will be given as two integers (x-size and y-size). Next there will be one line containing two numbers giving the starting position of Karel. On the next line there will be one number giving the number of beepers. For each beeper there will be a line containing two numbers giving the coordinates of each beeper.

 The input starts with a single positive integer N ≤ 20 on a row, deciding the number of test cases that will follow. Then, for each of the test cases:  One line containing three integers: L, nop and nw separated by one space. L indicates the length of the binary words and the quantum operations. nop (≤ 32) is the number of quantum operations that are available for use when transforming the binary words. nw (≤ 20) is the number of binary words that are to be transformed in the current test case.  After this, nop rows follows, each of them containing the definition of a quantum operation followed by the energy cost 0 ≤ ci 1000 of carrying out the quantum operation. The definition and the cost are separated by a single space.Finally, there are nw rows, each containing two binary words separated by a single space. The first of these words should, when possible, be transformed to the second using the quantum operations. The binary words are expressed as sequences of 1’ s and 0’s. After these rows, the next test case follows, if there is any.

 An integer is given in each input line. You may assume that each integer is even, and is greater than or equal to 4 and less than 215. The end of the input is indicated by a number 0.

 On the first line of input there is one integer, N ≤ 50, giving the number of test cases in the input. Each test case starts with a line containing one integer m and two floating point numbers x and y with at most two decimals, where 1 ≤ m ≤ 20 stands for the number of different loan alternatives, 1 ≤ x ≤ 1000000 stands for the investment amount, and 1 ≤ y ≤ 10000 is the fixed amount paid every month. Following this line are m lines, each with an integer l, which stands for the binding time in months of this alternative, 1 ≤ l ≤ 60. Following these lines are yet another m lines, each with m floating point numbers with at most two decimals, which gives C(a, b) ≥ 0, the cost of switching from loan alternative a to loan alternative b. Now, C(x, y) = C(y, x) and C(x, x) = 0. After these lines, a line with a single integer t follows. t stands for the number of months that interest information is known. You may assume that t is sufficiently large for the optimal solution. Ending the test case are t lines, each with m floating point numbers, giving the actual monthly interest rates, in percent, for all of the alternatives for each month. You may assume that the loan can be fully paid after 100 years. You may also assume that all lines of input are maximum 255 characters.

 Input contains multiple test cases. Each test case starts with two integers N and M (1 ≤ N ≤ 500, 0 ≤ M ≤ 2,000) in one line, which are the number of children and the number of rounds. Following are M lines, each line contains two integers in [0, N) separated by one symbol. The two integers are the IDs of the two children selected to play Rochambeau for this round. The symbol may be “=”, “>” or “<”, referring to a draw, that first child wins and that second child wins respectively.

 Input contains multiple test cases. Each test case contains 16 real numbers in one line, which are x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, xp, yp, zp, d. (x1, y1, z1)–(x2, y2, z2) are the coordinates of the two ends of the first wire, (x3, y3, z3)–(x4, y4, z4) are the coordinates of the two ends of the second wire, (xp, yp, zp) is the coordinate of the initial position of Pipi, d is the maximum distance Pipi can crawl. It is guaranteed that Pipi must locate on the first wire, and the lengths of the two wires are positive. But wires may intersect or even overlap.

 Input contains multiple test cases. Each test case starts with two integers N and M (2 ≤ N ≤ 500, 0 ≤ M ≤ N × (N − 1) ⁄ 2) in one line, where N is the number of vertices. Following are M lines, each line contains M integers A, B and C (0 ≤ A, B < N, A ≠ B, C > 0), meaning that there C edges connecting vertices A and B.

 Input contains multiple test cases. Each test case starts with an integer M (2 ≤ M ≤ 20) in one line. Following is one line of nonempty capital letters (A to Z). Each character specifies one ball of the color represented by the letter. The length of each line is no more than 200.

 Input contains multiple test cases. Each test case starts with two numbers N and M (1 ≤ N, M ≤ 10) in one line. Then N lines follow, each line has M characters, which describes the grass field. A ‘.’ denotes an empty grid, an ‘#’ denotes an obstacle, a ‘O’ denotes a baby wolf, and a ‘X’ denotes the Mmxl. There are exactly three ‘O’’s and one ‘X’.

 The first line contains the number of scenarios. Each scenario consists of one line containing a single number n (1 ≤ n ≤ 109).

 The first line contains the number of scenarios. For each scenario the input contains nine lines of nine digits each. Zeros indicate the cells that have not been filled by Tom and need to be filled by you. Each scenario is terminated by an empty line.

 The first line contains the number of scenarios. Each scenario consists of a chessboard description. The rows 8, …, 1 are given in this order, one line per row. Each line contains 8 characters to represent the squares at columns a, …, h of this row. Each description is followed by an empty line.There is one character Q to denote the starting position of the queen, and one B to denote the square on which the bishop stands. There is an arbitrary number of pawns, given as P, who simply block movement, as well as 2–14 knights denoted as N. All other squares are given as ‘.’ and are empty.

 The first line contains the number of scenarios. Each scenario starts with a line containing the odd integer n (1 < n < 300) of the vault, indicating the length of one of its outer walls. This is followed by the number m of mines (which is positive and only limited by the number of rooms in the vault).Next comes m lines, each containing two integers r and c (1 ≤ r, c ≤ n), which give the row and the column of a mine.

 The first line contains the number of scenarios. Each scenario starts with a line containing the number n of chairs (3 ≤ n ≤ 10 000). After that follow n lines, each consisting of two integers p and q (0 ≤ p < q < 109), denoting the angle 2πp ⁄ q .

 The first line contains the number of scenarios. Each scenario starts with a number n (2 ≤ n ≤ 100), the size of the area. The elevations of the terrain are given as a n × n integer matrix (hi,j) (0 ≤ hi,j ≤ 200) on n lines, where each line contains n space-separated elevations.

 The first line contains the number of scenarios. Each scenario consists of one line containing three numbers n, C1 and C2. C1 and C2 are the capacities of the cars (1 ≤ Ci ≤ 100) and n is the number of pieces of furniture (1 ≤ n ≤ 10). The following line will contain n integers w1, …, wn, the weights of the furniture (1 ≤ wi ≤ 100). It is guaranteed that each piece of furniture can be loaded by at least one of the two cars.

 The first line contains the number of scenarios. Each scenario consists of a line containing the numbers n and m (−109 ≤ n ≤ m ≤ 109). 

 The first line contains the number of scenarios. Each scenario starts with a line containing the number of participants p (1 ≤ p ≤ 50) and the number of rounds r (1 ≤ r ≤ 14). First come p lines, where the i-th such line contains the name of the i-th participant. Each name is guaranteed to be shorter than 50 characters. Then follow r descriptions of individual rounds.Each round again consists of individual games, and thus starts with a line containing the number g (1 ≤ g ≤ 16) of games in this round. Next, there are the g descriptions of these games.A description of a game is given by a line containing the result followed by exactly p lines with the predicted results, where the i-th such line gives the result predicted by participant i. Each result is given in the format X : Y (with one space before and after the colon) where X and Y are non-negative integers.

 The first line of the input file contains an integer N (1 ≤ N ≤ 100 000), the number of considered universities. The following N lines each describe the requirements of a university. A university X is described by the five non-negative real numbers x1 x2 x3 x4 x5.

 There will be several test cases, each representing a possible scenario for Han. The first line of each test case will contain a positive integer number N, the number of strongholds (1 ≤ N ≤ 2 000). Each of the subsequent N lines will contain a description of a stronghold: a name consisting of letters ‘ a’ … ‘z’, the x and y coordinates of the position of the stronghold (in feet), and the construction rate (in feet/hour). The next lines will contain questions. The first integer on the line is either 1 or 2, representing the type of question. For type 1 questions, the next number is t, the time (in hours) in question. For type 2 questions, the next number is l, the length (in feet) in question. The questions will be terminated by a line with 0.The input data is terminated by a line that contains one zero, and should not be processed.

 The first line contains four integers, M (1 ≤ M ≤ 100 000), N (1 ≤ N ≤ 100 000), c (0 ≤ c ≤ 500), and C (c ≤ C ≤ 500), where M is the dimension of the grid in the north-south direction, N is the dimension of the grid in the east-west direction, c and C are the minimum and maximum number of people allowed per floor.Each of the next M lines contains exactly one integer in [0, 20 000]. Together, they specify the western skyline. After this, the next N lines specify the southern skyline in the same way.

 The first line contains two numbers M (1 ≤ M ≤ 1000) and N (1 ≤ N ≤ 1000), the dimensions of the city. Each of the next M lines contains N integers in the range [0, 100]. Each integer is the floor that the salesman must visit. Optionally following each integer might be a token specifying that some sky bridges do not exist. Suppose you just read the floor for location (x, y) (note that (0, 0) is the northwest corner, (N − 1, 0) is the northeast corner, (0, M − 1) is the southwest corner, and (N − 1, M − 1) is the southeast). If the token is x, no sky bridges exist between (x, y) and (x + 1, y). If the token is y, no sky bridges exist between (x, y) and (x, y + 1). All tokens and integers are separated by a single space.   

 Each line of the input contains exactly one phone number of length 1 ≤ N ≤ 100. While the number may contain any digits from 0 to 9, a given number contains at most 7 distinct digits.

 The first line of the input contains an integer, the number of test cases. A test case includes one line with Test N, where N is the current test case number followed by eight lines, specifying the two partial configurations C1 and C2 in this order. Each configuration is specified by four lines.The first line of the partial configuration contains three numbers: n1, n2, n3 denoting the heights of the three towers of the partial configuration (0 ≤ n1, n2, n3 ≤ 50). The second line contains n1 letters (B or W) separated by spaces describing the first tower. The third line contains n2 letters separated by spaces describing the second tower. The fourth line contains n3 letters separated by spaces describing the third tower. A letter W denotes a white cube and the letter B denotes a black cube. Each tower is described in the bottom-to-top order.

 The input le specifies an arrangement of the cones. There are in total N cones (1 ≤ N ≤ 40000). Cone i has radius and height equal to Ri, i = 1 … N. Each cone is hollow on the inside and has no base, so it can be placed over another cone with smaller radius. No two cones touch.The first line of the input contains the integer N. The next N lines each contain three real numbers Ri, xi, yi separated by spaces, where (xi, yi) are the coordinates of the center of the base of cone i.

 The first line of the input file will give the number n of words in the dictionary (n ≤ 10000). The next n lines contain the dictionary words. The following line contains an integer q ≤ 1000, the number of query words. The next q lines contain the query words. You may assume that each word in the input consists of 1 to 25 lower case letters (‘a’ to ‘z’).

 The input consists of several test cases. Each test case consists of five lines: The first line contains the column and row number of the square with the start marker, the second line the column and row number of the square with the end marker. The third, fourth and fifth lines specify the locations of the three walls. The location of a wall is specified by either the position of its left end point followed by the position of its right end point (in case of a horizontal wall) or the position of its upper end point followed by the position of its lower end point (in case of a vertical wall). The position of a wall end point is given as the distance from the left side of the grid followed by the distance from the upper side of the grid. You may assume that the three walls donâ€™t intersect with each other, although they may touch at some grid corner, and that the wall endpoints are on the grid. Moreover, there will always be a valid path from the start marker to the end marker. Note that the sample input specifies the maze from the picture above. The last test case is followed by a line containing two zeros.

 The input consists of several test cases. Every test case starts with a line containing three positive integers, the length of the three walls of the maze construction kit. The next line consists of 1 to 25 characters from the set {‘N’, ‘E’, ‘S’, ‘W’} and describes a shortest path from the start to the end marker in the maze to be constructed. Each character specifies the direction of the next move (see picture). You may assume that each test case has at least one solution. The last test case is followed by a line containing three zeros.

 The input file consists of several test cases. Each test case starts with a line containing n (3 ≤ n ≤ 108), the number of points. The second line of each test case consists of an abbreviated sequence of operations as described above. All numbers will be positive and less than 108. There will be no empty line in the input file, and no line will contain more than 100000 characters. The last test case is followed by a line containing 0.

 The input contains several blocks of test cases. Each block begins with a line containing two integers: the number 1 ≤ n ≤ 100000 of members in the Society of Evil Mysterious Strangers and the maximum value 2 ≤ m ≤ 100000 of the scores. The next n lines describe these members. Each line contains three integers between 1 and m : the scores for the three skills.   The input is terminated by a block with n = m = 0 . 

 The input consists of several test cases. Every test case starts with the number of entries n in the log, where 1 ≤ n ≤ 1000. Each of the next n lines contains an entry. Every entry has the format mm:dd:HH:MM number ±, describing the month mm, day dd, hour HH, minute MM, and number (having 1–16 digits) of each call, followed by + marking a call you definitively want to keep and by - marking the other calls. The entries come directly from the log of the phone, that is, they are sorted by time of reception of the corresponding call (the last entry is the most recent). You may assume that the recovery procedure described above yields the correct year of each call.The last test case is followed by a 0.

 The input file consists of several test cases. Each test case consists of a single line containing the three integers N (2 ≤ N ≤ 109), a and b (0 ≤ a, b < N) separated by white space. You may safely assume that the first soldier dies after no more than one million (106) steps. The input is terminated by a single number 0 which should not be processed.

 The input consists of several test cases.Each test case starts with the number of inhabitants n (2 ≤ n ≤ 100000). The following line contains n integers ai (−1000 ≤ ai ≤ 1000). If ai ≥ 0, it means that the inhabitant living in the ith house wants to buy ai bottles of wine, otherwise if ai < 0, he wants to sell −ai bottles of wine. You may assume that the numbers ai sum up to 0.The last test case is followed by a line containing 0.

 The input contains several test cases.The first line of each test case contains an integer n (1 ≤ n ≤ 1000). Each of the next n lines contains n numbers, separated by exactly one space character. Each number is an integer from the interval [−1000000, 1000000].The last test case is followed by a zero.

 The input contains several blocks of test cases. Each case begins with a line containing two integers 1 ≤ n ≤ 1000 and 1 ≤ m ≤ 1000000 . The number n is the number of knights. The next m lines describe which knight hates which knight. Each of these m lines contains two integers k1 and k2 , which means that knight number k1 and knight number k2 hate each other (the numbers k1 and k2 are between 1 and n ).   The input is terminated by a block with n = m = 0 .   

 The input contains several blocks of test cases. Each case begins with a line containing two integers: the number 1 ≤ n ≤ 300 of diseases, and the number 1 ≤ m ≤ 200 of test materials. The next m lines correspond to the m test materials. Each line begins with an integer, the number 1 ≤ k ≤ 300 of diseases that the material can detect. This is followed by k integers describing the k diseases. These integers are between 1 and n .   The input is terminated by a block with n = m = 0 .

 The input contains several blocks of test cases. Each case begins with a line containing two integers: the number 1 ≤ n ≤ 20000 people, and the length 1 ≤ m ≤ 20 of the DNA sequences. The next n lines contain the DNA sequences: each line contains a sequence of m characters, where each character is either `A', `C', `G' or `T'.   The input is terminated by a block with n = m = 0 . 

 The input contains several blocks of test cases. The first line of each block contains three integers: the size 1 ≤ n ≤ 8 of the warehouse, and two integers i , j that describe the starting position of the secretagent. These numbers are between 1 and n ; the row number is given by i , the column number is given by j . The next n lines describe the warehouse. Each line contains a string of n characters. Each character corresponds to a cell of the warehouse. If the character is `.', then the cell is unoccupied. The characters `2', `3' and `4' correspond to boxes of height 2, 3 and 4, respectively. Finally, the character `E' shows the location of the exit.   The input is terminated by a block with n = i = j = 0 . 

 The input contains several blocks of test cases. Each case begins with a line containing two integers: the number 1 ≤ n ≤ 300 of the different types, and the number 1 ≤ m ≤ 300 of the records. This line is followed by a description of the m records. Each record is described by two lines. The first line contains the total number 1 ≤ k ≤ 10000 of widgets built by this widgeteer, followed by the day of week when he/she started working and the day of the week he/she was fired. The days of the week are given bythe strings `MON', `TUE', `WED', `THU', `FRI', `SAT' and `SUN'. The second line contains k integers separated by spaces. These numbers are between 1 and n , and they describe the diofferent types of widgets that the widgeteer built. For example, the following two lines mean that the widgeteer started working on a Wednesday, built a Type 13 widget, a Type 18 widget, a Type 1 widget, again a Type 13 widget,and was fired on a Sunday.   4 WED SUN  13 18 1 13   Note that the widgeteers work 7 days a week, and they were working on every day between their first and last day at the factory (if you like weekends and holidays, then do not become a widgeteer!).   The input is terminated by a test case with n = m = 0 . 

 The input contains several blocks of test cases. Each case begins with a line containing two integers: the number 1 ≤ n ≤ 500 of rows, and the number 1 ≤ m ≤ 500 of columns. The next n lines describe the amount of yeyenum that can be found in the cells. Each of these n lines contains m integers. The first line corresponds to the northernmost row; the first integer of each line corresponds to the westernmost cell of the row. The integers are between 0 and 1000. The next n lines describe in a similar fashion theamount of bloggium found in the cells.   The input is terminated by a block with n = m = 0.

 The input contains several blocks of test cases. Each case begins with a line containing a single integer 1 ≤ n ≤ 100000 , the number of possible words that can be used. The next n lines contain these words. The words contain only the characters `a'-`z' and the length of each word is at most 1000.   The input is terminated by a block with n = 0 .   

 The input test file will contain multiple test cases, each of which consists of three integers w, h, m separated by a single space, with 1 ≤ w, h, m ≤ 20 and m ≤ wh. The end-of-file is marked by a test case with w = h = m = 0 and should not be processed.

 The input test file will contain multiple test cases. Each input test case begins with a single line containing the integers G and N where 2 ≤ N ≤ 5 and 1 ≤ G ≤ 20. The next G lines are of the format “Mi ai1 ai2 … aiN” where 1 ≤ Mi ≤ 20 and ai1, …, aiN is a permutation of the integers 1, …, N. Mi is the number of individuals in the ith group, and ai1, …, aiN is the ordering of the N candidates from most preferred to least preferred for the ith group. The end-of-file is marked by a test case with G = N = 0 and should not be processed.

 The input test file will contain multiple test cases. Each test case begins with a single line containing two integers, m and n, where 1 ≤ m, n ≤ 20. The next m lines specify the m rows of payoff matrix PA. The m lines after that specify the m rows of payoff matrix PB. All payoff matrix values will be integers between −100 and 100, inclusive. The end-of-file is marked by a test case with m = n = 0 and should not be processed.

 The input test file will contain multiple test cases. Each input test case consists of six integers x1, y1, x2, y2, x3, and y3, where (x1, y1), (x2, y2), and (x3, y3) are the coordinates of vertices of the triangle. All triangles in the input will be non-degenerate (will have positive area), and −15000 ≤ x1, y1, x2, y2, x3, y3 ≤ 15000. The end-of-file is marked by a test case with x1 =  y1 = x2 = y2 = x3 = y3 = 0 and should not be processed.

 The input begins with a positive number on a line of its own telling the number of test cases (at most 20). For each test case there is one line containing a single positive integer N, 3 ≤ N ≤ 70 giving the number of books. Then N lines follow each containing two positive integers hi, ti, satisfying 150 ≤ hi ≤ 300 and 5 ≤ ti ≤ 30, the height and thickness of book i respectively, in millimeters.

 The input test file will contain multiple test cases. Each input test case consists of a single line containing only the characters (, ), [, and ]; each input test will have length between 1 and 100, inclusive. The end-of-file is marked by a line containing the word “end” and should not be processed.

 The input test file will contain multiple test cases, each consisting of a single line containing the integer n, where 1 ≤ n ≤ 1000000. The end-of-file is marked by a test case with n = 0 and should not be processed.

 The input test file will contain multiple test cases. Each test case consists of two lines. The first line contains the integers T, k1, and k2, where 1 ≤ T, k1, k2 ≤ 1000. The second line contains six floating-point values x1, y1, x2, y2, x3, and y3. Input points have been selected so as to guarantee a unique solution; the final distance from planet P to star S will always be within 0.1 of the nearest integer. The end-of-file is denoted with a single line containing “0 0 0”.

 On the first line, there is a number, 1 ≤ n ≤ 20, indicating the number of test cases. Each test case begins with a line with two integers, 1 ≤ x ≤ 100, 1 ≤ y ≤ 100, indicating the size of the two-dimenstional street grid. Then follow y lines, each with x integers, 0 ≤ d ≤ 1000, indicating the number of deliveries made to each street crossing last year.

 The first part of the input contains (less than 1000) lines with one function definition each, followed by a single empty line. Forward references (that is, referring to functions defined later in the input) and recursion are legal.   The second part of the input contains less than 1000 test expressions. Each test expression is an expresion occupying a single line. Function names and the arguments are always separated by a single space, but there are no extra spaces around parentheses (see sample input). There is an empty line after the last expression. Expressions are to be evaluated by both the lazy and the strict evaluation.   You can assume that all function definitions and expressions are syntactically correct, and that the arithmetic built-in functions (add, sub, mult, div, rem, eq, gt) will always be called with integers only, and no division by 0 occurs. Overflows outside the 32-bit integer range are legal and do not require any special treatment (just use the value produced by C, C++, or Java operators +, -, *, /, or %). In strict evaluation, built-in functions evaluate all their arguments too. In lazy evaluation, arithmetic built-in functions always evaluate all their arguments. All lines on the  input contain no more than 255 characters including spaces.

 The first line of input contains a positive integer n that indicates the number of test cases. Then follow n lines, each describing a test case. Each test case consists of three positive floating point numbers, D, d, s, where D is the inner diameter of the outer ring, d is the diameter of a ball, and s is the minimum distance between balls. All parameters are in the range [0.0001, 500.0].

 Input consists of a number of test cases.  For each test case: The first line contains a number k (0 < k ≤ 100) describing the size of S, followed by k numbers si (0 < si ≤ 10000) describing S. The second line contains a number m (0 < m ≤ 100) describing the number of positions to evaluate. The next m lines each contain a number l (0 < l ≤ 100) describing the number of heaps and l numbers hi (0 ≤ hi ≤ 10000) describing the number of beads in the heaps.  The last test case is followed by a 0 on a line of its own.

 The first number in the input is the number of test cases to follow. For each test case there are five integers: n, x, y, w and h. n will be between 1 and 2 62 (inclusive) and will be a power of 2. x and y specify the upper left corner of the sub matrix to be printed, w and h specify the width and height respectively. Coordinates are zero based, so 0 ≤ x,y < n. You can assume that the sub matrix will fit entirely inside the whole matrix and that 0 < w,h ≤ 20. There will be no more than 1000 test cases.

 The input consists of several scenarios. The first input line contains a number 1Â–1000 indicating how many scenarios there are.  Each scenario starts with a line with a number 1-2000 telling how many fact lines there are for that scenario. Then follow the fact lines which each contains three words separated by one or more spaces:  The first and third word is one of these names: 1 2 3 4 5blue green red white yellowanna bernhard chris david ellendanish finnish icelandic norwegian swedishamiga atari linux mac windowsc c++ java pascal perl(Note that no uppercase letters are used.) The second word specifies a relationship; it is one of      same-as   left-of   right-of   next-to  same-as tells that the first and third fact words apply to the same room; for instance      blue same-as bernhard  tells that Bernhard lives in the room with a blue door.   left-of tells that the first fact word applies to the room immediately to the left of the one to which the third fact word applies. For example,      chris left-of perl  means that Chris lives in the room immediately to the left of the Perl programmer.   right-of tells that the first fact word applies to the room immediately to the right of the one to which the third fact word applies.   next-to tells that the two fact words apply to rooms next to each other. For example,      swedish next-to linux  means that the Swedish student lives in the next room (either to the left or the right) of the owner of the Linux computer.   You may assume that there are no inconsistencies in the input data. In other words, there will in every scenario be at least one person who may own the Amiga without violating the constraints.

 The input test file will contain multiple test cases. Each test case consists of a single line containing a string of between 1 and 100 digits. The end-of-file is marked by a line containing the word “eof” and should not be processed.

 The first line in the input contains the number of test cases (at most 20). Then follow the cases. Each case starts with a line containing two integers, W and H (2 ≤ W, H ≤ 100), the width and the height of the city map. Then follow H lines, each containing a string with W characters with the following meaning:   '.' Walkable area  '*' Interesting location (also walkable area)  '#' Blocked area   You may assume that the upper-left corner (start and end point) and lower-right corner (turning point) are walkable, and that a walkable path of length H + W - 2 exists between them.

 The input contains four lines. Each of the four lines contains four characters describing the initial state of appropriate handles. A symbol “+” means that the handle is in closed state, whereas the symbol “−” means “open”. At least one of the handles is initially closed.

 The input consists of several lines. The first line contains four numbers XA, YA, XB and YB – the coordinates of two given points. The second line contains integer number N, 3 ≤ N ≤ 100 – the number of vertices of the bounding polygon. Finally, each of the next N lines contains a coordinates X and Y of one polygon vertex, in the counterclockwise order. All the coordinates are integer numbers between −100000 and 100000. The numbers are separated by one or more spaces.

 The input describes one game set. The first line of the input contains an integer number N (1 ≤ N ≤ 1 000 000). The second line contains N integer numbers A1, A2, …, AN, separated by spaces (1 ≤ Ai ≤ 2 000 000 000). Ai is the length of the stick number i in the set. Sticks in the set a so thin, that you can disregard their thickness.

 The first line of the input contains one integer number N (2 ≤ N ≤ 100). Each of the next N lines contains two real numbers xi, yi (1 000 ≤ xi, yi ≤ 1 000), separated by one space. It is guaranteed that at least one necklace exists.

 The input contains a single line representing the source string.

 The first line of the input contains the number of contracts N (1 ≤ N ≤ 100 000, integer). Each of the next N lines describes one contract and contains integer numbers ai, bi, di (1 ≤ ai, bi ≤ 10 000; 1 ≤ di ≤ 1 000 000 000) separated by spaces.

 The first line of the input contains values N, M, a, b. The next N lines contain values Hi,j, M values per line. The numbers in the input fileâ€™s lines are separated by one or more spaces.

 The input contains one data set. A data set starts with a line containing two real numbers XB and YB separated by one or more spaces. The next line contains two integer numbers, N and K, separated by one or more spaces. The next N lines contain four real numbers X1i, Y1i, X2i, Y2i each, separated by one or more spaces.

 The input test file will contain multiple test cases. In each test case, the first line contains a positive integer n â‰¤ 1000 indicating the number of words in the dictionary. The following n lines each contain a single string with between 1 and 7 uppercase letters, representing a word in the dictionary. No word will appear in the dictionary twice. The next line contains a single string giving the tiles you have available. It will contain only capital letters, representing tiles with that letter on it, and underscores, representing blank tiles. The string will contain between 1 and 7 characters, possibly including duplicate tiles. The end-of-file is marked by a test case with n = 0 and should not be processed.

 The input test file will contain multiple test cases, each of which begins with an integer n (4 ≤ n ≤ 25) indicating the number of points in X. This is followed by n lines, each containing 3 integers giving the x, y and z coordinate of a single point. All coordinates are between −100 and 100 inclusive. The end-of-file is marked by a test case with n = 0 and should not be processed.

 The input test file will contain multiple test cases, each of which begins with a line indicating the number of piles, 1 ≤ n ≤ 1000. On the next line, there are n positive integers, 1 ≤ ki ≤ 1, 000, 000, 000, indicating the number of stones in each pile. The end-of-file is marked by a test case with n = 0 and should not be processed.

 The input test file will contain multiple test cases, each containing exactly three lines. The first line contains two integers, 1 ≤  n ≤ 1000 and 0 ≤  k < n. The second line contains  n integers indicating ai for all i. The third line contains  n positive integers indicating bi for all i. It is guaranteed that 0 ≤ ai ≤ bi ≤ 1, 000, 000, 000. The end-of-file is marked by a test case with n = k = 0 and should not be processed.

 The input will contain several test cases. Each line of input describes a test case. Each test case consists of nine floating point numbers, x1, y1, x2, y2, x3, y3, x4, y4 and r, where (x1, y1), (x2, y2) and (x3, y3) are the three vertices of the triangle and (x4, y4) is the center of the circle and  r is the radius. We guarantee the triangle and the circle are not degenerate.

 The input test file will contain multiple test cases, each of which consists of six integers lx, ly, lz, x, y, z where 1 ≤ lx, ly, lz ≤ 1000. Note that the box may have zero volume, but the point (x, y, z) is always guaranteed to be on one of the six sides of the box. The end-of-file is marked by a test case with lx = ly = lz = x = y = z = 0 and should not be processed.

 The input test file will contain multiple test cases. Each input test case begins with a single line containing the integers m and k where 1 ≤ m ≤ 100 and 1 ≤ k ≤ 5. The next line contains m integers x1, …, xm each of which takes on values from the set {1, …, k}, representing the k different stone colors. The end-of-file is marked by a test case with m = k = 0 and should not be processed.

 The input test file will contain multiple test cases. Each input test case will be given as a line containing four integers, n+, n−, n0, and r (where 0 ≤ n+, n−, n0 ≤ 1000 and 1 ≤ r ≤ 100). The end-of-file is marked by a test case with n+ = n− = n0 = r = 0 and should not be processed.

 The list of clauses is presented in multiple lines. The clauses are listed one after another, separated by lines containing a single word and if necessary. The subclauses of a clause each occupy a separate line. If a subclause is not the first subclause of a clause, it will be preceded by the word or, which is not part of it. A subclause consists of a sequence of words formed by lowercase letters in the English alphabet. A subclause is considered to be in positive form if it does not contain the word not and in negative form if the word not appears exactly one in it. The word not never appears more than once in a single subclause. If the word not is removed, the negative form of a subclause is exactly the same as its positive form. A clause has only one positive form but can have several negative forms, which are considered equivalent.The list is non-empty and contains at most 1000 clauses, each consist of at least one and at most six subclauses. No subclauses are repeated in any forms in a single clause. There are at most 120 different subclauses if forms are neglected.Words on the same line are separated by exactly one space. No lines contain any leading or trailing spaces and there are no blank lines.

 The input starts with two integers n (0 < n ≤ 5000) and m (0 ≤ m ≤ 60000) on the same line. Next follows n + m lines. The first n lines of these give the net profit/loss from firing the i-th employee individually bi (|bi| ≤ 107, 1 ≤ i ≤ n). The remaining m lines each contain two integers i and j (1 ≤ i, j ≤ n) meaning the i-th employee has the j-th employee as his direct underling.

 There are several test cases in the input. Each test case starts with three integers  N (0 <  N ≤ 100),  M (0 <  M ≤ 100) and  K (0 ≤  K ≤ 100). The Next  K lines each contains three integers a, b, c. N = M = K = 0 indicates the end of the input which should not be processed.

 There are several test cases in the input. Each test case starts with two integers N (0 < N ≤ 1000) and M (1 ≤ M ≤ 100000).The next M line each describe a tip, either in precise form or vague form.

 Only one line containing n (1 ≤ n ≤ 1010000).

 1st line: Two numbers  N and  M (1 ≤ N, M ≤ 200,000), namely the number of cats and the number of operations.2nd to (m + 1)-th line: In each line, there is number  C specifying the kind of operation Newman wants to do. If C = 0, then there are two numbers  i and  j (1 ≤ i, j ≤ n) following indicating Newman wants to combine the group containing the two cats (in case these two cats are in the same group, just do nothing); If C = 1, then there is only one number k (1 ≤ k ≤ the current number of groups) following indicating Newman wants to know the size of the k-th largest group.

 The input begins with the integers n and m (0 < m ≤ n ≤ 100), which are followed by the ordered pairs <xi, yi> (|xi|, |yi| ≤ 104, 0 ≤ i ≤ n).

 The input consists of several instances, separated by single empty lines.   The first line of each instance consists of two integers 1 ≤ n ≤ 128 and m -- number of persons in the group and number of friendship relations. Each of m following lines consists of two integers ai and bi (1 ≤ ai, bi ≤ n). This means that persons ai and bi (ai ≠ bi) are friends. Each such relationship is described at most once.   

 The input consists of several instances, separated by single empty lines.   The first line of each instance consists of two integers m and n, 1 m, n 8. Each of m following lines consists of n characters and determines the initial state of the chessboard. The characters are one of the following:   "." for an empty field of the chessboard  "#" for a removed field of the chessboard  "P" for the field of the chessboard where one of the pieces starts  There are always precisely two characters "P" in each instance. 

 The input consists of several instances, separated by single empty lines.   The first line of each instance consists of two integers 1 ≤ n ≤10 000 and c 0 separated by a single space -- the number of segments of the crane and the number of commands. The second line consists of n integers l1,..., ln (1 li 100) separated by single spaces. The length of the i-th segment of the crane is li. The following c lines specify the commands of the operator. Each line describing the command consists of two integers s and a (1 ≤ s < n, 0 ≤ a ≤ 359) separated by a single space -- the order to change the angle between the s-th and the s + 1-th segment to a degrees (the angle is measured counterclockwise from the s-th to the s + 1-th segment). 

 The input consists of several instances. Each instance consists of a single line containing two integers n and k (0 ≤ k ≤ n ≤ 431), separated by a single space. 

 according to output of  problem 2996. 

 The input consists of several scenarios. Each scenario consists of a single line. This line contains an expression that describes the sequence of king's decrees, and hence also the current state of the roads in Failland. The expression is one of the following:   V stands for a single town controlled by a single division.  U e1 e2, where e1 and e2 are expressions. The expressions e1 and e2 correspond to disjoint sets of towns, each of the sets is under control of a different division of road-workers. The expression U e1 e2 describes the situation after the king ordered these divisions to unite, i.e., the new united division now controls all the towns in e1 and e2, and maintains still the same set of roads (the union of the roads maintained before, as described by e1 and e2).  C e, where e is an expression. This expression describes the situation after the division described by e received the order to take care of the roads they neglected so far. The division still controls the same set of towns, but now maintains exactly those roads they did not maintain before the order was received. Of course, only the roads connecting two towns both controlled by the same division are concerned. The roads they used to maintain before are not maintained anymore and are considered destroyed immediately.  For example, "C U U V V V" describes the land with three towns controlled by a single union, and with all three roads between these towns in a perfect condition, forming a triangle. The expression "U C U U V V V C U U V V V" describes the land with six towns formed as a union of two such triangles. The expression "C U C U U V V V C U U V V V" describes the same land after the decree that orders road-workers to repair the neglected roads. Now the land has six towns and 9 roads -- all of the roads between all pairs of towns, except for those six that belonged to the triangles.   Each line of the input contains at most 200 000 characters. 

 The input consists of several instances, separated by single empty lines.   The first line of each instance consists of three integers a, b (0 ≤ a, b and a + b ≤ 361) and n (0 ≤ n ≤ 361) separated by single spaces -- the current numbers of points of Alice and Bob, and the number of unresolved regions. Each of the following n lines describes a single region. The line describing the i-th region consists of two integers ai and bi (0 ≤ ai, bi and 1 ≤ ai + bi ≤ 361), and two characters si and ti, separated by single spaces. The integers ai and bi are the numbers of points gained by Alice and Bob by starting to play in each region. The character si is "S" if the region is sente for Alice, and "G" otherwise. Similarly, ti is "S" or "G", depending on whether the region is sente for Bob or not.

 The input consists of an ASCII-art picture of a chessboard with chess pieces on positions described by the input. The pieces of the white player are shown in upper-case letters, while the black player's pieces are lower-case letters. The letters are one of "K" (King), "Q" (Queen), "R" (Rook), "B" (Bishop), "N" (Knight), or "P" (Pawn). The chessboard outline is made of plus ("+"), minus ("-"), and pipe ("|") characters. The black fields are filled with colons (":"), white fields with dots ("."). 

 The input consists of several nonempty lines l1,..., ln. Each of the lines consists of lowercase letters and spaces. The length of each line is at most 10 000 characters. 

 On the first line of input, is a single positive integer t. Thereafter t test cases follow. Each test case consists of one positive number n, 1 <= n <= 10 50, given in the standard base 10 representation, where n specifies the number of persons.

 On the first line of input is a single positive integer n, specifying the number of orders that follow. The first line of each order contains the road name for that order. No road name is longer than 50 characters. The second line states the total number of buildings needing new marble numbers on that order. Then follows the different house number specifications on several lines. These lines are of two kinds: single number lines and multiple number lines. A single number line simply consists of the house number by itself, while a multiple number line starts with a “+”-sign, followed by three positive integer numbers: first number, last number and the interval between the house numbers. The distance between the first and last house number will always be a multiple of the house number interval. A house number will never have more than five digits. After the last house number specification line, the next order follows, if there is any.

 The input consists of several scenarios. For each scenario you are to determine whether the agent pieces cannot be sure to prevent you from escaping the Matrix despite how hard they try, or whether you cannot be certain to stop the agents from eliminating you. The first line of input is a positive number n. Then follow n scenarios, each consisting of 8 rows of 8 characters each from the set {'.','#','P','A','M'} describing the Matrix board. A '.'-character symbolizes a floor square, a '#'-character a wall square and a 'P'-character a phone square. There are exactly two 'A'-characters in each scenario indicating the starting positions of the two agents, and exactly one 'M'-character giving your position in the Matrix. The initial squares of the three pieces are all floor squares. At least half of the 64 squares are wall squares for all scenarios. All scenarios, including the last one, end with a blank line. 

 First there will be a line containing the number of scenarios you are asked to help the frog in. For each scenario there will first be a line containing a positive integer x ≤ 10 5 giving the maximum number of rounds that can be used. The next line contains the number of lanes n, 1 ≤ n ≤ 20, and the length of each lane m, 1 ≤ m ≤ 50. Each of the next n + 2 lines will contain a string of m characters. The character X indicates a car, the character O (letter O) indicates a free space, the character F gives the starting position of the frog, and the character G gives the final destination of the frog. The first line indicates the destination curb, consisting of O’s and exactly one G while the last line gives the starting curb consisting of O’s and exactly one F, while the intermediate lines each represent one lane of the motorway.

 The input is a set of percentages. Each set is on a line of its own. Every line starts with an integer n (0 ≤ n ≤ 20) giving the number of percentages in the set. If n > 0, the percentages follow as n numbers; these numbers may have 0–5 decimals, and all percentages in a set have the same number of decimals. (If there are no decimals, there is no decimal point.) The percentages always add up to about 100% as there may be small rounding errors. Numbers are rounded when digits are removed; they are rounded upwards if the first removed digit is 5 or more. Thus, 4.472 is rounded to 4.47, 4.5, or 4, depending on how many digits you want.

 One line with the number of machines n ≤ 20. For each machine, one line with the number of wheels w ≤ 5, and one line with w numbers, p 1, ..., p w the periodicity of each wheel p k ≤ 1000.

 The first line of the input contains an integer N giving the number of test scenarios. The following 2N lines specify the test scenarios, two lines per scenario: the first line gives a positive integer M â‰¤ 40 which is the number of distances, and the following line contains the M positive integer distances. For any scenario, the total distance climbed (the sum of the distances in that scenario) is at most 1000.

 The first line in the input file contains an integer N, the number of data sets to follow. Each set starts with two integers, n and d (1 ≤ n ≤ 500, 0 ≤ d < 150). n is the number of important places in the city that must have a subway station nearby, and d is the maximum distance allowed between an important place and a subway station. Then comes n lines, each line containing two integers x and y (-100 ≤ x, y ≤ 100), the coordinates of an important place in the capital. The central station will always have coordinates 0, 0. All pairs of coordinates within a data set will be distinct (and none will be 0, 0).

 The input starts with a row containing the number 0 ≤ N ≤ 100 of test cases that will follow. For each test case, there will be one row containing two integers, x L and x H separated by a single space. These numbers are such that 0 ≤ x L ≤ x H ≤ 2,000,000,000.  

 The input is a sequence of datasets. A dataset is a line containing three positive integers a, d, and n separated by a space. a and d are relatively prime. You may assume a <= 9307, d <= 346, and n <= 210. The end of the input is indicated by a line containing three zeros separated by a space. It is not a dataset.

 The entire input looks like the following.  the number of datasets = m1st dataset 2nd dataset ... m-th dataset  Each dataset represents an arriving train, and is a string of 2 to 72 lowercase letters in an input line.

 The input is a sequence of several datasets, and the end of the input is indicated by a line containing a single zero. The number of datasets never exceeds 10. Each dataset looks like the following.  the number of sections the serpent has (=n) x1 y1x2 y2...xn ynthe number of rocks the swamp has (=k) u1 v1u2 v2...uk vkX Y  The first line of the dataset has an integer n that indicates the number of sections the hexerpent has, which is 2 or greater and never exceeds 8. Each of the n following lines contains two integers x and y that indicate the coordinates of a serpent's section. The lines show the initial positions of the sections from the serpent's head to its tail, in this order. The next line of the dataset indicates the number of rocks k the swamp has, which is a non-negative integer not exceeding 100. Each of the k following lines contains two integers u and v that indicate the position of a rock. Finally comes a line containing two integers X and Y, indicating the goal position of the hexerpent, where the scientist is. The serpent's head is not initially here. All of the coordinates x, y, u, v, X, and Y are between âˆ’999999 and 999999, inclusive. Two integers in a line are separated by a single space. No characters other than decimal digits, minus signs, and spaces to separate two integers appear in the input. The coordinate system used to indicate a position is as shown in Figure 3. Figure 3: The coordinate system

 The input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. The number of datasets never exceeds 100. Each dataset is formatted as follows.  the width(=w) and the height(=h) of the board First row of the board ... h-th row of the board  The width and the height of the board satisfy: 2 <= w <= 20, 1 <= h <= 20. Each line consists of w decimal numbers delimited by a space. The number describes the status of the corresponding square.     0  vacant square   1  block   2  start position   3  goal position     The dataset for Fig. D-1 is as follows:  6 6 1 0 0 2 1 0 1 1 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 1 0 0 0 0 1 0 1 1 1 1 1 

 The input consists of multiple lines, each of which contains a character string s and an integer i separated by a single space. The character string s, in the aforementioned manner, represents a genome sequence. You may assume that the length of s is between 1 and 100, inclusive. However, of course, the genome sequence represented by s may be much, much, and much longer than 100. You may also assume that each natural number in s representing the number of repetitions is at most 1,000. The integer i is at least zero and at most one million. A line containing two zeros separated by a space follows the last input line and indicates the end of the input.

 The input consists of multiple datasets, followed by the last line containing a single zero. Each dataset is formatted as follows.  n x1 y1 x2 y2 ... xn yn  n is the number of the columns in the big open space. It is a positive integer no more than 100. xk and yk are the values of x-coordinate and y-coordinate of the center of the base disk of the k-th column (k=1, ..., n). They are positive integers no more than 30. They are separated by a space. Note that the radius of the base disk of each column is one unit (the diameter is two units). You may assume that some columns may touch each other but no columns overlap others. For example, a dataset  31 13 14 3  corresponds to the arrangement of three columns depicted in Fig. 6. Two of them touch each other. Fig. 6: An arrangement of three columns

 The input consists of T test cases. The number of test cases T is given in the first line of the input file. Each test case consists of one line containing n, k, m (0 ≤ n ≤ 1 000 000, 1 ≤ k ≤ 1 000 000, 2 ≤ m ≤ 109) in order.

 The input consists of T test cases. The number of test cases T is given in the first line of the input file. Each test case consists of several lines. Two numbers v, e (0 ≤ v, e ≤ 50000) are given in the first line of each test case. On the next line, v positive integers wi indicating the weights of v nodes are given in one line. On the following e lines, each line contain three positive integers a, b, c indicating the edge which is able to connect two nodes a and b, and unit price c.All numbers in input are less than 216.

 In the only input line, there are two integers n, m (1 ≤ n, m ≤ 4 500), which are the number of the plates and the number of the cake pieces respectively.

 The input contains multiple test cases.Each test case contains consists of two lines. The first line gives the integers n (2 ≤ n ≤ 50 000) and m (2 ≤ m ≤ n). The second line gives n distinct integers A1, A2, …, An. (0 ≤ Ai ≤ 65 536), which will be sorted in increasing order.A pair of zeroes indicates the end of the input and should not be processed.

 The input contains multiple test cases.Each test case contains consists of two lines. The first line gives the integers n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ min{ n, 10 }). The second line gives the integers A1, A2, …, An (−100 000 ≤ Ai ≤ 100 000).A pair of zeroes indicates the end of the input and should not be processed.

 The first line of input contains two integer N (0 < N â‰¤ 100 000), M. The following line contains N integers describes the integer sequence. Every integer in the sequence is between 0 and 1 000 000 inclusively.

 The input file contains multiple test cases. The first line of each test case contains two numbers. The first one is a positive integer number N (1 ≤ N ≤ 500), the number of boxes in the gift shop, and the second one is a positive number d (3 ≤ d ≤ 1 000), the dimension of all the boxes. The next one line contains d positive integers ( G1, G2, …, Gd ) representing the dimensions of the gift. And the subsequent N lines each contain d positive integers ( X1, X2, …, Xd ) representing the dimensions of each box. You may assume that all the numbers you encounter are positive integers and less than 231. The input data is terminated by EOF.

 The input consists of multiple test cases.Each test case consists of one line containing two positive integers h (1 ≤ h ≤ 128) and w (1 ≤ w ≤ 128) and a real number α (0 ≤ α ≤ 360) where h denotes the height of the image in pixels, w denotes the width of the image in pixels, α denotes the angle in degrees by which the image is rotated in counterclockwise direction.Process to the end of input.

 On the first row of input is a single positive integer n, specifying the number of scenarios that follow. Each scenario begins with a row containing two positive integers h and w, with 1 <= h <= 40 and 0 < w <= 10. Thereafter is a matrix presented, describing the points of interest in Sweden in the form of h lines, each containing w characters from the set ['*','o']. A '*'-character symbolises a point of interest, whereas a 'o'-character represents open space.   

 A line with the number of problems n (0 < n<=100), followed by n times:   A line with the integers m (0 < m<=40) and S (0 < S<=300), where m indicates the number of different e-coin types that exist in the problem, and S states the value of the e-modulus that shall be matched exactly. m lines, each consisting of one pair of non-negative integers describing the value of an e-coin. The first number in the pair states the conventional value, and the second number holds the InfoTechnological value of the coin.  When more than one number are present on a line, they will be separated by a space. Between each problem, there will be one blank line. 

 The input begins with an integer n, 1 <= n <= 100, the number of voting rounds. Starting on the next line, n problems follow, one by one. Each voting starts with a line containing an integer m, 1 <= m <= 100, stating the number of voting priests. Then there are m lines, defining the preference order for the outcomes of the three issues for each voter, in order, starting with the voter who will begin the voting procedure. The preferences for each outcome (NNN, NNY, NYN, NYY, YNN, YNY, YYN, and YYY respectively, where ‘N’ stands for no and ‘Y’ for yes), are given as an integer in the range [1…8]. Lower numbers indicate higher preference. The preferences for the eight outcomes are given in the same order as the enumeration of the outcomes above.

 First you will get the number of submarines that are present in the area. [1..100]  After that, for each submarine, you will get the X and Y positions first for the submarines front and then for its rear. [-1000..1000] Then you will get the number of islands in the area. [1..50]  After that, for each island you will get the following: The number of points of the polygon that represents the island. [3..20], The X and Y positions of the points. [-1000..1000]  All input are integers. No submarine end point will be on an island edge. No submarine will lie on an island edge. All islands are simple polygons without crossing edges or touching borders. The first point of the island is connected to the last point. All submarines are approximated with a line between the front and rear points. Two islands never overlap or touch each other.

 Input consists of a number ( > 0) of problems. Each problem starts with the number of rings, n, where 0 â‰¤ n <= 100. After that, n rows follow, each containing a rings' physical attributes. That is, 3 floating point numbers, with an arbitraty number of spaces between them, describing the x coordinate and y coordinate for it's center and it's radius. All floating point numbers fit into the standard floating point type of your favorite programming language (e.g, float for C/C++). Input ends with a single row with the integer -1. 

 On the first line of input there is one integer, N <= 50, giving the number of test cases in the input. Each test case starts with a line containg two integers x, y such that 1 <= x,y <= 50. After this, y lines follow, each which x characters. For each character, a space `` '' stands for an open space, a hash mark ``#'' stands for an obstructing wall, the capital letter ``A'' stand for an alien, and the capital letter ``S'' stands for the start of the search. The perimeter of the maze is always closed, i.e., there is no way to get out from the coordinate of the ``S''. At most 100 aliens are present in the maze, and everyone is reachable. 

 On the first line of input is a positive integer n telling the number of test cases that follow. Each test case is on a line of its own and consists of two integer bases B1, B2, 9 <= B1 < B2 <= 100, and two integer range elements, r1, and r2, 0 < r1 < r2 <= 10000. Notice that all numbers in the input are given in the base 10.   

 On the first line of the input is a single positive integer t, telling the number of test cases to follow. Each case consists of one line with an integer 2 ≤ n ≤ 13 giving the number of cowboys, followed by n positive integers giving hit percentages for the cowboys in the order of their turns.

 A number of test cases consisting of: A line with an integer 1 ≤ n ≤ 8, the number of people on the tour. A line with an floating point number 1 < v ≤ 100, your maximum speed (you start in the bus at the origin). Then follow n lines, each containing four floating point numbers xi yi vi ai, the starting coordinates (−106 ≤ xi, yi ≤ 106), speed (1 ≤ vi < 100) and direction (0 ≤ ai < 2π) of each of the tour guests.The input is terminated by a case with n = 0, which should not be processed. All floating point numbers in the input will be written in standard decimal notation, and have no more than 10 digits.

 The input consists of several test cases. Each test case starts with a line containing three integers n, d and m, where n and d are as described above, and m is the total number of moles that will appear (1 ≤ n ≤ 20, 1 ≤ d ≤ 5, and 1 ≤ m ≤ 1000). Then follow m lines, each containing three integers x, y and t giving the position and time of the appearance of a mole (0 ≤ x, y < n and 1 ≤ t ≤ 10). No two moles will appear at the same place at the same time.The input is ended with a test case where n = d = m = 0. This case should not be processed.

 The input consists of n cases, and the first line consists of one positive integer giving n. The next n lines each contain 3 integers, r, e and c. The first, r, is the expected revenue if you do not advertise, the second, e, is the expected revenue if you do advertise, and the third, c, is the cost of advertising. You can assume that the input will follow these restrictions: −106 ≤ r, e ≤ 106 and 0 ≤ c ≤ 106.

 Each test case starts with a line containing a single integer n, the number of atoms (1 ≤ n ≤ 10). Then follows a line containing two integers, x and y, the position where the two ray ends will start extending from (0 < x < 1024, 0 < y < 768). Then n lines follow, each containing four integers, x, y, vx and vy describing the initial position and speed of an atom (0 < x < 1024, 0 < y < 768, 1 ≤ |vx| ≤ 200, 1 ≤ |vy| ≤ 200). The speed of the atom in the x direction is given by vx, and the speed in the y direction is given by vy. All positions in each input will be distinct. The input is terminated by a case where n = 0, which should not be processed. There will be at most 25 test cases.

 On the first line of the input is a single positive integer, telling the number of test cases to follow. Each case consists of one line containing the integer n.

 Each test case consists of a line containing c, the number of countries (4 ≤ c ≤ 6000), followed by c lines containing the integers n x1 y1 z1 … xn yn zn, describing (in order) the n corners of a closed polygon (3 ≤ n ≤ 20). Then follows a line with one integer m (0 < m ≤ 50), and then m lines with queries ca cb, where ca and cb are country numbers (starting with 1). No point will be on the line between two connected points, and −106 ≤ x, y, z ≤ 106 for all points. No two non-adjacent edges of a country share a common point. The input is terminated by a case where c = 0, which should not be processed.

 The input will consist of several data sets. Each set will start with a line consisting of three numbers k, n, e separated by single spaces, where k is the number of n-bit numbers to be generated and e is the number of edges in the graph (1 ≤ k ≤ 100, 1 ≤ n ≤ 10 and 1 ≤ e ≤ 2000). The next e lines will consist of two space-separated integers v1, v2 where 0 ≤ v1, v2 < 2n and v1 ≠ v2. Edges are undirected and each node is guaranteed to have at least one edge. There may be multiple edges between the same pair of nodes.The last test case will be followed by a line with k = n = e = 0, which should not be processed.

 The first line contains an integer giving the number of test cases to follow. Each case consists of one line containing an integer n, where 1 ≤ n ≤ 14.

 * Line 1: Three space-separated integers: V, R, and C, which respectively represent Bessie's initial velocity and the number of rows and columns in the grid.   * Lines 2..R+1: C integers representing the elevation E of the corresponding location on the grid.

 * Line 1: Three space-separated integers: K, N, and C   * Lines 2..K+1: Each line contains three space-separated integers S, E, and M that specify a group of cows that wishes to travel. The M (1 <= M <= C) cows are currently at farm S and want to travel to farm E (S != E).

 * Line 1: Two positive space-separated integers N and D (1 <= N < D <= 32,767), respectively the numerator and denominator of the given fraction

 * Line 1: Two space-separated integers: N and C   * Lines 2..N+1: Each line corresponds to a denomination of coin and contains two integers: the value V (1 <= V <= 100,000,000) of the denomination, and the number of coins B (1 <= B <= 1,000,000) of this denomation in Farmer John's possession.

 * Line 1: Two integers N and K, separated by a single space.  * Lines 2..K+1: Each line contains two space-separated integers R and C (1 <= R, C <= N) denoting the row and column coordinates of an asteroid, respectively.

 * Line 1 : Two space-separated integers: N and L.  * Lines 2..N+1: Each line contains a single integer giving the position P of a clump (1 <= P <= 1,000,000).  

 * Line 1: Two integers: H and W   * Lines 2..H+1: Each line contains W characters, without spaces, representing a row in the grid. The first row is the top row.The first character in each row is the left-most character.   * Line H+2: A blank line   * Line H+3..: The list of valid words

 * Line 1: Two space separated integers: N and W   * Lines 2..N+1: Two space separated integers, the x and y coordinate of a point where the skyline changes. The x coordinates are presented in strictly increasing order, and the first x coordinate will always be 1.

 * Line 1: A single line with the integer N.   * Lines 2..N+1: Line i+1 describes cow i with two space-separated integers, W_i and S_i.  

 * Line 1: 4 space-separated integers: T, A, S, and B   * Lines 2..A+1: Each line contains a single integer that is an ant type present in the hive

 * Line 1: Three space-separated integers that represent respectively the year, month (range 1..12), and day of a date.

 * Line 1: A single integer, N   * Lines 2..N+1: The serial numbers to be tested, one per line

 * Line 1: Two space-separated integers, L and C   * Line 2: C space-separated lower-case characters that are the set of characters from which to build the passwords

 * Lines 1..5: The grid, five integers per line

 * Line 1: Two space-separated integers: W and H   * Lines 2..H+1: Each line contains W "*" or "." characters representing one raster line of a satellite photograph.

 The first line of input contains a single number:the number of test cases to follow. Each test case has the following format:      One line with the integer nxz the number of vertices describing the projection on the xz plane. nxz lines, each with two integers x and z, separated by a single space: the coordinates of one vertex of the xz projection. One line with the integer nyz, the number of vertices describing the projection on the yz plane. nyz lines, each with two integers y and z, seperated by a single space: the coordinates of one vertex of the yz projection. Both projections are convex polygons, and the minimum and maximum z coordinates are the same values. The vertices of the polygons are given in clockwise order. Consecutive vertices of the polygons are different, but there may be three or more consecutive vertices on one line. The numbers in the input satisfy 3 <= n xz, n yz <= 1000, and |x|, |y|, |z| <= 500.  

 The first line of the input contains a single number: the number of test cases to follow. Each test case has the following format:    One line with two integers P and G, separated by a single space, that indicate the number of players and the number of games respectively(2 <= P <= 100, 2 <= G <= 1000). P lines, one for each player, each with G integers, separated by single spaces: the successive scores for that player.  Each score is between 0 and 300 (both inclusive).  

 The first line of the input contains a single number: the number of test cases to follow. Each test case describes a single unrooted tree, in the following format:  One line with one integer n (3 <= n <= 10000): the number of nodes (countries and ports). n - 1 lines with four integers a, b, c1, c2 each(1 <= a, b <= n and 0 <= c1, c2 <= 1000), describing an edge from node a to (another) node b with c1 containers counted in the direction from a to b and c2 in the other direction. One line with two integers fr and to (1 <= fr, to <=n, fr != to): the begin and end nodes (countries, i.e., leaves in the tree).  Integers on the same line are separated by single spaces. The input satisfies Kirchhoff's law: in each port the number of incoming containers equals the number of outgoing containers. This in itself is not sufficient to guarantee the existence of a transport of containers that matches the description (as containers never move back from where they came). In each test case given a matching transport exists.  

 The frist line of the input contains a single number: the number of test cases to follow. Each test case has the following format:  One line with two integer x and y, separated by a single space, with 0 < x, y < 10 100.Both integers start with a non-zero digit.  

 The frist line of the input contains a single number: the number of test cases to follow. Each test case has the following format:  One line with an even number p, satisfying 2 <= p <= 1000: the number of participants  One line with p integers (separated by single spaces) indicating the beer brands fro the consecutive professors( in clockwise order, starting at an arbitrary position). Each value is between 1 and 100 (boudaries included).

 The first line is the number of test cases. For each test case the program has to read the numbers N and S, separated by an interval, from the first line. The numbers of the sequence are given in the second line of the test case, separated by intervals. The input will finish with the end of file.

 The first line of the input contains a single number: the number of test cases to follow. Each test case has the following format:  One line with two integers Y and X, separated by a single space, satisfying 3 <= Y, X <= 12: the size of the room  Y lines with X characters, each character being either 'X', '.', or 'D': a valid description of a room

 The first line of the input contains a single number: the number of test cases to follow. Each test case has the following format:  One line with the compressed string.This string will consist of uppercase letters, numbers and a single period, and will be a valid block compressed string. The length of the original string that resulted in the compressed one will be no more then 1000000 characters.

 The first line of the input contains a single number: the number of test cases to follow. Each test case has the following format:  One line with one integer N, satisfying 1 <= N <= 400: the number of tiles you have.  One line with N strings separated by single spaces, each consisting of a number between 1 and 100 and a character which is either 'y', 'r', 'g', 'b': the available tiles. All tiles are unique.

 The first line of the input contains a single number: the number of test cases to follow. Each test case has the following format:  One line with two integers D and N, separated by a single space, satisfying 1 <=D <= 1000 and 0 <= N <= 100000: the distance between two roads, and the number of buidling in the city respectively.  N lines with two integers xi and yi, separated by a single space, satisfying -10 9 <= xi, yi <= 10 9: the positions of the buidlings.

 One line with a positive integer: the number of test cases (at most 100). Then for each test case:  One line with two integers n and m, where n is the number of jobs in the queue (1 ≤ n ≤ 100) and m is the position of your job (0 ≤ m ≤ n −1). The first position in the queue is number 0, the second is number 1, and so on. One linewith n integers in the range 1 to 9, giving the priorities of the jobs in the queue. The first integer gives the priority of the first job, the second integer the priority of the second job, and so on.  

 Each input line contains a solution in the form <symbol> = <value>

 There are several testcases. Each data set in the file stands for a particular set of boxes. A data set starts with the number n (n < 10000) of boxes. Follows the number m (m < 10000) of balls, and for each box the number (< 10000) of white and black balls in this specific order. White spaces can occur freely in the input. The input data are correct and terminate with an end of file. 

 In the input file the amounts of the accounts of Stanescu will be given. Each amount is given on a separate line and is an integer between 2 and 10 100-1.

 Input file consist of multiple data sets. Each data set occupies one or more lines. There are no empty lines in the input file. Each line starts with a single letter 'D', 'C' or 'Q' (upper or lower case) followed by 1 to 5 integers with following meaning:  'D' (define) has only one argument which defines number of planets N considered in following data set (N<=6000000, planets are numerated from 1..N).  'C' (connect) creates a connection between a given pair(s) of planets.  'Q' (query) examines if a given pair(s) of planets are connected.  Both 'C' and 'Q' command ('X' in following text) share the same syntax:  X src dst – Creates a connection (or query) between given pair of planets (src, dst).  X src dst nnn – Creates a connection (or query) between src planet and nnn consecutive planets numerated from dst.  Example: X 1 100 3 creates following links (1,100), (1,101), (1,102).  X src dst nnn step – Creates a connection (or query) between src planet and nnn planets numerated from dst with given step.  Example: X 1 100 3 5 creates following links (1,100), (1,105), (1,110).  X src dst nnn dststep srcstep – Creates a connection (or query) between nnn pairs of planets numerated from src with srcstep and dst with dststep respectively.  Example: X 1 100 3 5 15 creates following links (1,100), (16,105), (31,110).

 Each input line contains four integers: m, p, a, b (m <= 2000, p <= 12, p is even). Input is correct, i.e. for each input numbers there exists x1, x2, â€¦, xm satisfying the given conditions.

 The input file starts with T - the number of test cases. Each test case starts with three numbers – N, M, K. Each of the next K lines contains two numbers – the numbers of cities connected by the superhighway. The first one is the number of the city on the East coast and second one is the number of the city of the West coast. 

 The input will consist of multiple cases. The first line of each input will contain N and M where N is the number of depots and M is the number of individual shipping methods. You may assume that N is less than 64 and that M is less than 10000. The next M lines will contain three values, i, j, and v. Each line corresponds a single, unique shipping method. The values i and j are the indices of two depots, and v is the cost of getting from i to j. Note that these shipping methods are directed. If something can be shipped from i to j with cost 10, that says nothing about shipping from j to i. Also, there may be more than one way to ship between any pair of depots, and that may be important here.  A line containing two zeroes signals the end of data and should not be processed.

 The input test file will contain multiple cases. Each test case begins with a single line containing an integer R, the maximum effective range of all palantirs (where 0 ≤ R ≤ 1000), and an integer n, the number of troops in Saruman’s army (where 1 ≤ n ≤ 1000). The next line contains n integers, indicating the positions x1, …, xn of each troop (where 0 ≤ xi ≤ 1000). The end-of-file is marked by a test case with R = n = −1.

 The input test file will contain multiple test cases. Each test case consists of a single line containing n (where 0 ≤ n ≤ 1,000,000,000). The end-of-file is denoted by a single line containing the number −1.

 The input test file will contain multiple test cases. Each test case will begin with a single line containing n (1 ≤ n ≤ 7). The next 2n lines each contain 2n values; here, the jth value on the ith line represents pij. The matrix P will satisfy the constraints that pij = 1.0 − pji for all i ≠ j, and pii = 0.0 for all i. The end-of-file is denoted by a single line containing the number −1. Note that each of the matrix entries in this problem is given as a floating-point value. To avoid precision problems, make sure that you use either the double data type instead of float.

 The input test file will contain multiple test cases. Each test case will begin with a single line containing an integer R, the maximum distance between points that the robot is allowed to travel (where 10 ≤ R ≤ 1000), and an integer n, the number of points (where 2 ≤ n ≤ 20). The next n lines each contain 2 integer values; here, the ith line contains xi and yi (where −1000 ≤ xi, yi ≤ 1000). Each of the points is guaranteed to be unique. The end-of-file is denoted by a test case with R = n = −1.

 The input test file will contain multiple test cases. Each test case consists of a single line containing a plain text string s containing from 1 to 100 upper-case letters. The end-of-file is denoted by a single line containing the word “end”.

 The input test file will contain multiple cases. Each test case consists of a single line containing 81 characters, which represent the 81 squares of the Sudoku grid, given one row at a time. Each character is either a digit (from 1 to 9) or a period (used to indicate an unfilled square). You may assume that each puzzle in the input will have exactly one solution. The end-of-file is denoted by a single line containing the word “end”.

 The input test file will contain multiple cases. Each test case consists of a single line containing 9 characters, which represent the 9 squares of a tic-tac-toe grid, given one row at a time. Each character on the line will either be ‘X’, ‘O’ (the letter O), or ‘.’ (indicating an unfilled square). The end-of-file is marked by a single line containing the word “end”.

 Each data set encodes a grid and contains 16 strings on 16 consecutive lines as shown in figure 2. The i-th string stands for the i-th line of the grid, is 16 characters long, and starts from the first position of the line. String characters are from the set {A,B,…,P,-}, where – (minus) designates empty grid cells. The data sets are separated by single empty lines and terminate with an end of file.

 One line with a positive number: the number of test cases (at most 100). Then for each test case, one line with two numbers separated by a blank. Both numbers are four-digit primes (without leading zeros).

 Input to this problem will begin with a line containing a single integer n indicating the number of integers to round. The next n lines each contain a single integer x (0 <= x <= 99999999). 

 Input to this problem will begin with a line containing a single integer x indicating the number of datasets. Each data set consists of three components:  Start line – A single line, "m n" (1 <= m, n <= 20) where m indicates the number of items in the queue and n indicates the number of queue operations.  Queue items – A line of short (between 1 and 8 characters) alphanumeric names for the items in the queue. Names are unique for a given data set and contain no whitespace.  Queue operations – n lines of queue operations in the format "starting-position requested-position".   

 The first line of data will be a number representing the number of datasets in the file. For each dataset, the first line consists of two integers w h (2 <= w, h <= 15) where w is the width of the puzzle and h is the height. The next h lines of the dataset are a representation of the crossword puzzle grid, as shown above. All word spaces in the puzzle will be at least two characters in length. The next line consists of an integer c (1 <= c <= 100) representing the number of words in the crossword. The next c lines contain the words in the word list. 

 Input to this problem will begin with a line containing a single integer n indicating the number of datasets. Each dataset consists of the following components:   A single positive integer m (2 <= m <= 10) indicating the number of base sequences in this dataset.  m lines each containing a single base sequence consisting of 60 bases.  

 The input begins with a line containing a single integer n indicating the number of independant simulations to run. For each simulation the input will contain a pair of programs, designated as warrior number one and warrior number two. Each warrior program is specified using the following format:   One line with integer m (1 <= m <= 8000) indicating the number of instructions to load for this warrior. A second line containing an integer a (0 <= a <= 7999) gives the address at which to start loading the warrior's code. These two lines are then followed by m additional lines containing the warrior's instructions, with one instruction per line. If the warrior is loaded at the end of memory, the address will wrap around and the instructions continue loading from the beginning of memory.   The address ranges occupied by the two programs will not overlap. All other memory locations which were not loaded with warrior code must be initialized to DAT #0 #0. Execution always begins with warrior number one (i.e. the warrior read in first from the input file).   

 Input to this problem will begin with a line containing a single integer n indicating the number of datasets. Each data set consists of the following components:   A line containing a single positive integer m (1 <= m <= 10) indicating the number of polygons to analyze.  m lines, each representing a single polygon, with the first line describing polygon 1, the second line describing polygon 2, and so on. Each line begins with a single positive integer v (3 <= v <= 20) indicating the number of vertices describing this polygon. This is followed by v (x,y) coordinate pairs (0 <= x, y <= 100), each of which is a vertex of this polygon. The vertices are connected by edges in the order listed with the last vertex connected back to the first by a final edge. All polygons are "simple"; they do not self-intersect.  

 Input to this problem will begin with a line containing a single integer n indicating the number of mazes. Each maze will consist of one line with a width, w, and height, h (3 <= w, h <= 40), followed by h lines of w characters each that represent the maze layout. Walls are represented by hash marks ('#'), empty space by periods ('.'), the start by an 'S' and the exit by an 'E'.   Exactly one 'S' and one 'E' will be present in the maze, and they will always be located along one of the maze edges and never in a corner. The maze will be fully enclosed by walls ('#'), with the only openings being the 'S' and 'E'. The 'S' and 'E' will also be separated by at least one wall ('#').   You may assume that the maze exit is always reachable from the start point. 

 Input to this problem will begin with a line containing a single integer x indicating the number of datasets. Each data set consists of two components:   Start line – a single line "m n" (1 <=m<= 20; 0 <=n<= 19) where m indicates the number of rooms in the house and n indicates the room to secure (the panic room).  Room list – a series of m lines. Each line lists, for a single room, whether there is an intruder in that room ("I" for intruder, "NI" for no intruder), a count of doors c (0 <= c <= 20) that lead to other rooms and have a control panel in this room, and a list of rooms that those doors lead to. For example, if room 3 had no intruder, and doors to rooms 1 and 2, and each of those doors' control panels were accessible from room 3 (as is the case in the above layout), the line for room 3 would read "NI 2 1 2". The first line in the list represents room 0. The second line represents room 1, and so on until the last line, which represents room m - 1. On each line, the rooms are always listed in ascending order. It is possible for rooms to be connected by multiple doors and for there to be more than one intruder!  

 The first line of input contains an integer N which is the number of datasets that follow. Each dataset consists of a single line containing a single integer which is the change due in cents, C, (1 ≤ C ≤ 500).

 There are two lines in the input file, each contains a string to describe a section. The first line describes master section (teeth at the bottom) and the second line describes driven section (teeth at the top). Each character in a string represents one section unit â€” 1 for a cavity and 2 for a tooth. The sections can not be flipped or rotated.Each string is non-empty and its length does not exceed 100.

 The first line of input contains a single integer N, (1 ≤ N ≤ 1000) which is the number of datasets that follow.Each dataset consists of a single line of input containing a single integer n, (1 ≤ n ≤300), which is the number of points on a side of the triangle.

 The first line of input contains a single integer N, (1 ≤ N ≤ 1000) which is the number of datasets that follow.Each dataset consists of four lines of input. The first line of a dataset specifies an integer C, (1 ≤ C ≤ 100) which is the number of chips in each initial stack (S1 and S2). The second line of each dataset specifies the colors of each of the C chips in stack S1, starting with the bottommost chip. The third line of each dataset specifies the colors of each of the C chips in stack S2 starting with the bottommost chip. Colors are expressed as a single uppercase letter (A through H). There are no blanks or separators between the chip colors. The fourth line of each dataset contains 2 * C uppercase letters (A through H), representing the colors of the desired result of the shuffling of S1 and S2 zero or more times. The bottommost chip’s color is specified first.

 The first line of input contains a single integer N, (1 ≤ N ≤ 100), representing the number of datasets that follow. Each dataset consists of a single line of data containing a single integer B, which is the number of buttons for the lock.

 The first line of input contains a single integer N (1 ≤ N ≤ 100), which is the number of datasets that follow. Each dataset consists of a single line containing an integer R (1 ≤ R ≤ 25), a blank, an integer C (1 ≤ C ≤ 80), a blank, and the remainder of the line is a MULTI-Text string. R is the number of rows in the character cell array, C is the number of columns in the character cell array, and the MULTI-Text is the text to be formatted.

 The first line of input contains a single integer C (1 ≤ C ≤ 1000) which is the number of datasets that follow.Each dataset consists of a single line of input containing a single integer N (1 ≤ N ≤ 1000), which is the size.

 The input begins with a line containing an integer value specifying the number of datasets that follow, C (1 ≤ C ≤ 1000). Each dataset consists of a single line containing a single integer N, (1 ≤ N ≤ 1000), which is the size of the triangular array.

 The first line of input contains a single integer C (1 ≤ C ≤ 1000) which is the number of datasets that follow.Each dataset consists of a single line of input containing a single integer N (1 ≤ N < 231), which is the number to be represented as a sum of terms of the form (2a)(3b).

 The input begins with a line containing an integer value specifying the number of datasets that follow, N (1 ≤ N ≤ 1000). Each dataset starts with a line containing two integer values V and D representing the number of vendors (1 ≤ V ≤ 30) and the dollar amount to spend (1 ≤ D ≤ 1000) respectively. The two values will be separated by one or more spaces. The remainder of each dataset consists of one or more lines, each containing one or more integer values representing the cost of a margarita for each vendor. There will be a total of V cost values specified. The cost of a margarita is always at least one (1). Input values will be chosen so the result will fit in a 32 bit unsigned integer.

 The input consists of one or more packets followed by a line containing only # that signals the end of the input. Each packet is on a line by itself, does not begin or end with a space, and contains from 1 to 255 characters.

 The input consists of one or more nonempty strings of at most 79 uppercase letters, each string on a line by itself, followed by a line containing only an asterisk that signals the end of the input.

 The input consists of one or more data sets, followed by a line containing only 0 that signals the end of the input. Each data set is on a line by itself and contains a sequence of three or more blank-separated positive integers, in the format w, n, d1, d2, d3, ..., dn, where w is the width of the box, n is the number of disks, and the remaining numbers are the diameters of the disks, in the order in which they fall into the box. You can assume that w < 100, that n < 10, and that each diameter is less than w.

 The input consists of one or more test cases followed by a line containing only "#" that signals the end of the input. Each test case consists of 1–100 words, each on a line by itself, followed by a line containing only "*" that marks the end of the word list, followed by one or more queries, each on a line by itself, followed by a line containing only "**" that marks the end of the test case. Each word will consist of 1–20 lowercase letters. All words within a test case will be unique. Each query will be as defined above and will be 1–79 characters long.

 The input consists of a set of scenarios where the Gorelians conquer a region of space. Each scenario is independent. The first line of the scenario is an integer N that specifies the total number of planets conquered by the Gorelians. The next N lines of the input specify, in the order conquered, the IDs and coordinates of the conquered planets to be added to the RGPN, in the format ID X Y Z. An ID is an integer from 1 to 1000. X, Y, and Z are integers from 0 to 1000. A single space separates the numbers. A value of N = 0 marks the end of the input.

 The input consists of one or more pairs of values for B and N. Each pair appears on a single line, delimited by a single space. A line specifying the value zero for both B and N marks the end of the input. The value of B will be in the range 1 to 1,000,000 (inclusive), and the value of N will be in the range 1 to 9 (inclusive).

 The first line of the input file contains n — the number of planets (2 ≤ n ≤ 1 000).Second line contains n integer numbers ti — the orbiting periods of planets (1 ≤ ti ≤ 10 000). Not all of ti are the same.

 The first line of the input file contains n — the number of the hives (1 ≤ n ≤ 200).Let us consider Ben’s garden located on a Cartesian plane in such a way that his house occupied the point (0, 0). The following n lines contain two integer numbers each — the coordinates of the hives. The coordinates do not exceed 10 000 by their absolute values, no two hives coincide, no hive is located at (0, 0). Let the hives be numbered from 1 to n.The following n lines describe roads — each road is described by the numbers of hives it connects, Ben’s house is denoted by 0.

 Let us introduce a coordinate system such that the edges of the block are parallel to the coordinate axes and one of the block’s corners is placed at the origin. The opposite corner of the block has coordinates (x, y, z).The first line of the input file contains four integer numbers — x, y, z and n (1 ≤ x, y, z, n ≤ 1 000).

 The first line contains a single integer n (1 ≤ n ≤ 100 000). The second line contains ai separated by spaces (1 ≤ ai ≤ 109). The third line contains k (1 ≤ k ≤ 109).

 The first line of the input contains the number k of cases to solve (1 ≤ k ≤ 1 000). Each case consists of a single integer 1 ≤ n ≤ 109 on a separate line.

 At the first line of the input file there are two integer numbers — m and n (0 < m, n ≤ 300). Then there are m lines with n printable characters per line (we define a printable character as a symbol with ASCII code from 33 to 126 inclusive). There will be no additional symbols at these lines.The next line contains the sequence operations to be performed, specified by their one-character identifiers. The operations should be performed from left to right.

 The first line of the input file contains n — the number of persons suspected to belong to mafia (2 ≤ n ≤ 50 000). Let them be numbered from 1 to n.The following n − 1 lines contain two integer numbers each. The pair ai, bi means that the gangster ai has communicated with the gangster bi. It is guaranteed that the gangsters’ communications form a tree.

 The file consists of formulae, written according to the following BNF. Here [‹expression›] means that expression may be omitted, {‹expression›} means that expression may occur zero or more times. Characters in quotes denote themselves.     ‹char› → ‘A’ | ‘B’ | … | ‘Z’   ‹variable› → ‹char› {‹char›}   ‹horn-clause› → ‘(’ [‹variable› {‘&’ ‹variable›}] ‘=>’ ‹variable› ‘)’    | ‘(’ ‹variable› {‘&’ ‹variable›} ‘=>’ [‹variable›] ‘)’   ‹formula› → ‹horn-clause› {‘&’ ‹horn-clause›}    Each formula is specified in a separate line. The total length of the input file does not exceed 20 000 characters.

 The first line of the input file contains one integer number n (0 ≤ n ≤ 100 000) — number of black vertices at the beginning.The following n lines contain two integer numbers each — the coordinates of different black vertices. The coordinates do not exceed 109 by their absolute values.

 The first line of the input file contains n (1 ≤ n ≤ 50 000) — the number of exams. The following lines describes exams.Each description consists of three lines. The first line is the name of the subject (a string containing only Latin letters, maximal length is 10). The second line is the date of the exam in format dd.mm.yyyy. The third line contains ti for this exam (1 ≤ ti ≤ 100 000).All exams take place in interval from 01.01.1900 to 31.12.2100.Recall that if the year is divisible by 4 and is not divisible by 100, or is divisible by 400 — it is the leap one. Such year has 366 days, the additional day is on February 29.

 The first line of the input file contains n — the number of jewels Demy got, and k — the number of jewels she would like to keep (1 ≤ k ≤ n ≤ 100 000).The following n lines contain two integer numbers each — vi and wi (0 ≤ vi ≤ 106, 1 ≤ wi ≤ 106, both the sum of all vi and the sum of all wi do not exceed 107).

 The input contains several test cases. The first line of test case contains three integers P, N and C which indicate the number of processing nodes (1 ≤ P ≤ 1000), the number of measurements made (1 ≤ N ≤ 1000) and the minimum length of runs of interest (1 ≤ C ≤ N), respectively. Each of the next N lines contains P digits {0, 1} separated by a whitespace. The end of the input is indicated by P = N = C = 0.

 The input contains several test cases. Each test case starts with two integers, L and N, representing respectively the number of lines of the program (1 ≤ L ≤ 100) and the value of the input parameter of the program (0 ≤ N < 1000). The following L lines contain the program. It can be assumed that it is always syntactically correct in accordance with the rules defined above. All the commands (as well as the variables) only contain capital letters. The end of the input is marked by a case where L = N = 0 which should not be processed.

 The input contains several test cases. The first line of each test case contains two integer separated by a space, N (1 ≤ N ≤ 500) and E (0 ≤ E ≤ N2), indicating the numbers of cities (numbered from 1 to N) and of agreements on sending messages, respectively. Following them, then, E lines, each containing three integers separated by spaces, X, Y and H (1 ≤ X, Y ≤ N, 1 ≤ H ≤ 1000), indicating that there exist an agreement to send a printed letter from city X to city Y, and that such a letter will be delivered in H hours.After that, there will be a line with an integer K (0 ≤ K ≤ 100), the number of queries. Finally, there will be K lines, each representing a query and containing two integers separated by a space, O and D (1 ≤ O, D ≤ N). You must determine the minimum time to send a letter from city O to city D.The end of the input is indicated by N = 0.

 The input contains several test cases. The first line of a test case contains four integers F, P, E, and A, identifying respectively the number of frequency levels supported by the processor of Paul’s laptop (1 ≤ F ≤ 20), the number of programs to be executed sequentially (1 ≤ P ≤ 5000), the energy needed, in Joules, to change between any two frequency levels (1 ≤ E ≤ 100) and the time (in ms) to change between any two frequency levels (1 ≤ A ≤ 100). The frequency levels are identified by integers from 1 to F, and the programs are identified by integers from 1 to P.The following P × F lines describe the programs, with F lines for each program (the first F lines correspond to program 1, the next F lines correspond to program 2, and so on). The f-th line corresponding to program p contains two integers Ep, f and Ap, f, representing respectively the quantity of energy (in Joules) and time (in ms) to execute program p at frequency level f (1 ≤ Ep, f ≤ 1000 and 1 ≤ Ap, f ≤ 1000). At the beginning of each test case the processor is at frequency level 1. The end of the input is indicated by F = P = E = A = 0.

 The input contains several test cases. The first line of a test case contains two integers N and M indicating respectively the number of rows and the number of columns of the board (3 ≤ N ≤ 20, 3 ≤ M ≤ 20 and N × M ≤ 200). The leftmost square of the board at the edge closest to the player is a home. The second line contains the description of the state of the game. Each description consists of ceiling((N × M) ⁄ 2) integers, separated by a space, corresponding to the homes of the board, which are numbered from 1 to ceiling((N × M) ⁄ 2), from left to right, from the edge closest to the player to the edge closest to his opponent. In the description of the state of the game, ‘1’ represents a home with a piece of yours, and ‘2’ represents a home with a piece of your opponent’s. There are at most floor((N × M) ⁄ 4) pieces of each player on the board. The end of the input is indicated by N = M = 0.         (a) (b)    Figure 1: Numeration of homes on (a) board of dimensions 8 × 8 and on (b) board of dimensions 5 × 3.

 The input contains several test cases. The first line of a test case contains two integers T and N, indicating respectively the number of participating teams (0 ≤ T ≤ 200) and the number of played matches (0 ≤ N ≤ 10000). Each one of the T lines below contains the name of the team (a string of at most 10 letter and digits), followed by a whitespace, then the number of points that the team obtained till the moment. The end of input is indicated by T = 0.

 The input is composed of several test cases. The first line of a test case contains two integers N and M that indicate respectively the number of the cities (2 ≤ N ≤ 100) and the number of road segments (1 ≤ M ≤ 10000). Each one of the N lines following contains the name of a city (letters only, at most 20 characters long). The first of these cities is the capital of the state. Each one of the M lines following describes a road segment, containing a pair of names of cities separated by a whitespace. Note that, as the mountains cause difficulty in construction of the roads, many road segments are one-way. A two-way segment is represented by two one-way ones. You should assume that there exists at least one path from each city to the capital. The end of the input is indicated by N = M = 0.

 There are multiple test cases in the input file. Each test case starts with three integers N, M and D, (2 ≤ N ≤ 300, 1 ≤ M ≤ 3000), the number of intersections, the number of edges, and the range of each EMP charge, respectively. Intersections are numbered from 0 to N − 1. The following line consists of N integers, the cost of deploying an EMP charge on intersection i. The next M lines each consists of three integers S, T, and C, (0 ≤ S, T ≤ N − 1, 1 ≤ C ≤ 20000), meaning that intersection S and T are connected by a tunnel whose length is C. Every test case ends with one blank line indicating the end of test case.N = 0, M = 0, D = 0 indicates the end of input file and should not be processed by your system.

 The input contains several test cases. The first line of the input contains an integer N (1 ≤ N ≤ 100) which represents the quantity of test cases. N test cases follow. The first line of each test case contains two integers a and b (−5 ≤ a ≤ 5 and −10 ≤ b ≤ 10) which describe the equation of the border: y = ax + b. The second line of each test case contains an integer K, indicating the number of queries that follow it (1 ≤ K ≤ 1000). Each one of the following K lines describes a query, composed by two integers M and N representing the enumerated coordinates of two points (0 ≤ M, N ≤ 65535).

 The input starts with the number of test cases 0 ≤ N ≤ 50 on a single line.   Then for every test case follow nine lines describing last week's puzzle solution, from top to bottom. Each line corresponds to a row in the puzzle and consists of nine digits (1 ... 9), describing the contents of the cell from left to right.   Last week's solution is followed by nine lines describing this week's unsolved puzzle. Here, also, every line corresponds to a puzzle row and every digit (0 ... 9) describes the contents of a cell. 0 indicates that the cell is empty. The rows are presented ordered from top to bottom, and within each row, the cells are ordered from left to right.   After every test case except the last one follows a blank line. Every unsolved puzzle is guaranteed to be uniquely solvable and last week's solution is always a proper sudoku solution.

 An integer 0 ≤ T ≤ 5 on the first line gives the cardinality of the set of test cases. The first line of each test case contains the number of operations 0 ≤ N ≤ 2 000. Then follow N lines each containing one of the five commands. It is guaranteed that the SetStack computer can execute all the commands in the sequence without ever popping an empty stack.

 One line with a positive integer: the number of test cases. Then for each test case:  One line with two integers N and F with 1 ≤ N, F ≤ 10 000: the number of pies and the number of friends. One line with N integers ri with 1 ≤ ri ≤ 10 000: the radii of the pies. 

 The input consists of several (at most 20) games to be analyzed. Each game starts with two integers 1 ≤ n ≤ 30, 0 ≤ m ≤ 1 000, giving the number of cities and railway routes in the map, respectively. Then follow n lines, giving the names of the n cities. City names are at most 20 characters long and consist solely of lower case letters ('a'-'z').   After this follow m lines, each containing the names of two different cities and an integer 1 ≤ c ≤ 10 000, indicating that there is a railway route with cost c between the two cities. Note that there may be several railway routes between the same pair of cities. You may assume that it is always possible to set up a train line from any city to any other city. Finally, there will be four lines, each containing the names of two cities, giving the four train line assignments.   The input is terminated by a case where n = m = 0. This case should not be processed.

 One line with a positive number: the number of test cases (at most 25). Then for each test case:  One line with an integer N, 2 ≤ N ≤ 500, the number of points, and an integer L, 1 ≤ L ≤ 10 000, the necessary length to flatten. lines with two integers xi and yi with 0 ≤ xi, yi ≤ 10 000 describing the landscape of Lineland. The xi are in (strictly) ascending order. At position xi the height of the landscape is yi. Between two xi the landscape has constant slope. (So the landscape is piecewise linear). The difference between xN and x1 is greater than or equal to L. 

 The input begins with a positive number on a line of its own telling the number of test cases (at most 500). Then for each test case there is one line containing a permutation of the 26 capital letters of the English alphabet.

 The input consists of one or more datasets. The number of datasets is less than 50. Each dataset describes stars and the parameters of the telescopes used.The first line of a dataset contains a positive integer n not exceeding 500, meaning the number of stars. Each of the n lines following it contains three decimal fractions, sx, sy, and sz. They give the position (sx, sy, sz) of the star described in Euclidean coordinates. You may assume −1000 ≤ sx ≤ 1000, −1000 ≤ sy ≤ 1000, −1000 ≤ sz ≤ 1000, and (sx, sy, sz) ≠ (0, 0, 0).Then comes a line containing a positive integer m not exceeding 50, meaning the number of telescopes. Each of the following m lines contains four decimal fractions, tx, ty, tz and ψ, describing a telescope.The first three numbers represent the direction of the telescope. All the telescopes are at the origin of the coordinate system (0, 0, 0) (we ignore the size of the planet). The three numbers give the point (tx, ty, tz) which can be see in the center of the sight through the telescope. You may assume −1000 ≤ tx ≤ 1000, −1000 ≤ ty ≤ 1000, −1000 ≤ tz ≤ 1000, and (tx, ty, tz) ≠ (0, 0, 0).The fourth number ψ (0 ≤ ψ ≤ π ⁄ 2) gives the angular radius, radians, of the sight field of the telescope. Let us define that θi,j is the angle between the direction of the i-th star and the center direction of the j-th telescope and ψj is the angular radius of the sight field of the j-th telescope. the i-th star is observable through the j-th telescope if and only if θi,j is less than ψj. You may assume that |θi,j − ψj| > 0.00000001 for all pairs of i and j.   Figure 1: Direction and angular radius of a telescopeThe end of the input is indicated with a line containing a single zero.

 The input is a sequence of datasets followed by a line containing a single zero. Each dataset specifies a polygon, and is formatted as follows.     n    x1 y1   x2 y2   …   xn yn    The first line is the number of vertices, n, which satisfies 4 ≤ n ≤ 50. Subsequent n lines are the x- and y-coordinates of the n vertices. They are integers and satisfy 0 ≤ xi ≤ 10000 and 0 ≤ yi ≤ 10000 (i = 1, …, n). Line segments (xi, yi)–(xi + 1, yi + 1) (i = 1, …, n − 1) and the line segment (xn, yn)–(x1, y1) form the border of the polygon in the counterclockwise order. That is, these line segments see the inside of the polygon in the left of their directions.You may assume that the polygon is simple, that is, its border never crosses or touches itself. You may assume assume that no three edges of the polygon meet at a single point even when they are infinitely extended.

 The input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. The number of datasets is less than 16. Each dataset is formatted as follows.     x y    F11 F21 F31   F12 F22 F32   F13 F23 F33    The first line contains two integers x and y separated by a space, indicating the position (x, y) of the initially empty square. The values of x and y are 1, 2, or 3.The following three lines specify the color pattern to make. Each line contains three characters F1j, F2j, and F3j, separated by a space. Character Fij indicates the top color of the cube, if any, at the position (i, j) as follows:  B: Blue, W: White, R: Red, E: the square is Empty. There is exactly one ‘E’ character in each dataset.

 The input is a sequence of datasets followed by a line containing two zeros separated by a space. A dataset is a line containing two positive integers n and k separated by a space. You may assume that n ≤ 1120 and k ≤ 14.

 The input consists of multiple datasets, each in the following format.     n m   row1   …   rown    n is the number of rows which satisfies 2 ≤ n ≤ 9. m is the number of columns which satisfies 2 ≤ m ≤ 9. Each rowi is a sequence of m digits separated by a space. The digits mean the following.  0: Empty 1: Occupied by an obstacle 2: Marked with “2” 3: Marked with “3” The end of the input is indicated with a line containing two zeros separated by a space.

 The input is a sequence of one or more lines each containing a single integer n. n is positive and less than or equal to 1000. The end of the input is indicated by a zero.

 The input consists of multiple datasets, followed by a line containing a single zero which indicates the end of the input. The format of a dataset is as follows.     n   r1 r2 … rn    n is an integer which means the number rods and satisfies 3 ≤ n ≤ 6. ri is an integer which means the length of the i-th rod and satisfied 1 ≤ ri ≤ 300.

 There are multiple test cases in the input file. Each test case starts with one integer T where 1 ≤ T ≤ 40000. The following T lines each describe an operation, either in the form of “B X” or “A Y ” where 1 ≤ X ≤ 500 000, 1 ≤ Y ≤ 1 000 000.T = 0 indicates the end of input file and should not be processed by your program.

 The input is a sequence of datasets, followed by a line containing two zeros separated by a space representing the end of the input. Each dataset starts with a line including two integers n and l separated by a space, where n (1 ≤ n ≤ 50) is the number of rules and l (0 ≤ l ≤ 20) is the required length of the name. After that line, n lines each representing a rule follow. Each of these lines starts with one of uppercase letters, A to Z, followed by the character “=” (instead of “→”) and then followed by the right hand side of the rule which is a string of letters A to Z and a to z. The length of the string does not exceed 10 and may be zero. There appears no space in the lines representing the rules.

 The input consists of multiple datasets, each in the following format.     n m k a b   x1 y1 d1    x2 y2 d2   …   xm ym dm    Every input item in a dataset is a non-negative integer. Two or more input items in a line are separated by a space.n is the number of nodes in the graph. You can assume the inequality 2 ≤ n ≤ 50. m is the number of (directed) edges. a is the start node, and b is the goal node. They are between 1 and n, inclusive. You are required to find the k-th shortest path from a to b. You can assume 1 ≤ k ≤ 200 and a ≠ b.The i-th edge is from the node xi to yi with the length di (1 ≤ i ≤ m). Both xi and yi are between 1 and n, inclusive. di is between 1 and 10000, inclusive. You can directly go from xi to yi, but not from yi to xi unless an edge from yi to xi is explicitly given. The edge connecting the same pair of nodes is unique, if any, that is, if i ≠ j, it is never the case that xi equals xj and yi equals yj. Edges are not connecting a node to itself, that is, xi never equals yi. Thus the inequality 0 ≤ m ≤ n(n − 1) holds.Note that the given graph may be quite unrealistic as a road network. Both the cases m = 0 and m = n(n − 1) are included in the judges’ data.The last dataset is followed by a line containing five zeros (separated by a space).

 There are multiple test cases in the input file. Each test case starts with three integers S, T and M (1 ≤ S ≤ 100, 1 ≤ T ≤ 2000, 0 ≤ M ≤ 10), representing the number of schools, the number of teams participating in the preliminary contest, and the minimum number of problems which is required to be solved in order to enter the on-site competition, respectively.Each of the following S lines consists of three integers Id, P and Q, (1 ≤ Id ≤ S, 0 ≤ P, Q ≤ 1), representing the Id of the school, whether this school satisfies condition b, and whether this school satisfies condition c.The last part of each test case consists of T lines. There are two integers on each of the T lines, Sid and Tot (1 ≤ Sid ≤ S, 0 ≤ Tot ≤ 10), meaning that a team from school Sid had solved Tot problems in the preliminary contest.Two consecutive test cases are separated by a blank line. S = 0, T = 0, M = 0 indicates the end of input and should not be processed by your program.

 There are multiple test cases in the input file. Each test case consists of 16 distinct numbers in the range [1, 1024] on one separate line. You are allowed to use each number only once. A line with one single integer 0 indicates the end of input and should not be processed by your program.

 There are multiple test cases in the input file. Each test case contains two numbers P and N, (P < 1000, N â‰¤ 109), where P is a prime number and N is a positive decimal integer.P = 0, N = 0 indicates the end of input file and should not be processed by your program.

 There are multiple test cases in the input file. Each test case starts with two integers N and M, (1 ≤ N ≤ 100000, 1 ≤ M ≤ 1000000), the number of universities and the number of direct communication line set up by the committee, respectively. Universities are numbered from 1 to N. The next line has N integers, the Kth integer is equal to the number of students in university numbered K. The number of students in any university does not exceed 100000000. Each of the following M lines has two integers s, t, and describes a communication line connecting university s and university t. All communication lines of this new system are bidirectional.N = 0, M = 0 indicates the end of input and should not be processed by your program.

 There are multiple test cases in the input file. Each test case starts with one integer N, (1 ≤ N ≤ 100), the number of star systems on the telescope. N lines follow, each line consists of two integers: the X and Y coordinates of the Kth planet system. The absolute value of any coordinate is no more than 109, and you can assume that the planets are arbitrarily distributed in the universe.N = 0 indicates the end of input file and should not be processed by your program.

 There are multiple test cases in the input file. Each test case starts with four integers N, M, K and T, (1 ≤ N ≤ 100, 0 ≤ M ≤ 500, 0 ≤ K ≤ 9, 0 ≤ T ≤ 100), the number of planet systems, the number of hyperspace tunnels between them, the pursuing Imperial Star Destroyers, and the maximal allowed time to stay at the same system, respectively. M lines follow, each line describes one of the hyperspace tunnels: four integers U, V, C, and W, (0 ≤ U, V ≤ N − 1, 1 ≤ C ≤ 10, 1 ≤ W ≤ 1000000) meaning there’s a tunnel from U to V , traveling through this path requires W seconds and it is only available every C seconds, starting from time 0 (i.e. 0, C, 2 * C, 3 * C … seconds).Two successive inputs are separated by a blank line. N = 0, M = 0, K = 0, T = 0 indicates the end of input and should not be processed by your program.

 The input consists of several cases, each followed by a blank line.Each test case starts with three integers N, M and K (1 ≤ N ≤ 1000, 1 ≤ M ≤ 5000, 1 ≤ K ≤ 100), the number of extracts from the book, the number of assumptions and the number of theories, respectively.The following part describes extracts and assumptions. Extracts are always described before assumptions. Each description starts with one string S, the name of the extract/assumption, and an integer T in the next line, the number of different explanations you have come up with; T lines follow, on each line there is a string X, the explanation which leads to another assumption/theory.The next part of test case consists of K descriptions of theories. Each description starts with one string S, the name of the theory, followed by one integer P, the value which you have assigned to this theory.Two successive descriptions are separated by a line with one single character ‘-’. It is guaranteed that the total numbers of explanations which extracts and assumptions have does not exceed 50000, and you may assume every string’s length is less or equal to 20, and only consists of letters from alphabet and numbers 0…9.N = 0, M = 0, K = 0 indicates the end of input file and should not be processed by your program.

 The first line of the input file is a single integer T (1 ≤ T ≤ 20), which is the number of test cases you must process, followed by T test cases:Each test case consists of several lines. Four integers i, j, d and r are given on each line, representing a constraint xi − xj < d or xi − xj ≤ d (0 ≤ i, j ≤ m, −10000 < d < 10000). If r = 0, then this line represents an inequality in the form of xi − xj < d, otherwise it represents an inequality in the form of xi − xj ≤ d. The maximal index m of clocks indicates that the indexes of the clocks are 0, 1, …, m, (1 ≤ m ≤ 100). Note that you have to get the value of m by yourself.A symbol # given on a single line indicates the end of a test case.

 The first line of the input file contains integers n, w, and h (3 ≤ n ≤ 100, 1 ≤ w, h ≤ 100) — number of vertices in the polygon, width and height of the canvas respectively. The following n lines contain coordinates of the polygon vertices in clockwise order. Point i is described by two integers xi and yi (0 ≤ xi ≤ w, 0 ≤ yi ≤ h).

 The first line of the input file contains a single integer number n (1 ≤ n ≤ 100) — the number of lines in the old billing table. The following n lines describe the old billing table with one rule on a line. Each rule contains four tokens separated by spaces — prefix A, minus sign (“-”), prefix B, and billing plan name. Prefixes contain from 1 to 11 digits each, and the billing plan name contains from 1 to 20 lower case letters.Further, let us denote with |A| the number of digits in the prefix A. It is true that 1 ≤ |B| ≤ |A| ≤ 11. Moreover, last |B| digits of prefix A form a string that is lexicographically equal or precedes B. Such pair of prefixes A and B matches all phone numbers with the first |A| − |B| digits matching the first digits of A and with the following |B| digits being lexicographically between the last |B| digits of A and B (inclusive).

 The first line of the input file contains four integer numbers n, m, d, and k (1 ≤ n ≤ 500, 1 ≤ m ≤ 1 000 000, 0 ≤ d < n⁄2 , 1 ≤ k ≤ 10 000 000). The second line contains n integer numbers from 0 to m − 1 — initial values of the automaton’s cells.

 The first line of the input file contains integer numbers r and n (1 ≤ r ≤ 100, 0 ≤ n ≤ 30), where r is the radius of the flying saucer, and n is the number of skyscrapers. The next line contains four integer numbers xA, yA, xB, and yB (−1000 ≤ xA, yA, xB, yB ≤ 1000), where (xA, yA) are the coordinates of the starting point of the flying saucer’s mission and (xB, yB) are the coordinates of its finishing point. The following n lines describe skyscrapers. Each skyscraper is represented by four integer numbers x1, y1, x2, and y2 (−1000 ≤ x1, y1, x2, y2 ≤ 1000, x1 < x2, y1 < y2) — coordinates of the corners of the corresponding rectangle.Skyscrapers neither intersect nor touch each other. Starting and finishing points of the flying saucer’s mission are valid locations for flying saucer, that is, it does not intersect any skyscraper in those points, but may touch some of them.

 The first line of the input file contains a single integer number n (1 ≤ n ≤ 10 000) – the number of incoming messages that the order book has to process. The following n lines contain messages. Each line starts with a word describing the message type – BUY, SELL, or CANCEL followed after a space by the message parameters.BUY and SELL denote an order to buy or to sell correspondingly, and are followed by two integers q and p (1 ≤ q ≤ 99 999, 1 ≤ p ≤ 99 999) – order size and price. CANCEL denotes a request to cancel previously issued order. It is followed by a single integer i which is the number of the message with some preceding order to buy or to sell (messages are numbered from 1 to n).

 The first line of the input file contains n1 and n2 — the number of cards that each of the players has in the beginning of the round (1 ≤ n1, n2 ≤ 6), and the trump suit (suit is specified using one letter: ‘S’ for spades, ‘C’ for clubs, ‘D’ for diamonds, ‘H’ for hearts).The second line contains n1 card descriptions — the cards of the first player. Each card is specified by its rank (‘6’…‘9’, ‘T’ for 10, ‘J’ for Jack, ‘Q’ for Queen, ‘K’ for King, ‘A’ for Ace) followed by its suit. The third line contains n2 card descriptions — the cards of the covering player. The first player is the starting player in the first round.All cards in players’ hands are different.

 Input file contains two integer numbers: n — the number of holographic statues initially located at the ACM, and m — the number of statues to be added (2 ≤ n ≤ 1000, 1 ≤ m ≤ 1000). The length of the alley along the park perimeter is exactly 10 000 feet.

 The first line of the input file contains two integer numbers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 1000). Here n is a total number of people in the company (people are numbered from 1 to n), and m is the number of pairs of people who work poorly in the same team. Next m lines describe those pairs with two integer numbers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi) on a line. The order of people in a pair is arbitrary and no pair is listed twice.

 The first line of the input contains two integers n and m (2 ≤ n ≤ 30, 0 ≤ m ≤ 1 000) — the number of towns in Lipshire, and the number of roads which are still good. The following m lines describe roads, one per line. Each road is described with two endpoints — two integer numbers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi). There can be multiple roads between two towns, but the road from a town to itself is not allowed.

 The input file consists of one line that contains an identifier. It consists of letters of the English alphabet and underscores. Its length does not exceed 100.

 The input contains a single test cases. The test cases starts with a line with two integers N and M not exceeding 30 000 and 150 000 respectively. N is the number of kids in the class and the kids were numbered 1 through N. snoopy and flymouse were always numbered 1 and N. Then follow M lines each holding three integers A, B and c in order, meaning that kid A believed that kid B should never get over c candies more than he did.

 The input contains several test cases. Each test cases start with two integers N and M not exceeding 30 000 and 150 000 respectively on the first line, meaning that there were N team members living in N distinct rooms and M direct paths. On the next N lines there are N integers, one on each line, the i-th of which gives the comfort index of the words of the team member in the i-th room. Then follow M lines, each containing two integers i and j indicating a directed path from the i-th room to the j-th one. Process to end of file.

 The input contains several test cases. Each test case consists of one line containing a univariate function f(x) and two real numbers a and b meaning the approximate value of  is to be found. f(x) is expressed as a C-expression-like string. Allowed tokens are summarized in the following table:     Token Meaning Example Example in Mathematical Form   + addition, positive x+1, +x x + 1, +x   - subtraction, negative x-1, -x x − 1, −x   * multiplication x*x x · x   / division x/2 x⁄2   ^ power x^-x x−x   ( left parenthesis (x+1)*x (x + 1) x   ) right parenthesis -(x+1) −(x + 1)   sin sine sin(x) sin x   cos cosine cos(x) cos x   tan tangent tan(x) tan x   log natural logarithm log(x) ln x   exp exponential exp(x) ex   asin inverse sine asin(x) arcsin x   acos inverse cosine acos(x) arccos x   atan inverse tangent atan(x) arctan x   abs absolute value abs(x) |x|   x variable x x   constant C floating-point constants without suffixes 0, 1.5 0, 1.5    And the syntax is given below:     S ::= +S | -S | S+S | S-S | S*S | S/S | S^S | F(S) | (S) | x | constant   F ::= sin | cos | tan | log | exp | asin | acos | atan    Operator precedence and associativity are almost the same as those in C except that ‘^’ takes higher precedence than ‘*’ and ‘/’ and has right associativity.f(x) is not necessarily continuous. It can have singularities which are always isolated if exist. It can be oscillatory, but it will never be oscillatory in the neighborhood of singularities where it blows up. The integral is guaranteed to converge.Length of the interval over which f(x) is integrated is not longer than 10.Process to end of file.

 The input contains a single test case. The test case starts with a line containing the integers N (N ≤ 106) and M (M < 109). Then follow N − 1 lines, each containing two integers fi and di (i = 1, 2, …, N − 1), meaning the check-points i + 1 and fi are connected by a path of length di.

 The input contains several test cases. Each test case starts with a line containing the integer N and M. Then follow a probability matrix of N rows and M columns { pij }N Ã— M, where pij is the probability that Sempr wins a round if his i-th hero fights with styc's choice of the j-th character as the hero. Process to end of file.

 The first line of the input file contains two integers n (1 ≤ n ≤      40 000  ) and k (1 ≤ k ≤      50 000  ). Each of the next k lines contains the number of blocks with the corresponding type of picture li (li > 0, sum of all li is exactly n2).

 The input contains several test cases. Each test case starts with a line containing two integer N (N ≤ 100), the number of nodes in the destroyed network, and M (M ≤ 104), the number of pairs of nodes between which a wire can be built. The next N lines each contain an ordered pair xi and yi, giving the Cartesian coordinates of the nodes. Then follow M lines each containing two integers i and j between 1 and N (inclusive) meaning a wire can be built between node i and node j for unidirectional command delivery from the former to the latter. littleken’s headquarter is always located at node 1. Process to end of file.

 On the first line of the input you will be given an integer N (1 ≤ N ≤ 1000) representing the number of cities, and an integer M (M ≤ 10000) representing the number of routes to be given below (excluding the mandatory routes from each city i to city i + 1).The following M pairs of integers each contain a piece of information for a single route, in the form of “A B” where A indicates the starting city of this route and B shows the ending city. (1 ≤ A ≤ B ≤ N) These pairs will be separated by spaces or empty lines.The next line contains three integers S1, S2, S3 – the starting cities of the three travelers. Similarly, the last line contains three integers E1, E2, E3 – the ending cities of the three travelers. (1 ≤ S1, S2, S3, E1, E2, E3 ≤ N, Si ≤ Ei, i = 1, 2, 3).This is a multiple test cases problem. Test cases are followed by blank lines. Please process to the end of the file.

 For n segments divided into by n − 1 garbage blocks, you will be given n strings with the information of  the coordinates of each lotus leaf. The i-th string is for the i-th segment from the left and if it is li characters long, that means the corresponding segment has length li + 1. The characters in a string describe the leaves in a segment from left to right. A character is one of A…Z and b…z, indicating an ordinate of 0…25 and −1…−25 respectively.Each test case starts with n (1 ≤ n ≤ 50) on the first line. The next n lines each contain a non-empty string with no more than 50 characters.This is a multiple test cases problem. Test cases are followed by blank lines. Please process to the end of the input.

 Line 1: Three space-separated integers: N, K, and S   Lines 2..N+1: Line i+1 describes the number of spots on cow i.   Lines N+2..N+K+1: Line i+N+1 describes pattern-rank slot i.

 Line 1: A single integer, N   Lines 2..N+1: Four space-separated integers A, B, C, and D, describing one barn. The lower-left corner of the barn is at (A,B) and the upper right corner is at (C,D).

 Line 1: Three space-separated integers: N, ML, and MD.   Lines 2..ML+1: Each line contains three space-separated positive integers: A, B, and D, with 1 <= A < B <= N. Cows A and B must be at most D (1 <= D <= 1,000,000) apart.   Lines ML+2..ML+MD+1: Each line contains three space-separated positive integers: A, B, and D, with 1 <= A < B <= N. Cows A and B must be at least D (1 <= D <= 1,000,000) apart.

 Line 1: Two space-separated integers: W and H.   Lines 2..?: These lines describe the map, row by row. The first line describes the most northwest part of the map; the last line describes the most southeast part of the map. Successive integers in the input describe columns of the map from west to east. Each new row of a map's description starts on a new input line, and each input line contains no more than 40 space-separated integers. If W <= 40, then each input line describes a complete row of the map. If W > 40, then more than one line is used to describe a single row, 40 integers on each line except potentially the last one. No input line ever describes elements of more than one row.   The integers that describe the map come from this set:  0: Square through which Bessie can travel  1: Impassable square that Bessie cannot traverse  2: Bessie's starting location  3: Location of the Knights of Ni  4: Location of a shrubbery

 Line 1: Three space-separated integers: N, M, and E.   Lines 2..N+1: Line i+1 describes cow i's schedule with three space-separated integers: T1, T2, and S.

 Line 1: Two space-separated positive integers, N and C.   Lines 2..N+1: Each line contains a single positive integer that is the mass of one weight. The masses are guaranteed to be in non-decreasing order.

 Line 1: Two space-separated integers: N and S

 Line 1: A single integer, N   Lines 2..N+1: Line i+1 describes cow i's location with two space-separated integers that are her x and y coordinates

 Line 1: A single integer, L   Line 2: L digits (with no spaces)

 Line 1: A single integer, N   Lines 2..N+1: Line i+1 contains i space-separated integers that represent row i of the triangle.

 A single line with two space-separated integers: N and K.

 Line 1: Two space-separated integers: F and R   Lines 2..R+1: Each line contains two space-separated integers which are the fields at the endpoints of some path.

 Line 1: Three space-separated integers: N, G, and R   Lines 2..N+1: Each line contains two space-separated integers that are the X,Y position of a fence post on the boundary of FJ's field.   Lines N+2..N+G+1: Each line contains two space-separated integers that are the X,Y position of a circle's center inside FJ's field.

 Line 1: Two space-separated integers: C and N   Lines 2..N+1: Each line contains two space-separated integers that are the X,Y coordinates of a clover field.

 Line 1: Two space-separated integers: N and M   Lines 2..M+1: Each line contains two space-separated integers A and B that describe a rope from cow A to cow B in the clockwise direction.

 Line 1: Two space-separated integers: R and C   Lines 2..R+1: Line i+1 describes row i with C characters (with no spaces between them).

 Line 1: A single integer, N   Lines 2..N+1: Line i+1 contains H_i

 Line 1: Two space-separated integers, N and L   Lines 2..N+1: Line i+1 describes cow i with a single integer (range 0..L) representing the position of a cow; 0 is the left-most position. The list is sorted by position with the smallest position value first.

 Line 1: A single line with 20 space-separated integers

 Line 1: A single integer, N   Lines 2..N+1: Line i+1 contains the value of treat v(i)

 The input is presented as an expression on a single line. The expression can contain up to 8 arithmetic operators.

 Line 1: Two space-separated integers: N and the final sum.

 Line 1: Two space-separated integers: B and L   Line 2: D, the number of words in the dictionary (1 <= D <= 1000)   Lines 3..D+2: Each line contains one word from the dictionary in upper case and of length 1..10 characters. The words are presented in alphabetical order and with no duplicates.

 Line 1: Two space-separated integers, N and B   Lines 2..N+1: Each line contains B space-separated integers which are exactly 1..B sorted into some order. The first integer on line i+1 is the number of the cow i's top-choice barn, the second integer on that line is the number of the i'th cow's second-choice barn, and so on.   Line N+2: B space-separated integers, respectively the capacity of the first barn, then the capacity of the second, and so on. The sum of these numbers is guaranteed to be at least N.

 Line 1: A single integer, N   Lines 2..N+1: Line i+1 describes cow i's milking interval with two space-separated integers.

 The input contains exactly one test case.The first line of the test case contains two integers N, M (N ≤ 500, M ≤ 5,000) which represents the number of cities and roads in the country, Phoenix, respectively.M lines follow, each line contains three integers a, b, c, which means that there is a road from city a to city b with a transportation capacity of c (0 ≤ a, b < n, c ≤ 100). All the roads are directed.Cities are numbered from 0 to n − 1, the city which can product goods is numbered 0, and the capital is numbered n − 1.

 Line 1: A single integer to be converted to base âˆ’2

 Line 1: A single integer N   Lines 2..N+1: Each line contains a single DNA subsequence

 Line 1: Two space-separated integers, M and N   Lines 2..M+1: Phrases from the phrase book, one per line.   Lines M+2..M+N+1: Phrases spoken by cows, one per line.

 It is understood that a cell in an n × n square array is denoted by a pair (i, j), with 1 ≤ i,  j ≤ n. The input file contains several test cases. Each test case begins with a line indicating n, 0 <  n < 100, the side of the square array to be partitioned. Next, there are n − 1 lines, each one corresponding to one partition of the cells of the square, with some non-negative integer numbers. Consecutive integers in a line are separated with a single blank character. A line of the forma1a2a3a4…means that cells denoted with the pairs (a1, a2), (a3, a4), … belong to one of the areas in the partition. The last area in the partition is defined by those cells not mentioned in the n − 1 given lines. If a case begins with n = 0 it means that there are no more cases to analyze.

 The input file contains several test cases, each one of them in a separate line. Each test case is a sequence of non zero integers, each one with an absolute value less than 107.

 The input file contains several test cases, each one of them in a separate line. Each test case is a triplet of non negative integers, indicating the initial pot, the bet and the final pot for a day. Each of the input numbers is less than 108. The initial pot and the bet are greater than 0.A line with a triplet of 0â€™s denotes the end of the input.

 Input will consist of a series of cases, each one in a line. A line describing a case contains p and q, two integer numbers separated by a space, with 1020 > p > q > 0. The end of the input is indicated by a line containing 0 0.

 The input consists of several test cases. Each test case is given in a single line of the input by a natural number representing a polygon. The end of the test cases is indicated with *.

 The input consists of several test cases. Each test case is given in a single line of the input by, space separated, integers N (1 ≤ N ≤ 10) and D (0 ≤ D ≤ 25), corresponding to the number of nephews and the number of CDs respectively. The end of the test cases is indicated with N = D = 0.

 The input file contains several test cases.Each test case begins with a line indicating N, 0 < N < 1000, the number of blocks that the designed tower should have.Then, there is a line describing each one of the blocks. The block k, 0 ≤ k < N, is described by a line containing 3 integers separated by blanks, of the formxk yk rkwhich indicates that the block k with radius rk must be placed supported on the block k − 1 (exception: block 0 is placed on the ground) with its center of mass on the point ‹xk, yk, k + 0.5› with respect to a grid with origin in ‹0, 0, 0› , for |xk|, |yk| ≤ 105 and rk ≤ 105.

 The input contains exactly one test case.In the test case there will be a line consisting of of two integers: n and m (n ≤ 1,000, m ≤ 500). The following m lines each contain two integers ai and bi, which denote the endpoints of the ith wire. Every point will have at most one link.

 The first line contains the number of test cases T (T ≤ 1,000).Each of the following T lines contains an integer n (1 ≤ n ≤ 50,000,000) as a test case.

 The first line of the input is an integer T (T â‰¤ 50), and the following T lines have an integer n each. It is guaranteed that each n fits in signed 64-bit integer type.

 The input contains multiple test cases. Each test case consists of a single positive integer n (n < 10,000) on a separate line. A zero indicates the end of input and should not be processed.

 The first line of input will consist of positive integers n and r, separated by a space, where 3 ≤ n ≤ 1000 is the number of tourist attractions on the island, and 2 ≤ r ≤ 1000 is the number of roads. The tourist attractions are conveniently labelled from 1 to n. Each of the following r lines will consist of two integers, v and w, separated by a space, indicating that a road exists between the attractions labelled v and w. Note that you may travel in either direction down each road, and any pair of tourist attractions will have at most one road directly between them. Also, you are assured that in the current configuration, it is possible to travel between any two tourist attractions.

 The input contains several test cases. Each test case begins with a line of two positive integers M and N (M < 10, N < 100), which are the numbers of colors and of clothes. The next line contains M strings which are not longer than 10 characters and do not contain spaces, which the names of the colors. Then follow N lines describing the clothes. Each of these lines contains the time to wash some piece of the clothes (less than 1,000) and its color. Two zeroes follow the last test case.

 The input contains a single test case. The first line of input contains a positive integer N (N ≤ 100,000), the number of wells. Then follow N lines, each contains two integers xi and yi (|xi|, |yi| ≤ 1,000,000), which are the Cartesian coordinate of the ith well.

 The first line of the input three integers N, P and M (0 < N, P, M â‰¤ 1,000), which indicate the dimensions of A and B. Then follow N lines with P integers each, giving the elements of A in row-major order. After that the elements of B and C are given in the same manner.Elements of A and B are bounded by 1,000 in absolute values which those of C are bounded by 2,000,000,000.

 The input contains a single test case. The test case consists of nonnegative integers distributed on multiple lines. The first integer is the height of the heap. It will be at least 1 and at most 20. Then follow the elements of the array to be transformed into a heap described above, which do not exceed 109. Modified elements should remain integral though not necessarily nonnegative.

 The input contains multiple test cases. Each test case have n + 1 lines the first one of which contains n (1 < n < 105 and odd). Then n lines follow, each of which contains two integers ai and bi (|ai| ≤ 108, 0 ≤ bi < 108). A zero follows the last test case.

 The input contains multiple test cases. Each test case begins with a line containing Q and M (0 < Q ≤ 20, 0 < M ≤ 200). Then follow Q lines each with Q integers, which represent a Q × Q matrix Δ = {δij}, where δij means a bidirectional road connects the ith and the jth blocks and requires δij time to go from one end to another. If δij = −1, such a road does not exist. The matrix is symmetric and all its diagonal elements are zeroes. Right below the matrix are M lines describing the repairing tasks. The ith of these lines contains pi, ti and di. Two zeroes on a separate line come after the last test case.

 The input contains several lines, the first line has two integers, which represent the names of the two persons. The following lines represent the family tree of two persons. Each line has several integers separated by blanks. The first number of each line represents the number of node, and the followed integers represent the direct descendants of he/she. The last integer of each line will be an integer: 0 or âˆ’1, representing that the person described in this line is male/female, respectively.The input assures that:  All numbers are in the range [1, 100]. No two persons who have already married will come for a license. To simplify the problem, we will assume that the input will not contain any means of fornication. 

 The input contains a single test case on multiple lines. The first line contains only one character among “L”, “R”, “C” and “J”, which means some text is to be aligned left, right, centered or justified. Words of the text are found on the following at most five lines. Those on the same line are separated by at least one spaces. They will only contain characters with ASCII code between 33 and 126 (inclusive) and are less than 75 characters long.

 The input contains multiple test cases. Each test case consists of a pair of integers n and k (0 ≤ k ≤ n < 231, n > 0) on a separate line.End of file (EOF) indicates the end of input.

 The input contains exactly one test case. The first line of input contains n (n â‰¤ 10). The next n2 numbers describe the puzzle by rows. The empty square is represented by zero.

 To make everything brief, we group together all rules with the same variable to the left of “→”  in the CFG. For example, we group the following three rules  S → uS → vS → w into  S → u | v | w And the CFG is given in a special form called Chomsky normal form (CNF). A CFG in CNF only contains rules of the form  A → BCA → a where a is any terminal and A, B, and C are any variables except that B and C may not be the start variable. CNF also permits the rule S → ε, where S is the start variable and ε represents the empty string, so that the CFG can generate the empty string. We ignore this case just for this problem.The input contains exactly one CFG in CNF and no more than 50 strings. We use single lowercase letters as terminals and single uppercase letters as variables. S will always be the start variable. The CFG is given in several lines. A line contains all production rules for one variable grouped together as described above. “→” will be replaced by “->”. Not all possible variables are involved in the CFG, but every involved one will has at least one production rule. The CFG ends with a line containing only a single “#”. Following the CFG come the strings, one on a separate line. The input ends where no more strings can be found. Spaces and blank lines will not show up in the input.

 The input contains multiple test cases. The first contains an integer N (0 ≤ N ≤ 5,040), the number of test cases. Then follow N lines, each with a permutation of {0, 1, 2, 3, 4, 5, 6} describing a starting configuration of the puzzle. The ith digit in the permutation is the one in the face numbered i − 1. A zero means the face is empty.

 The input contains exactly one test cases. On the first line of the test case there are two integers n and m (3 ≤ n ≤ 20,000, 2 ≤ m ≤ 100,000, m is even) which indicate the size of the graph. Next come m lines each with a pair of integers a and b representing an edge (a, b). The vertices are numbered 1 through n.

 function vec(v, a){var V = document.getElementById(v);var A = document.getElementById(a);A.style.verticalAlign=V.offsetHeight/2;A.style.marginLeft=-(A.offsetWidth+V.offsetWidth)/2;A.style.marginRight=(V.offsetWidth-A.offsetWidth)/2;} The input contains multiple test cases. Each test case consists of a single line with the coordinates of four points A, B, U and V in the form (x,y) separated by spaces. The four points do not coincide with each other. A and B describe the goal. The two posts are located on A and B, and when looking along the vector AB→vec("AB1","rarr1"); while standing on A, one will find the goal facing his right hand side. U and V describe the line segment. When looking along the vector UV→vec("UV2","rarr2"); while standing on U, one will find both A and B on his left hand side. It is possible that a portion of the segment lies off the pitch, where a play is also allowed. It is also possible that a portion of the segment lies behind the goal, where a play, however, is disallowed.All coordinates consist of nonnegative integers not exceeding 10,000. End of file (EOF) indicates the end of input.

 Input data consists of no more than 20 test cases. For each test case, there would be only one line containing 3 integers  X,  Z,  K (0 ≤  X,  Z,  K ≤ 10 9).  Input file ends with 3 zeros separated by spaces.  

 The input contains exactly one test case. The test case starts with a line containing n (2 ≤ n ≤ 100), the number of students in the lab. Then follows an n × n matrix A. Each element in the matrix will be one of 0, 1, 2 and 3. The element at row i and column j, aij, is the number of games won by the ith student in his/her match with the jth student. Exactly one of aij and aji (i ≠ j) is 3 and the other one will be less than 3. All diagonal elements of the matrix are 0’s.

 The input contains exactly one test case, which consists of between 0 and 65,535 (inclusive) commands of the language. Each command occupies a single line and appears like  X T where X is one of ‘U’, ‘I’, ‘D’, ‘C’ and ‘S’ and T is an interval in one of the forms (a,b), (a,b], [a,b) and [a,b] (a, b ∈ Z, 0 ≤ a ≤ b ≤ 65,535), which take their usual meanings. The commands are executed in the order they appear in the input.End of file (EOF) indicates the end of input.

 There are several test cases. Each data is made up of two lines. The first line is number n (1<=n<=26) The second line is a string with its length of n. n=0 means end of the input. 

 There are several test cases. For each case, the first line is two integers n (0<n<=1000) and h. Then n lines follow and each line is two integers x and y(0<=x,y<=1000) describe the coordinates of mountains. n=h=0 means end of the input.

 The input contains several test cases. For each case, the first line is integer N(1<=N<=200). The second line is N integers associated with the storage of the gold mine in every towns .The third line is also N integers associated with the storage of the storehouses in every towns .Next is integer M(0<=M<=(n-1)*n/2).Then M lines follow. Each line is three integers x y and d(1<=x,y<=N,0<d<=10000), means that there is a road between x and y for distance of d. N=0 means end of the input.

 There are several test cases. For each case, the first line is three integers N, M and K. N (1<=n<=15) is the number of sights, M(0<=M<=N) is total sights he must arrived (sight 1 is always must be arrived) and K is total traveling time (per day). The second line is M integers which sights he must visited. The third line is N integers, the i th integer means the time he will stay in the sight i (per hour). Then several lines follow. Each line is four integers x, y, len and kind, 1<=x, y<=n, 0<len<=1000, means there is a bidirectional path between sights x and y, the distance is len, kind=0 means x and y are connected by train, kind=1 is by bus. x=y=len=kind=0 means end of the path explanation. N=M=K=0 means end of the input. 

 There are multiple cases. The first line of one case is two positive integers, n and m .n is the number of cities, and m is the number of traveling days. There follows n lines, one line n integers. The j integer in the i line is the expense of traveling from city i to city j. If i equals to j it means the expense of staying in the city. After an empty line there are m lines, one line has n integers. The j integer in the i line means the income from city j in the i day. The input is finished with two zeros.n,m<100.

 There are multiple cases in the input. The first line of each case contains two integers, n and t (n<=100). n is the number of tasks, and t is the total bandwidth. There follows n lines, one line has three integers, means the size of the download file, the initial speed and the max speed. The input promises the sum of tasks' speed equals to the total bandwidth, the speed is not higher than the max speed. The input is terminated by a zero.

 The input consists of N + 1 lines. The first line contains N and K (1 ≤ K ≤ N ≤ 100) separated by one or several spaces. The others contain values of array elements.

 The input file has T (1<T<20) test cases, and the first line of the file will show the T. Each of test cases, will be the N (1<= N <= 100000) rider, and N numbers Ai (1<= Ai <= 10^8) show how long will the rider have to finish the race. And the M and the K (1<= K*M <=10^8) for the accelerators.

 The input contains exactly one test case. The first line of input contains three positive integers n (n ≤ 30), k (k ≤ 109) and m (m < 104). Then follow n lines each containing n nonnegative integers below 32,768, giving A’s elements in row-major order.

 The input contains exactly one test case given as specified below:    Line 1 Four integers xm, ym, xd and yd, suggesting the locations of the observer (xm, ym) and the object (xd, yd). The two locations can coincide with each other.   Line 2 An integer N (0 < N < 9), the number of walls.   Line 3 – N + 2 Four integers x1, y1, x2 and y2 on each line, giving the two ends of a wall (x1, y1) and (x2, y2). The wall satisfies exactly one of four conditions:       x1 = x2 y1 = y2 x1 + y1 = x2 + y2 x1 − y1 = x2 − y2    The walls does not intersect or touch each other. All coordinates are in the range (−104, 104) × (−104, 104).

 The input contains exactly one test case. The first line of input contains two integers m and n (2 ≤ n < m ≤ 100, n ≤ 10, n · m ≤ 200). The next m lines each contains an integral n-dimensional vector (a1, a2, …, an). It is guaranteed that for all i (1 ≤ i ≤ n) if n = 2, |ai| ≤ 103, otherwise |ai| ≤ 102.

 The first line contains two integers N and K. The following N lines each contain two integers a and b, which describe a object. 

 The input contains exactly one test case given as specified below:    Line 1 Two integers N (1 < N < 1,200) and M, which are the numbers of junctions and pipes, respectively.   Line 2 – M + 1 Two integer A and B (1 ≤ A, B ≤ N) on each line, describing a pipe connecting junctions A and B.   You can assume that there exists a path between any two junctions.

 The input contains multiple test cases. The first line of input contains an integer t (t ≤ 20), the number of test cases. Then follow the test cases.Each test case is preceded by an empty line. The first nonempty line of its contains N (N ≤ 10,000). The next N − 1 lines each contains three integers a, b and c, describing an edge connecting nodes a and b with weight c. The edges are numbered in the order they appear in the input. Below them are the instructions, each sticking to the specification above. A lines with the word “DONE” ends the test case.

 The input contains multiple test cases. Each test cases begins with a line containing two integers n1 and n2 (n1, n2 ≤ 200). The next n1 + n2 lines each contain a pair of integers (x, y) (1 ≤ x, y ≤ 100). For the first n1 pairs, Harry puts heads in the corresponding squares. Harry lets Sally decide on coins in the squares denoted by the rest n2 pairs and puts tails in other squares.

 The input contains multiple test cases. Each test case consists of a single integer n between 8 and 300 (inclusive). A zero indicates the end of input.

 The input begins with two numbers, n and m, indicating the length of the row and the column respectively.  The next n lines each contain m integers indicating the height of wood blocks.  The next line contains a single integer, t, the size of the music score.  The next t lines each contain three integers, i,j, and k, indicating pour(i,j,k). The order of pour(i,j,k) in the input is the same as that in the music score.  

 The input consists of several test cases.  Each test case begins with a line containing an integer  N, denotes the number of triplets. Assume that we number the triplets as  T1,  T2, ... ,  TN. Then, there are following  N lines, each line contains three integers, giving the elements of each triplet.  A case with  N = 0 indicates the end of the input.  

 The input contains exactly one test case. The first line of input contains two positive integers N (N ≤ 50000), Limit (Limit ≤ 231-1). Then follow N lines each contains a positive integers pair (A, B). It's always guaranteed that max{ A 1,  A 2, ...,  An} ≤ Limit  

 The input contains several test cases. Each test starts with an integer N(4 â‰¤ N < 105+1), the total number of points on the plane. The next N lines, each contains two integers x and y, indicating the position of the point. The input ends up with N=0.

 Input file consists of several test cases, for each test case:  The first line contains 2 positive integer N and M (N, M â‰¤ 50000), which means there are N + 1 joints and M ROs in the test case. In the next N + 1 lines, each line will contains a real number (X i, Y i, Z i). The next M lines each line starts with an integer CMD which is 1 or 2.  If CMD = 2, then it follows an integer t in [0, N]. It means a query to the position of joint t.  If CMD = 1, then it follows 5 number idx, alpha, (X p, Y p, Z p), standing for a rotation operation    .   The input file ends with one line consisting of two 0 separated by a space.   You may assume all real numbers in input data are smaller than 10  4 in absolute value.    

 The input contains only one case.  The input begins with three positive integers,  n,  m and  k, indicating the length of row and column, and the number of soldiers.  In the next  k lines each line contains three non-negative integers,  x,  y,  r, indicating a soldier is placed on the  xth row and  yth column, and the control range of that soldier is  r.  It is guaranteed that 1 ≤  n,  m ≤ 100000000，1 ≤  k ≤ 100000  

 The input file includes several test cases.  The first line of each test case contains 2 integers  n and  m(1 ≤  n ≤ 100000, 0 ≤  m ≤ 1000000) indicating the number of cities and roads.  The next  n lines each contain a single integer. The  ith line describes the net profit of the city  i,  Vi (0 ≤ | Vi| ≤ 20000)  The next m lines each contain two integers  x,  y indicating that there is a road leads from city  x to city  y. It is guaranteed that each road appears exactly once, and there is no way to return to a previous city.  

 Line 1: The number of cows,  N.  Lines 2..N+1: Line  i+1 contains a single integer that is the height of cow  i.

 Line 1: A single integer,  N Lines 2.. N+1: Line  i+1 describes line  i of the field with  N characters. The characters are: 'J' for a Farmer John cow, 'B' for a Farmer Bob cow, and '*' for an unoccupied square. There will always be at least one unoccupied gridpoint.  

 Line 1: Two space-separated integers, respectively  Start and  Finish.

 Line 1: One integer  N, the number of planks  Lines 2.. N+1: Each line contains a single integer describing the length of a needed plank

 Line 1: Two space-separated integers:  M and  N Lines 2.. M+1: Line  i+1 describes row  i of the pasture with  N space-separated integers indicating whether a square is fertile (1 for fertile, 0 for infertile)

 Line 1: Two space-separated integers:  N and  R Lines 2.. R+1: Each line contains three space-separated integers:  A,  B, and  D that describe a road that connects intersections  A and  B and has length  D (1 ≤  D ≤ 5000)

 Line 1: Three space-separated integers, respectively:  K,  N, and  M Lines 2.. K+1: Line  i+1 contains a single integer (1.. N) which is the number of the pasture in which cow  i is grazing.  Lines  K+2.. M+ K+1: Each line contains two space-separated integers, respectively  A and  B (both 1.. N and  A !=  B), representing a one-way path from pasture  A to pasture  B.

 Line 1: Three space-separated integers:  L,  N and  B.  Lines 2.. N+1: Line  i+1 contains four space-separated integers, respectively:  Xi,  Wi,  Fi, and  Ci.

 Line 1: Three space-separated integers:  L,  N, and  M Lines 2.. N+1: Each line contains a single integer indicating how far some rock is away from the starting rock. No two rocks share the same position.

 Line 1: A single integer,  F.  F farm descriptions follow.  Line 1 of each farm: Three space-separated integers respectively:  N,  M, and  W Lines 2.. M+1 of each farm: Three space-separated numbers ( S,  E,  T) that describe, respectively: a bidirectional path between  S and  E that requires  T seconds to traverse. Two fields might be connected by more than one path.  Lines  M+2.. M+ W+1 of each farm: Three space-separated numbers ( S,  E,  T) that describe, respectively: A one way path from  S to  E that also moves the traveler back  T seconds.

 Line 1: Two space-separated integers:  N and  T.  Line 2: N space-separated integers, respectively  V 1,  V 2, ...,  VN coins ( V 1, ... VN)  Line 3: N space-separated integers, respectively  C 1,  C 2, ...,  CN

 Line 1: Two space-separated integers:  N and  K Lines 2.. N+1:  N integers, one per line, the quality of the milk on day  i appears on the  ith line.

 Line 1: A single integer  N Lines 2.. N+1: Each line contains two space-separated integers,  Ti and  Di, that describe a single cow's characteristics

 Line 1: Four space-separated integers:  N,  I,  H and  R Lines 2.. R+1: Two distinct space-separated integers  A and  B (1 ≤  A,  B ≤  N), indicating that cow  A can see cow  B.

 Line 1: Two space-separated integers,  N and  Q.  Lines 2.. N+1: Line  i+1 contains a single integer that is the height of cow  i Lines  N+2.. N+ Q+1: Two integers  A and  B (1 ≤  A ≤  B ≤  N), representing the range of cows from  A to  B inclusive.

 Line 1: Two space-separated integers:  M and  P.  Lines 2.. P+1: Line  i+1 describes problem  i with two space-separated integers:  Bi and  Ai.  Bi is the payment to the consult BEFORE the problem is solved;  Ai is the payment to the consult AFTER the problem is solved.  

 Line 1: A single integer,  N Lines 2.. N+1: Line  i+1 contains two space-separated integers:  Ti and  Pi

 Line 1: Two space-separated integers, respectively:  W and  L Line 2:  L characters (followed by a newline, of course): the received message  Lines 3.. W+2: The cows' dictionary, one word per line

 Line 1: Three space-separated integers, respectively:  N,  M, and  X Lines 2.. M+1: Line  i+1 describes road  i with three space-separated integers:  Ai,  Bi, and  Ti. The described road runs from farm  Ai to farm  Bi, requiring  Ti time units to traverse.

 Line 1: A single integer:  N Lines 2.. N+1: Line  i+1 contains two space-separated integers which are the grazing location ( Xi,  Yi) of cow  i

 Line 1: A single integer:  N.  Lines 2.. N+1: Each line contains a single integer: line  i+1 describes the grumpiness of cow  i.  

 Line 1: Two space-separated integers:  M and  N Lines 2.. M+1: Line  i+1 describes row i of the pond using  N space-separated integers with these values: 0 indicates empty water; 1 indicates a lilypad in place; 2 indicates rock in place; 3 indicates the lilypad Bessie starts on; 4 indicates the lilypad Bessie wants to travel to.

 Line 1: Two space-separated integers:  N and  M.  Lines 2.. M+1: Two space-separated intersection points.

 Line 1: Two space-separated integers:  N and  M Lines 2.. N+1: Line  i+1 contains the number of dollars Farmer John spends on the  ith day

 Line 1: Two space-separated integers:  N and  K

 Line 1: Two space-separated integers,  N and  K.  Lines 2.. N+1: Line  i+1 contains a single  K-bit integer specifying the features present in cow  i. The least-significant bit of this integer is 1 if the cow exhibits feature #1, and the most-significant bit is 1 if the cow exhibits feature # K.

 Line 1: Two space-separated integers:  N and  M Lines 2.. M+1: Two space-separated integers, respectively:  X and  Y. Both  X and  Y are in the range 1... N and describe a comparison where cow  X was ranked higher than cow  Y.

 Line 1: A single integer:  N Lines 2.. N+1: Line  i+1 contains a single character,  F or  B, indicating whether cow  i is facing forward or backward.

 Line 1: A single integer:  N Lines 2.. N+1: Input line  i+1 describes building  i with three space-separated integers:  Ai,  Bi, and  Hi



 Line 1: Two space-separated integers:  M and  N Lines 2.. M+1: Line  i+1 describes the colors (left to right) of row i of the grid with  N space-separated integers which are 1 for black and 0 for white

 Line 1: Two space-separated integers:  N and  M Line 2: This line contains exactly  M characters which constitute the initial ID string  Lines 3.. N+2: Each line contains three space-separated entities: a character of the input alphabet and two integers which are respectively the cost of adding and deleting that character.

 Line 1: Three space-separated integers:  N,  F, and  D Lines 2.. N+1: Each line  i starts with a two integers  Fi and  Di, the number of dishes that cow  i likes and the number of drinks that cow  i likes. The next  Fi integers denote the dishes that cow  i will eat, and the  Di integers following that denote the drinks that cow  i will drink.

 The first line of input contains c, the number of test cases. Each test case begins with l, m. m lines follow describing the cars that arrive in this order to be transported. Each line gives the length of a car (in centimeters), and the bank at which the car arrives ("left" or "right"). 

 There will be multiple test cases. Each test case starts with a line containing n indicating the number of nodes, numbered 1 through n (a value of n = 0 indicates end-of-input). The next line will contain an integer e indicating the number of edges. Starting on the following line will be e pairs n1 n2 indicating an undirected edge between nodes n1 and n1. This information may span multiple lines. You may assume that n ≤ 100 and e ≤ 300. Do not assume that the graphs in the test cases are connected or acyclic.

 The input contains several test cases followed by a line containing 0. The first line of each case contains the number of card hands. Each subsequent line describes a card hand. It starts with a number indicating the number of cards in the hand. The cards follow, separated by spaces, in the canonical order defined above. For each card, the value is given first, followed by the suit (C, D, H, or S). There are at most 100,000 cards in all hands. 

 Each line of input contains N, n and the a description of f in postfix notation, also known as Reverse Polish Notation (RPN). The operands are either unsigned integer constants or N or the variable x. Only binary operands are allowed: + (addition), * (multiplication) and % (modulo, i.e. remainder of integer division). Operands and operators are separated by whitespace. The operand % occurs exactly once in a function and it is the last (rightmost, or topmost if you wish) operator and its second operand is always N whose value is read from input. The following function:  2 x * 7 + N %is the RPN rendition of the more familiar infix  (2*x+7)%N. All input lines are shorter than 100 characters. The last line of input has  N equal 0 and should not be processed.  

 Input consists of several cases, each case is presented at a single line. Each line has nine numbers, three for each disc. Each triple has x and y coordinates of the disc center and the radius r of that disc. The input is terminated by a line with nine zeros and this line should not be processed. 

 Input consists of a sequence of lines. Each line contains two unsigned 32-bit integers m and n, m â‰¤ n. The last line of input has the value of m negative and this line should not be processed. 

 Standard input contains several test cases. Each test case consists of an integer 1 ≤ n ≤ 10000 giving the number of bags followed by n integers on one or more lines, each giving the dimension of a piece. A line containing 0 follows the last test case. 

 Input will consist of multiple test cases. The first line of each test case will contain two positive integers n m indicating the number of rows and columns in the grid (the maximum value of each will be 200). The next n lines will consist of m characters (either '0' or '1') specifying the grid. The last case is followed by a line containing 0 0 which indicates end-of-input and should not be processed.

 Standard input contains several test cases. Each test case contains the description of the two malls. Each mall's description consists of an integer p â‰¥ 4, the perimeter of the mall, followed by one or more lines containing p pairs (a,s) giving the coordinates of the avenue-street intersections contained in the perimeter, in clockwise order. A line containing 0 follows the last test case. 

 Input consists of several test cases. Each test case consists of a line containing real numbers k hb db hn dn and h. You may assume that 100 ≥ h ≥ hb + hn and that 100 ≥ db ≥ dn. A line containing 0 0 0 0 0 0 follows the last test case. 

 Input consists of several test cases. Each test case is a single line containing a string containing between 1 and 100 of the characters. A line containing 0 follows the last case. 

 Input consists of several test cases. Each test case consists of two lines representing x and y. x and y each consist of at least 1 and at most 100 lower case letters. Two lines containing 0 follow the last test case. 

 Each line of input contains an H-number â‰¤ 1,000,001. The last line of input contains 0 and this line should not be processed. 

 The first line of input is an integer giving the number of cases that follow. The input of each case starts with an integer 4 ≤      n    ≤ 100000 giving the number of points for this test case. It is followed by      n    pairs of integers specifying the      x    and      y    coordinates of the points for this case. 

 Standard input contains several test cases. Each test case begins with 1 ≤ n ≤ 100, the number of life forms. n lines follow; each contains a string of lower case letters representing the DNA sequence of a life form. Each DNA sequence contains at least one and not more than 1000 letters. A line containing 0 follows the last test case. 

 Input consists of several test cases. Each test case is a single line containing a WFF with no more than 100 symbols. A line containing 0 follows the last case. 

 Standard input consists of several test cases. Each test case is represented by a line with five numbers:   0 < k â‰¤ 100 -- an integer denoting the maximum number of rinses  Vb > 0 -- a real number denoting the volume of available rain water in the barrel  Vw > 0 -- a real number denoting the volume of whiskey in the cream can  Vr > 0 -- a real number denoting the volume of liquid that cannot be poured out by upending the can (further liquid might be eliminated by evaporation, but there is insufficient time before Ness' visit for any evaporation to take place)  Vc > Vw , Vr -- a real number denoting the maximum capacity of the cream can.  A line containing 0 follows the last case.  

 The input contains several test cases, each one ending with a line that starts with the digit 1. The last test case is followed by a line starting with the digit 0.   Each test case consists of one or more project sheets. A project sheet consists of a line containing the project name in capital letters, followed by the userids of students, one per line.   

 The first line of input will contain a single integer T expressed in decimal with no leading zeroes. T will be at most 50. T test cases will follow. Each test case is contained on a single line. A line describing a test case is formatted as follows:  n Fred0 Fred1 Fred2 ... Fredn-1.  where n and each element of Fred is an integer expressed in decimal with no leading zeroes. No line will have leading or trailing whitespace, and two adjacent integers on the same line will be separated by a single space. n will be at most 30000. 

 Input will consist of a number of lines. Each line except the last will consist of four items separated by spaces: a letter, a number, a second letter, and a second number. Each letter specifies the meaning of the number that follows it, and will be either T, indicating temperature, D, indicating dewpoint, or H, indicating humidex. The last line of input will consist of the single letter E.

 Input contains multiple test cases. Each test case is one single stage of the game. It starts with two integers R and C(3 ≤ R, C ≤ 500) which stands for number of rows and columns of the plane. That follows the plane, which contains R lines and C characters for each line, with 'O' (Oh) for target cell, 'X' for initial position of the box, '.' for a rigid cell, '#' for a empty cell and 'E' for a easily broken cell. A test cases starts with two zeros ends the input. It guarantees that   There's only one 'O' in a plane. There's either one 'X' or neighbouring two 'X's in a plane. The first(and last) row(and column) must be '#'(empty cell). Cells covered by 'O' and 'X' are all rigid cells. 

 Input consists of several test cases, followed by a line containing 0. Each test case is specified by the following input:   f: the number of sprockets in the front cluster;  r: the number of sprockets in the rear cluster;  f integers, each giving the number of teeth on one of the gears in the front cluster;  r integers, each giving the number of teeth on one of the gears in the rear cluster.   You may assume that no cluster has more than 10 sprockets and that no gear has fewer than 10 or more than 100 teeth. 

 The first line of input contains a single integer T expressed in decimal with no leading zeroes, denoting the number of test cases to follow. The subsequent lines of input describe the test cases.  Each test case begins with a single line, containing a single integer n expressed in decimal with no leading zeroes, the number of points to follow; each of the following n lines contains two integers x and y, both expressed in decimal with no leading zeroes, giving the coordinates of one of your points.  You are guaranteed that T â‰¤ 30 and that no data set contains more than 30 points. All points in each data set will be no more than 500 units away from (0,0). 

 The first line of input contains an integer T, which is the number of test cases. Each of the next T lines contains two non-empty strings s1 and s2 (with length at most 100) consisted of only alpha-numeric characters and separated from each other by a single space.

 The first line of input contains a single integer T, which is the number of test cases. Each test case starts with a line containing one integer 1 ≤ R ≤ 12 which is the number of requests, followed by R lines, each of which containing the description of a single request. A request is a line containing the positive integers A B K H1 H2 ... HK, in which the period [A, B] (1 ≤ A ≤ B ≤ 10000) indicates the period during which a hall is needed, K indicates the number of candidate halls and 1 ≤ H1 ≤ H2 ... ≤ HK ≤8 are the indices of the candidate halls from which a hall is to be allocated to that request.

 Input begins with a number T showing the number of test cases and then, T test cases follow. Each test case begins with a line containing a positive integer n â‰¤ 100 showing the number of segments. After that, n lines containing four real numbers x1 y1 x2 y2 follow, in which (x1, y1) and (x2, y2) are the coordinates of the two endpoints for one of the segments.

 The first line of input consists of a single integer T, the number of test-cases. Each test-case starts with a line containing two integers, , 1 ≤ R ≤ 100 , the number of aircrafts requesting to land and 1 ≤ B ≤ 10, the number of available bands for landing. Each of the next R lines contains the description of the landing aircraft consisting of the aircraft ID (less than 10000000), the date of arrival (due to Persian Calendar ) in the format 'dd/mm/yyyy' where 1178 ≤ yyyy < 1634 , the time of initial request for landing in the format 'hh:mm:ss.uuu' in 24 hour format, and the time-span 'hh:mm:ss.uuu', guaranteed to be at most 2 hours, which is the amount of time needed for that aircraft to land.

 Input begins with a number T showing the number of test cases and then, T test cases follow. Each test case includes a positive integer i which is the number written by Kamran's sister in the report. Please note than input includes thousands of test cases.

 Input begins with a number T showing the number of test cases and then, T test cases follow. Each test case begins with a line containing three integers 1 ≤ m ≤ 50 , 1 ≤ n ≤ 50 and 1 ≤ l ≤ 500 showing the number of rows and columns of the yard and the number of paratroopers respectively. After that, a line with m positive real numbers greater or equal to 1.0 comes where the ith number is ri and then, a line with n positive real numbers greater or equal to 1.0 comes where the ith number is ci. Finally, l lines come each containing the row and column of a paratrooper.

 Input begins with a number T showing the number of test cases and then, T test cases follow. Each test case begins with a line containing an integer 1 ≤ n ≤100 and a positive real number V ≤ 5000 representing the number of stones and volume of each bag respectively. After that, a line containing n positive integers less than or equal to 100 will come where the ith number shows the volume of ith gold stone. Then, a line containing n positive real numbers will come where the ith number shows the value of ith gold stone.

 Input will consist of multiple test cases. The first line will contain a single integer n indicating the number of orders to deliver, where 1 ≤ n ≤ 10. After this will be n + 1 lines each containing n + 1 integers indicating the times to travel between the pizzeria (numbered 0) and the n locations (numbers 1 to n). The jth value on the ith line indicates the time to go directly from location i to location j without visiting any other locations along the way. Note that there may be quicker ways to go from i to j via other locations, due to different speed limits, traffic lights, etc. Also, the time values may not be symmetric, i.e., the time to go directly from location i to j may not be the same as the time to go directly from location j to i. An input value of n = 0 will terminate input.

 Input will consist of multiple test cases. Each test case begins with a line consisting of two positive integers n and k, where n ≤ 1000, k ≤ 8, and n is divisible by k. Following this are n lines, each containing a single name consisting only of upper case letters with no embedded, leading, or trailing blanks. These are the names of the n students who need to be organized into teams of size k each. No name will exceed 80 characters. The last test case is followed by a line containing two zeros.

 Input will consist of multiple test cases. The first line of the input file will contain a single integer indicating the number of test cases. Each test case will consist of several lines. The first line will contain three integers: l c n, where l is the length of the code being guessed, c is the number of colors to choose from, and n is the number of guesses made so far. These values will satisfy 1 ≤ l ≤ 15, 1 ≤ c ≤ 20, 0 ≤ n ≤ 10. The values of l and c will be such that the total possible number of codes will be 32768. After this will come n lines of the form :     guess b w  where guess is a length-l character string specifying a guess, and b and w are the number of black and white pegs in the response. All colors will be uppercase letters taken from the first c letters of the alphabet. For each test case, the guesses given will limit the total number of possible solutions to 1500.

 Input will consist of multiple test cases. Each test case will start with a line containing three integers n w b, where n indicates the number of plaques to ship, w indicates the width of each plaque, and b indicates the height of each shipping box. These values will lie in the ranges 1 ... 100, 1 ... 10 and 1 ... 100, respectively. Following this line will be n specifications of plaque shapes. Each shape specification starts with a single line containing the integer height h of the plaque (1 ≤ h ≤ 10 and h ≤ b). Following this will be h lines containing w characters each, where each character is either 'X' (indicating a part of the plaque ) or '.', indicating empty space. The order in which the plaques appear in the input is the order in which they must be packed in the boxes, and rotating or inverting the plaques is not allowed. The input file will end with the line 0 0 0.

 Input will consist of multiple test cases. Each case will begin with two positive integers n and k (2 ≤ n ≤ 100, 1 ≤ k < n) indicating the number of points used in the original roof plan and the number of sections used in the compromise roof. These will be followed by n lines each containing two floating points numbers xi yi, specifying the n points in the roof plan. These values will be given in increasing order of x, and the last point will be guaranteed to have the highest y value of any of the points. All values will be between 0.0 and 10000.0. The last case is followed by a line containing 0 0 which indicates end-of-input and should not be processed. 

 Input will consist of multiple test cases. Each test case will start with a line containing a positive integer n (â‰¤ 8) indicating the size of the board. Next will come n lines describing the current board layout (row 0 first, followed by row 1, etc). Each of these lines will contain n characters taken from '0', '1' and '.', where '.' represents an empty square. The first character will be in column 0, the second in column 1, etc. The number of 0's on the board will either be equal to the number of 1's or one greater, and there will be between 1 and 10 (inclusive) empty squares. The last case is followed by a line containing 0 which indicates end-of-input and should not be processed.

 The first line of input contains a positive integer n (n ≤ 500) followed by the the three matrices A, B and C respectively. Each matrix's description is a block of n × n integers. It guarantees that the elements of A and B are less than 100 in absolute value and elements of C are less than 10,000,000 in absolute value.

 A test set can have several test cases, and the number of test cases is given at the first line. Each test case starts with three integers, n, m, and k where n tells you the size of a chess board, m is the number of red cells on the board, and k is the number of yellow cells. Each of following m lines contains two integers (row number and column number, 0-based), representing a red cell on the board. Then, each of following k lines contains two integers, representing a yellow cell on the board. See the sample input for clarification. You may assume that any cell cannot be both yellow and red and that the same cell is not given more than once. For each test case, n, m, and k do not exceed 40, 10, and 1600, respectively.

 The first line of input is an integer P (1 ≤ P ≤ 1000000), which is the number of pages of Jessica's text-book. The second line contains P non-negative integers describing what idea each page is about. The first integer is what the first page is about, the second integer is what the second page is about, and so on. You may assume all integers that appear can fit well in the signed 32-bit integer type.

 The first line contains an integer N (N ≤ 100,000) , which is the number of the forks in the tree.The following N - 1 lines each contain two integers u and v, which means fork u and fork v are connected by a branch.The next line contains an integer M (M ≤ 100,000).The following M lines each contain a message which is either"C x" which means the existence of the apple on fork x has been changed. i.e. if there is an apple on the fork, then Kaka pick it; otherwise a new apple has grown on the empty fork.or"Q x" which means an inquiry for the number of apples in the sub-tree above the fork x, including the apple (if exists) on the fork xNote the tree is full of apples at the beginning

 Input contains multiple test cases. Each test case contains one letter and two integers on a single line which describes the initial cell and state of the box. The letter will be either 'U' for stands Up, 'H' for lies down towards increasing y axis or 'V' for lies down towards incresing x axis. The two integers x, y (0 ≤ x, y ≤ 1000000000) is the only one cell that box stands on or the one closer to the origin from the two cells that box lies on.

 The input contains one or more positive integers below 8,192 which are not necessarily primes, one on a each line. End-of-file (EOF) indicates the end of input.

   The input consists of a number of datasets, each corresponding to a contestant's performance. There are no more than 20 datasets in the input.    A dataset begins with a line with an integer n, the number of judges participated in scoring the performance (3 ≤ n ≤ 100). Each of the n lines following it has an integral score s (0 ≤ s ≤ 1000) marked by a judge. No other characters except for digits to express these numbers are in the input. Judges' names are kept secret.    The end of the input is indicated by a line with a single zero in it.   

   The input is a sequence of a number of datasets. The end of the input is indicated by a line containing two zeros separated by a space. The number of datasets never exceeds 10.    Each dataset is formatted as follows.   N    M     r    record   1 ...    record   r   q    query   1 ...    query   q  　   　   The numbers N  and M  in the first line are the numbers of PCs and the students, respectively. r  is the number of records. q  is the number of queries. These four are integers satisfying the following.        1 ≤    N  ≤ 1000, 1 ≤    M  ≤ 10000, 2 ≤    r  ≤ 1000, 1 ≤    q  ≤ 50    　  Each record consists of four integers, delimited by a space, as follows.    t     n     m     s      s  is 0 or 1. If s  is 1, this line means that the student m  logged in to the PC n  at time t . If s  is 0, it means that the student m  logged out of the PC n  at time t . The time is expressed as elapsed minutes from 0:00 of the day. t , n  and m  satisfy the following.        540 ≤    t  ≤ 1260, 1 ≤    n  ≤    N , 1 ≤    m  ≤    M      You may assume the following about the records.     Records are stored in ascending order of time t.   No two records for the same PC has the same time t.   No PCs are being logged in before the time of the first record nor after that of the last record in the file.  Login and logout records for one PC appear alternatingly, and each of the login-logout record pairs is for the same student.    　　 Each query consists of three integers delimited by a space, as follows.    ts      te      m      It represents "Usage of the student m  between ts  and te ". ts , te  and m  satisfy the following.          540 ≤     ts  <     te  ≤ 1260, 1 ≤     m  ≤     M      

  Input consists of a series of test cases. The first line of input is t, 1 ≤ t ≤ 10, indicating the number of test cases in the file. The first line of each test case contains three integers. First is the integer n, 1 ≤ n ≤ 10000, indicating the number of bowling pins. The second integer, k, 1 ≤ k ≤ 500, giving the number of bowling balls available to each player. The third and final integer is w, 1 ≤ w ≤ 100, the width of the bowling ball (the number of adjacent pins it can knock over). The next n lines of each test case each contain a single integer giving the score of the pins, in order. The scores are in the range -10000...10000 inclusive. 

   The input is a sequence of datasets, each of which is of the following format.    n     w     d  p 1     s 1 ...    pn     sn ã€€    The first line starts with an integer n that is between 0 and 100 inclusive. It is the number of cuts to be performed. The following w and d in the same line are integers between 1 and 100 inclusive. They denote the width and depth of the cake, respectively. Assume in the sequel that the cake is placed so that w and d are the lengths in the east-west and north-south directions, respectively.    Each of the following n lines specifies a single cut, cutting one and only one piece into two. pi is an integer between 1 and i inclusive and is the identification number of the piece that is the target of the i-th cut. Note that, just before the i-th cut, there exist exactly i pieces. Each piece in this stage has a unique identification number that is one of 1, 2, ..., i and is defined as follows:     The earlier a piece was born, the smaller its identification number is.  Of the two pieces born at a time by the same cut, the piece with the smaller area (looking from above) has the smaller identification number. If their areas are the same, you may define as you like the order between them, since your choice in this case has no influence on the final answer.     Note that identification numbers are adjusted after each cut.    si is an integer between 1 and 1000 inclusive and specifies the starting point of the   i-th cut. From the northwest corner of the piece whose identification number is   pi, you can reach the starting point by traveling   si in the clockwise direction around the piece. You may assume that the starting point determined in this way cannot be any one of the four corners of the piece. The   i-th cut surface is orthogonal to the side face on which the starting point exists.     The end of the input is indicated by a line with three zeros.   

   The input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. Each dataset is formatted as follows:     w h  s(1,1) ...    s(1,w)  s(2,1) ...    s(2,w) ...     s(h,1) ...    s(h,w)   The integers w and h are the width and the height of the matrix data of the cliff. You may assume 2 ≤ w ≤ 30 and 5 ≤ h ≤ 60. Each of the following h lines consists of w characters delimited by a space. The character s(y, x) represents the state of the block at position (x, y) as follows:   'S': Jack can start cliff climbing from this block.  'T': Jack finishes climbing when he reaches this block.  'X': Jack cannot put his feet on this block.  '1' - '9' (= t): Jack has to spend t time units to put either of his feet on this block.   　 You can assume that it takes no time to put a foot on a block marked with 'S' or 'T'.   

   The input consists of multiple datasets. The number of datasets is no more than 100. The end of the input is represented by "0 0 0".   The format of each dataset is as follows:   L R N  X 1 Y 1  X 2 Y 2 ...    X N Y N   L is the length of the bar. The bar rotates 2π× R radians (if it is not stuck prematurely). N is the number of vertices which make the polygon.  The vertices of the polygon are arranged in a counter-clockwise order. You may assume that the polygon is simple, that is, its border never crosses or touches itself.  N, Xi and Yi are integer numbers; R and L are decimal fractions. Ranges of those values are as follows:  1.0 ≤   L ≤ 500.0,   1.0 ≤   R ≤ 10.0,   3 ≤   N ≤ 100,   -1000 ≤   X i ≤ 1000,   -1000 ≤   Y i ≤ 1000,    X 1 ≤ -1,   Y 1 = 0,    X 2 ≥ 1,   Y 2 = 0. 

   The input consists of n lines (1≤n≤100) describing n trees followed by a line only containing a single zero which represents the end of the input. Each tree includes at least 1 and at most 127 cells. Below is an example of a tree description.    ((x (x x)) x)   This description represents the tree shown in Figure F-1. More formally, the description of a tree is in either of the following two formats.     "   (" <description of a tree starting at the left child> <single space> <description of a tree starting at the right child> ")"   or      "   x"   The former is the description of a tree whose starting cell has two child cells, and the latter is the description of a tree whose starting cell has no child cell.  

 The first line of the input contains a single integer T which is the number of test cases, followed by T lines each containing the data for a test case having two numbers. The first number is the day of the year a contestant is born and the second one is the digit he/she has picked.

 The first line of the input contains a single integer T which is the number of test cases, followed by T lines each containing the input line for a test case.

 The first number in the input line, T is the number of test cases. The first line of each test case contains a single integer n (0 ≤ n ≤ 100) which is the number of chambers. Following the first line, there are n lines describing the chambers in order. Each line contains three integers d td tc where d is the time the watchman stays in that chamber in a normal checking, td is the time he stays there if we had made a trick in that chamber, and tc is the next chamber he must go to if the trick is made. The starting chamber is always 1, and the final chamber is always n.

 The first number in the input line, t is the number of test cases. Each test case is specified on three lines of input. The first line contains a single integer a (1 ≤ a ≤ 100000) which specifies the amount of water poured into two gheeves. The next two lines specify the two gheeves P and Q respectively, each of the form k x1 y1 x2 y2 ... xk yk where k is the number of points in the gheef (n for P and m for Q), and the xi yi sequence specify the coordinates of the points in the sequences.

 The first number in the input line, T is the number of test cases. Each test case is specified on a single line of input in the form n x1 y1 x2 y2 ... xn yn where n (3 ≤ n ≤ 100) is the number of vertices in the polygon, and the pair of integers xi yi sequence specify the vertices of the polygon sorted in order.

 The first number in the input line, T is the number of test cases. The first line of each test case contains two integers n and m (1 ≤ m ≤ 100, 1 ≤ n ≤ 3000) which are the number of lines and the number of policemen. The second line contains four integers xs ys xd yd which are the coordinates of the source and the destination points respectively. You may assume these two points lie on metro lines. Following the second line, there are n lines of the form x1 y1 x2 y2 describing the metro lines where (x1, y1) and (x2, y2) specify the endpoints of the metro line. After this, there are m lines each containing a pair of integers x y that specify the location of a policeman. All coordinates are arbitrary integer numbers.

 The first line of the input contains a single integer T which is the number of test cases, followed by T lines each containing the input expression for a test case. Ignore blanks in the input expression. Be sure that no ambiguity is in the input expressions (like a+++b). Similarly, ++ or -- operators do not appear both before and after one single variable (like ++a++). You may safely assume each variable appears only once in an expression.

 The input contains several test cases. Each test has several lines. The first line has two integers w (1 ≤ w ≤ 20) and h (1 ≤ h ≤ 20) which are the width and height of the cake. The second line contains a single integer n (0 ≤ n ≤ 50) which is the number of people who cut rectangles in the cake. After this, there are n lines each containing the integers x1, y1, x2, y2 which are the coordinates of two opposite corners of the cut. You may assume 0 ≤ x1, x2 ≤ w and 0 ≤ y1, y2 ≤ h. The last line of the input is a line containing two zeros.

  The input consists of multiple test cases. The first 22 lines of each test case contain the data for the 22 available players in this format:  number name role year1–year'1 year2–year'2 ... number is the player number (unique positive integer less than 100). name is a string of at most 20 letters. role is a single character among G, D, M, S, for goalkeeper, defender, midfielder, and striker respectively. Each yeari –year'i pair (yeari ≤ year'i) shows the player has been a member of the team between the specified years (inclusive). The years are in four-digit format. There is at least one and at most 20 such pairs, and the same year is not repeated more than once in the list. There is a 23rd line describing the desired formation, like 4-4-2 in that format. Note that there are only three numbers in the formation (so, 4-3-2-1 is not valid), none of them is zero, and their sum is always 10. The input is terminated by a line containing a single 0. 

 There are multiple test cases in the input. Each test case consists of two lines of the same length. The first line contains a wild number W, and the second line contains an integer number X. The length of input lines is between 1 and 10 characters. The last line of input contains a single character #.

 The input consists of multiple test cases. The first part of each test case is the sequence of streets the taxi travels. This comes in several lines, each describing one street in the form of street-name length min. street-name is a unique string of at most 20 letters and digits with no blank in it, and length and min are two positive integer numbers which are Li; (measured in kilometers, at most 200) and Mi (measured in minutes) respectively. Each street is visited once by the taxi. The first part of the test case is terminated by a line containing a single $ character. The second part of the test case contains a single line of the form source-street dest-street time. The first two items are the names of the source and the destination streets respectively. The third item is the time the passenger gets in which is in standard 24-hours format (HH:MM). There is a line containing a single # character at the end of each test case. You may assume that the source and the destination streets belong to the input sequence of streets and the destination street does not come before the source street. The last line of the input contains two dash characters as shown in the sample input.

 The input consists of multiple test cases. Each test case is started with a line containing an integer n (1 ≤ n ≤ 200), the number of BCM employees. The next line contains the name of the Big Boss only. Each of the following n-1 lines contains the name of an employee together with the name of his/her boss. All names are strings of at least one and at most 100 letters and are separated by blanks. The last line of each test case contains a single 0.

 There are multiple test cases in the input. The first line of each test case contains two numbers H and A which are the number of planets under the control of humans and aliens respectively (both between 1 and 250). The second line of the test case contains H non-negative integers n1 m1 n2 m2 â€¦ nH mH. The number ni is the initial number of Saber Tooth spaceships in the ith human planet and mi is the production rate of that planet. The third line contains A non-negative integers which specify the initial number of mammoths and the production rate of the alien planets in the same format as the second line. After the third line, there are H lines each containing A positive integers. The jth number on the ith line shows how many years it takes a spaceship to travel from the ith human planet to the jth alien planet. The last line of the input contains two zero numbers. Every number in the input except H and A is between 0 and 40000.

  There are multiple test cases in the input. Each test case has two parts: the initial state of the board and the script. The board comes in eight lines of eight characters. The letters r, d, t, a, c, p indicate black pieces, R, D, T, A, C, P indicate the white pieces and the period (dot) character indicates an empty square. The square from which Betty starts dancing is specified by one of the four characters <, >, ^, and v which also indicates her initial direction (left, right, up, and down respectively). Note that the input is not necessarily a valid chess game status. The script comes immediately after the board. It consists of several lines (between 0 and 1000). In each line, there is one instruction in one of the following formats (n is a non-negative integer number): move nturn leftturn rightturn back At the end of each test case, there is a line containing a single # character. The last line of the input contains two dash characters. 

  The input consists of multiple test cases. Each test case starts with a line containing two integers n (1 ≤ n ≤ 200) and m (0 ≤ m ≤ n) which are the number of countries participating in the voting process, and the number of votes Diamondland needs. The next n lines, each describing one country, are of the following form: CountryName DiamondCount DCName1 DCName1 ... CountryName, the name of the country, is a string of at least one and at most 100 letters and DiamondCount is a positive integer which is the number of diamonds needed to get the vote of that country and all of the countries that their names come in the list DCName1 DCName1 ... which means they are under direct domination of that country. Note that it is possible that some countries do not have any other country under domination. The end of the input is marked by a single line containing a single # character. 

 The first line of input will consist of the integer N. The second line of input will consist of the integer p. The next N lines will each contain p non-negative integers (where each integer is at most 10000), separated by one space character. Specifically, the p integers on each line are v1 v2 ... vp where v1 is the number of votes that party 1 will receive in this riding, v2 is the number of votes that party 2 will receive in this riding, etc. You may also assume that the total number of voters is less than 2 billion.

 The input consists of multiple test cases. Each test case contains the map of ZM2 viewed from the above. The map is a rectangular matrix of characters. Bob can move in four directions up, down, left, and right, but cannot move diagonally. He cannot enter a location shown by asterisk characters (*), even using all his dynamites! The character ($) shows the location of the treasure. A digit character (between 1 and 9) shows a stone block of hardness equal to the value of the digit. A hash sign (#) which can appear only on the boundary of the map indicates a gate without a dynamite pack. An uppercase letter on the boundary shows a gate with a pack of dynamites. The letter A shows there is one dynamite in the pack, B shows there are two dynamite in the pack and so on. All other characters on the boundary of the map are asterisks. Corridors are indicated by dots (.). There is a blank line after each test case. The width and the height of the map are at least 3 and at most 100 characters. The last line of the input contains two dash characters (--).

 The input consists of multiple test cases. The first line of each test case is n (1 ≤ n ≤ 50), the number of squares. The second line contains n integers between 1 to 30, where the ith number is the length of the sides of Si. The input is terminated by a line containing a zero number.

 The first line of input contains a single integer, n (1 ≤ n ≤ 10000), containing the number of trees that grow on the available land. The next n lines contain the integer coordinates of each tree given as two integers x and y separated by one space (where -1000 ≤ x, y ≤ 1000). The integer coordinates correlate exactly to distance in metres (e.g., the distance between coordinate (10; 11) and (11; 11) is one metre).

 The first line of input will contain a single integer n, 0 < n â‰¤ 100000, the number of snowflakes to follow. This will be followed by n lines, each describing a snowflake. Each snowflake will be described by a line containing six integers (each integer is at least 0 and less than 10000000), the lengths of the arms of the snow ake. The lengths of the arms will be given in order around the snowflake (either clockwise or counterclockwise), but they may begin with any of the six arms. For example, the same snowflake could be described as 1 2 3 4 5 6 or 4 3 2 1 6 5.

 Each line in the input consists of two Nuevo-Romano numbers separated by a `+' sign. The input is in mixed case. If the given Nuevo-Romano number is not a valid one, print ``INVALID" in the line.  No strings presumed to be a Nuevo-Romano number will exceed 100 in length.

 The input consists of multiple test cases. The first line of each test case will consist of an integer n representing the number of edges. Each test case will then contain n pairs of (x, y) (|x|, |y| ≤ 100) coordinates where x, y ∈ Z which represent edges dividing a rectangular region into n-gons. Each integer will be separated by a white space. Overlapping edges will not be specified in the input. The input will terminate for n = 0.

 The set of points in Q (3 ≤ Q ≤ 10000) are given in one line and the program should be able to read any number of lines where each line is one set of points in Q. Each point is of the format (x, y) where x, y ∈ R.

 The input consists of the strings x and y prefixed by their respective lengths, which are within 1000.

 The input will contain several test cases. The first line will indicate the number of test cases. Each test case begins with a number representing the number of walled cities. Cities are labeled alphabetically using the letters in the English alphabet, thus limiting their quantity. The subsequent lines contain the number of security personnel needed to protect the tunnel connecting each city to all other cities. A value of zero implies no security personnel needed since no tunnel exists. You are to output which tunnel should be protected and how many personnel are needed for each tunnel.

 The input will contain several test cases. The first line will indicate the number of test cases. Each test case starts with the number of terror groups moving about the 16 cities. Then it is followed by the coordinate values x and y of each group taken at the start of the hour followed by the next direction either forward (F) or left (L) that they will be initially moving. For the initial movement, we will assume that a forward is a decrease in the y coordinate and a left is a decrease in the x coordinate value.

 Each line is test case. It represents a rational number p/q where p and q are integers, p  â‰¥ 0 and q > 0.

 The input will only have capital letters (denoting the usernames) and carriage returns. Each line (thus each username) will not be longer than twenty characters, and there will not be more than 12 "judges" whose log-ins you will need to infiltrate. Strangely, no username uses any letter more than once.

 The input file consists of several test cases, each with a case number, the set of vertices in a graph, and the set of edges in the graph, as shown in the samples. Assume the vertices are single letters only.

 One line of input per case. The line represents a positive integer n.

 The input contains several test cases. Each test case starts with one line containing four integers n, m, r and c. (1 ≤ r ≤ n ≤ 100, 1 ≤ c ≤ m ≤ 100), The following n lines each describe one row of pixels of the painting you want to create. The ith line consists of m characters describing the desired pixel values of the ith row in the finished painting ('0' indicates white, '1' indicates black). The last test case is followed by a line containing four zeros.

 The input contains several test cases. Each test case consists of one line with three integers n, m and c. (8 ≤ n, m ≤ 40000), where n is the number of rows of the painting, and m is the number of columns of the painting. c is always 0 or 1, where 0 indicates that the bottom right corner of the painting is black, and 1 indicates that this corner is white. The last test case is followed by a line containing three zeros.

 The input consists of several test cases. Each test case consists of two numbers w and h (1 ≤ w ≤ h ≤ 100), which indicate the width and height of the sheet of paper. The last test case is followed by a line containing two zeros.

 The first line of the input file consists of two integers L and N (0 ≤ L ≤ 20, 1 ≤ N ≤ 100). The following L lines contain the description of the irregular words and their plural form. Each line consists of two words separated by a space character, where the first word is the singular, the second word the plural form of some irregular word. After the list of irregular words, the following N lines contain one word each, which you have to make plural. You may assume that each word consists of at most 20 lowercase letters from the English alphabet ('a' to 'z').

 The first line of the input contains a number T (T â‰¤ 200). The following T lines each contain one expression in postfix notation. Arithmetic operators are represented by uppercase letters, numbers are represented by lowercase letters. You may assume that the length of each expression is less than 10000 characters.

 The input consists of several test cases. Each test case starts with a line containing two integers n and q (1 ≤ n, q ≤ 100000). The next line contains n integers a1 , ... , an (-100000 ≤ ai ≤ 100000, for each i ∈ {1, ..., n}) separated by spaces. You can assume that for each i ∈ {1, ..., n-1}: ai ≤ ai+1. The following q lines contain one query each, consisting of two integers i and j (1 ≤ i ≤ j ≤ n), which indicate the boundary indices for the query. The last test case is followed by a line containing a single 0.

 This problem has no input.

 The input contains several test cases.The first line of each test case contains two integers c and n (1 ≤ c ≤ n ≤ 100000), the number of children and the number of neighbours, respectively. The next line contains n space separated integers a1 , ... , an (1 ≤ ai ≤ 100000 ), where ai represents the number of sweets the children get if they visit neighbour i. The last test case is followed by two zeros.

 The input contains a passage in English whose Flesch Reading Ease score is to be computed. Only letters of the English alphabet (both lowercase and uppercase), common punctuation marks (periods, question and exclamation marks, colons, semicolons as well as commas, quotation marks, hyphens and apostrophes), and spaces appear in the passage. The passage is of indefinite length and possibly occupies multiple lines. Additionally, it is guaranteed to be correct in punctuation.  

 The input consists of several data sets, each containing a positive integer N (2 ≤ N ≤ 1,000,000,000).

 There are multiple test cases for the input. Each test case consists of two lines, which contains n(1≤n≤10100) and k(1≤k≤104, k≤n) for each line. Both n and k will not contain leading zeros.

 The first line of the input file contains two integers N (1 ≤ N ≤ 5000) and C(0 ≤ C≤ 3000). The following C lines each contains a positive integer describe C query respectively. The i-th query ki is to ask GtDzx's share of whole cake in the ki-th case .

 The first line contains two integers M (1 ≤ M ≤ 100000), N (1 ≤ N ≤ 2000, N ≤ M). The following M + N lines each contains a integer coordinate. The first M coordinates are corresponding to the network interfaces, and the next N ones corresponding to the computers. All coordinates are arranged in [0, 1000000]. Distinct interfaces may have the same coordinate, so do the computers.

  The first line of input file contains the number of strings n. The following n lines describe each string:  The i+1-th line contains the length of the i-th string li, then a single space and a string of li small letters of English alphabet. You can assume that the total length of all strings will not exceed 2,000,000. Two strings in different line may be the same.  

 You will be given the dictionary, the sentence construction rules and the text. For each word you will know which part of speech it can stand for. The first line of the input file contains three numbers: n, m and k, where 1 ≤ n ≤      5 000   is the number of words in Velulu language, 1 ≤ m ≤ 10 is the number of possible sentence construction rules, and 1 ≤ k ≤ 10 is the number of different parts of speech. Each of the following n lines contains one word and a list of possible parts of speech it can stand for. There are not too many letters in Velulu language, so archaeologists have decided to encode them with small English letters. In each line, the word (non-empty, shorter than 20 letters) is given, followed by a space, then number ki (1 ≤ ki ≤ 10) of parts of speech possible for this word, then ki numbers aij each denoting a particular part of speech (1 ≤ aij ≤ k). All aij for any word are given in strictly increasing order. Words in the input file are given in arbitrary order (the dictionary is not perfect, and the exact order of letters is not yet known). Each word occurs exactly once. The following m lines list the sentence construction rules. Each rule is described by a number of words li (1 ≤ li ≤ 10) in this specific type of sentence, followed by li identifiers of parts of speech bij (1 ≤ bij ≤ k). No rule appears twice. The last line of the input file is for the text to be deciphered. The text is non-empty and consists of less than      1 000   letters.

 The input consists of several test cases. The first line of each consists an integer N ( 1 ≤ N ≤ 1,000,000). The second line consists of two pairs of integers describing the starting and finishing docks, where the first of each pair represents the district (0 means northern and 1 means southern) and the second represents the lane number. The third line contains N integers describing the time cost by walking between two adjacent docks on the northern bank from lane0 to laneN. The fourth line contains N + 1 integers describing the sailing time of each ferry lane. The last line contains N integers describing the time cost by walking between two adjacent docks on the southern bank from lane0 to laneN. N = 0 indicates the end of input.

 Input contains several test cases. Each test case begins with a line containing a number N, followed by a line containing N numbers.

 The first line of the input file contains three integers: n — the number of tokens initially placed in a circle (1 ≤ n ≤      10 000  ), k — the number of tokens counted each turn (1 ≤ k ≤      10 000  ), and m — the number of turns (1 ≤ m ≤ 109). The second line contains a string of n uppercase letters (‘A’ to ‘Z’) — the tokens initially placed in a circle, starting from the initial token.

 The first line of the input file contains four integer numbers: n, k, sh and sc — the number of towns in the country, the number of bridges to build (1 ≤ k < n ≤      10 000  ), the speed of the horse and the speed of the carriage in meters per second (1 ≤ sh, sc ≤      100 000  ). Each of the following n − 1 lines contains three integer numbers: bi, ei — the towns connected by the road, and li — the road length in meters (1 ≤ li ≤ 106). Towns are numbered from 1 to n, roads are numbered from 1 to n − 1.

 The first line of the input file contains n — the number of syrups (1 ≤ n ≤ 10), m — the number of cracks (0 ≤ m ≤ 10), and s — the area of the perpendicular section of the feeder in cm2 (1.0 ≤ s ≤ 100.0). The following n lines describe syrups. Each line contains two real numbers: vi — the initial volume of the syrup in cm3 and αi — the fluidity of the syrup. The syrups are described in order from the one at the bottom of the feeder to the one at the top (1.0 ≤ vi, αi ≤ 100.0). The following m lines describe cracks. Each crack is described with two real numbers: xi and di — the distance from the bottom of the feeder to the crack, and its size, respectively (1.0 ≤ xi ≤ 1000.0, 0.1 ≤ di ≤ 10.0). You can consider the size of cracks be small relative to the size of the feeder, so you can treat them as points. The last line of the input file contains a real number q (0.1 ≤ q ≤ 100.0).

 Input file is written in Nick’s notation. The first line of the input file contains an equation to solve. Total length of the equation does not exceed      1 000   characters. There is exactly one occurrence of each variable, except “Omega”, in the equation. The following lines contain definitions of variable values. Variable name lengths do not exceed ten characters each. There is always a variable called “Omega” that represents the universal set. Both the number of elements in the universal set and the value of each element does not exceed 500. The total length of all variable definitions does not exceed      100 000   characters.

 The first line of the input file contains two integer numbers n and r — the number of corners in George’s room (3 ≤ n ≤ 100) and the radius of the carpets (1 ≤ r ≤ 1000, both carpets have the same radius). The following n lines contain two integers xi and yi each — coordinates of the i-th corner (−1000 ≤ xi, yi ≤ 1000). Coordinates of all corners are different, and adjacent walls of the room are not collinear. The corners are listed in clockwise order.

 Let Peter’s ancestors, appeared in the beta-version of his family tree, have identifiers from 1 to n (let Peter’s identifier be 0). The first line of input file contains numbers n and d (2 ≤ n ≤ 100 000, 2 ≤ d ≤ n). The following line contains n numbers, the i-th number is an identifier of the child of the i-th alien.

 The input file contains five integer numbers A, a, B, b, P (0 < A, a, B, b, P â‰¤      1 000 000  , a < A and b < B), separated with spaces. Here, A and B are the outer radii of the rings, a and b are the inner radii of the corresponding rings, and P is the plate radius.

 The first line of the input file contains two integer numbers n and m — the number of beads and the number of rods, respectively (0 ≤ n ≤      1 000  , 2 ≤ m ≤      50 000  ). Let the beads be numbered from 1 to n. The following m lines contain two integer numbers each — the numbers of the beads connected by the corresponding rod. If the end of the rod is not connected to any bead, 0 is used. The construction may be not connected (i.e. it can consist of several pieces). There can be beads that have only one rod soldered into it. These beads need not be unsoldered before the corresponding end of the rod is soldered to another one. There can also be beads that have no rods soldered into it. Since Peter is only interested in rods, these beads need not be soldered/unsoldered.

 The first line of the input file contains three integer numbers: the width of the resulting text w (1 ≤ w ≤ 255), the minimal number of non-whitespace symbols in the resulting text l (1 ≤ l ≤      3 000  ), and the kennings list length n (1 ≤ n ≤ 380). The kenning list follows, a kenning per line. Each line contains the kenning referent followed by the kenning body. The text plan ends the file. Each kenning body contains at least two words. Kennings may be recursive, like in replacing “GNU” with “GNU is Not UNIX”. The kenning referents are case and grammatical form sensitive, so words “warrior”, “Warrior” and “warriors” are different and may be referred by different kennings. The input file is not longer than      3 000   bytes, and contains only English letters, underscores, spaces, line feeds and digits (in the first line only). There are no two kennings with equal referents. All words have w symbols at most. Adjacent words are separated by exactly one space or line feed. No line has leading or trailing spaces.

 The first line of the input is the number of test cases (C). The first line of a test case is the maximum number of characters allowed in a line (M). The second line of a test case is the number of words in the text (N). The following N lines are the length (in character) of each word in the text. It is guaranteed that no word will have more than M characters, N is at most 10000, and M is at most 100.

 The first line contains the number of test cases w, 1 ≤ w ≤ 10. Then the w test cases are listed one by one. In each test case, the first line is a single integer, representing the number of receiver transmitters for that test case. After that, the test case consists of some lines with two numbers each line: X Y Here two numbers are separated by a single blank, X is an integer, denoting the x-coordinate of the sensor, and Y is also an integer, denoting the y-coordinate of the same sensor. Each test case is ended by the following line: −1. Please note that the land is a rectangle with dimensions 100000 × 100000.

 The first line contains an integer t (1 ≤ t ≤ 5) indicating the number of teams that need your help. The data about these t teams follows. For each team, the first line contains the number of pitchers n, the number of opponent teams m, and the number of games in a season g. The next m lines contains the information about winning percentage of each pitcher against each team; the first line is p11, p12, …, p1n, and the ith line is pi1, pi2, …, pin, where each pij is a two-digit number (for example, 92 represents 0.92). The next g + 10 lines describe the schedule of the season, d1, d2, …, dg + 10.

 The first line contains the number of test cases w, 1 ≤ w ≤ 10. Then the w test cases are listed one by one. Each test case consists of 1 line with four numbers: Ys Ms Ye Me where two numbers are separated by a single blank, Ys is an integer, 0 < Ys < 10000, denoting the starting year in western style, Ms is an integer, 1 ≤ Ms ≤ 12, denoting the starting month, Ye is an integer, 0 < Ye < 10000, denoting the ending year in western style, Me is an integer, 1 ≤ Me ≤ 12, denoting the ending month. Note that you can be sure the month indicated by Ms, Ys is never after the month indicated by Me, Ye.

 There are two parts to the input. The first part of input gives the information of the bicycle roads on the island. The first line contains two integer n and r, n ≤ 100 and r ≤ 10, indicating that there are n best photo-shooting spots on the island and there are r routes to be planned. The next n lines (line 2 through line n + 1) contains n × n integers (n lines with n integers on each line), where the jth integer on line i denotes the distance from best photo-shooting spot i − 1 to best photo-shooting spot j; the distances are all between 0 and 10, where 0 indicates that there is no one-way road going from best photo-shooting spot i − 1 to spot j. The second part of input has r lines, denoting the r sightseeing routes to be planed. Each line lists the best photo-shooting stops to be included in that route. The integers on each line denote the recommended photo-shooting stops on that particular sightseeing route. The first integer on the line is the starting point of the route and the last integer is the last stop on the route. However, the stops in between can be visited in any order.

 The input data is a set of ciphers. Each cipher is written in a line. A line containing only the character 0 signals the end of a test data.

 The input consists of a number of trees (whose edges may be directed or undirected), say T1, T2, …, Tm, where m ≤ 20. Each tree has at most 200 vertices. We represent each tree as a rooted tree (just for convenience of presentation, the root is an arbitrarily chosen vertex). Information of each of the trees are contained in a number of lines. Each line starts with a vertex (which is a positive integer) followed by all its sons (which are also positive integers), then followed by a 0. Note that 0 is not a vertex and it indicates the end of that line. Now some of the edges are directed. The direction of an edge can be from father to son, and can also be from son to father. If the edge is from father to son, then we put a letter “d” after that son (meaning that it is a downward edge). If the edge is from son to father, then we put a letter “u” after that son (meaning that it is an upward edge). If the edge is undirected then we do not put any letter after the son. The first case of the sample input below is the example in Figure 1. Consecutive vertices (numbers or numbers with a letter after it) in a line are separated by a single space. A line containing a single 0 means the end of that tree. The next tree starts in the next line. Two consecutive lines of single 0 means the end of the input.

 The first line of input data begins with a number N the number of test cases. Each test case begins with two integers L and D, where L (L â‰¤ 200) is the number of lines and D (D > 0) is the threshold for testing if a line is selected. The data of lines listed one by one. Each line is represented by (ax + by + c = 0). The three floating numbers a, b, c, separated by space are given to represent the line.

 The input consists of a number of test cases. The format of each test case is as follows: The first line contains one positive integer, N, which represents the number of computers in the network. The next N − 1 lines contain all of the communication links and one line for each link. Each line is represented by two positive integers separated by a single space. Finally, a 0 at the (N + 1)th line indicates the end of the first test case. The next test case starts after the previous ending symbol 0. A −1 indicates the end of the whole inputs.

 The input consists of N + 1 lines. The first line contains values N and D separated by one or several spaces. The next lines contain values pi and vi, also separated by spaces. All input data (except N) are integers from 0 to 10000.

 The input contains the initial string.

 The input consists of K+1 lines: the first line contains the values M, N and K separated by one or several spaces; the next lines contain the labels of the cells where the queens are placed initially (one label per line).

 The input consists of four lines. The first line contains values of parameters a1, a2, a3, the others â€“ values of parameters b1, b2, b3; c1, c2, c3 and d1, d2, d3 correspondingly. All numbers are integers from 0 to 1000; each line contains at least one nonzero value. The values on each line are separated by colons (without spaces).

 The input consists of two lines: the first line contains the value of N and the second one contains the values of ti (separated by one or several spaces).

 The input contains the description of one test including:  a line with value M; M lines; every line contains coordinates of the center and the radius for one circle. These are real numbers separated by spaces.  

 The input contains a single line with n and m separated by one or several spaces; n, m are natural numbers from 1 to 1000000, n â‰¥ m.

 The first and second lines of the input contain the coordinates (latitude and longitude) of one point each. The designation of a latitude contains two integers (degrees and minutes) and a letter N or S. Similarly, the designation of a longitude contains two integers (degrees and minutes) and a letter E or W. Adjacent values on a line are separated by one or more spaces.

 The first line of the input contains the number of stones N in the configuration (1≤N≤1000). Next N lines describe sets Di (1≤i≤N). Each of these lines contains first the potency of the set Di and then the numbers of stones in the set separated by one or more spaces.

 Input data is in (4*K+1) lines, each of them consists of no more then 250 characters. The first line of the file contains the number of segments K (1≤K≤3000). Each segment is described by the coordinates X’, Y’, X’’, and Y’’ of its end-points. All coordinates are non-negatives integers and written in separate lines (so, the coordinates of one segment are in four sequential lines).

 The first line contains an integer N1 (3≤N1≤100) – the number of vertices of the first polygon. Each of the following N1 lines contains two real numbers X, Y separated by one space – the coordinates of one vertex. The rest of the file describes the second polygon in similar manner.

 The first line of the input contains the values of N and m. Each of the following m lines describes one road by specifying the values of ai, bi, ci, Pi, Ri (1 ≤ i ≤ m). Adjacent values on the same line are separated by one or more spaces. All values are integers, 1 ≤ m, N ≤ 10, 0 ≤ Pi , Ri ≤ 100, Pi ≤ Ri (1 ≤ i ≤ m).

 On the first line of the file is the number of slices K (1≤K≤100). Each of the following K lines contains the refraction index Ni of the corresponding slice. All the refraction indices are real numbers in the range from 0.000001 to 2000. The last line of the file contains the angle α between the ray and the normal in the first slice. The angle is a real number in the range from 0 to π/2 and is given in radians.

 The first line of the input contains the values N (1≤N≤10) and D. Each of the following N lines describes one quest, containing the values ai, bi, Si. The values D, ai, bi, Si (1≤i≤N) are all integers in the range from 0 to 1000 and ai<bi (1≤i≤N). Adjacent values on the same line are separated by one or more spaces.

 On the first and only line are the numbers A, B, and C. These are all integers in the range from 1 to 100 and Câ‰¤max(A,B).

  The input file contains several blocks of data. For each block, the first line contains one integer K, followed by two lines containing strings A and B, respectively. The input file is ended by K=0. 1 ≤ |A|, |B| ≤ 1051 ≤ K ≤ min{|A|, |B|}Characters of A and B are all Latin letters.  

  The first line contains an integer T, indicating the number of test cases. Then T blocks of test cases follow. For each case, the first line contains two integers N and M, where N is the number of coins on the ground and M indicates how many times they are going to draw the lines. The 2nd to (N+1)-th lines contain the co-ordinates of the coins and the last M lines consist of the M pairs integers (x, y) which means that the two splitting lines intersect at point (x, y). (N,M ≤ 50000, 0 ≤x,y ≤ 500000) 

  The first line of the input file contains two integers: N (1 ≤ N ≤ 100 000), M (1 ≤ M ≤ 100 000) — the number of the nodes and the number of the new channels. Following N-1 lines represent the channels in the original network of SN, each pair (a,b) denote that there is a channel between node a and node b. Following M lines represent the new channels in the network, each pair (a,b) denote that a new channel between node a and node b is added to the network of SN. 

 The input consists of a number of cases. The first line gives the number of cases to follow. Each case consists of a line of up to 1000 digits.

  The first line consists of one integer: M (number of queries). (2 ≤ M ≤ 106)The next M lines contain queries. Each query can be either addition or computation.  I a b c : add a quadratic function into the plane. You can assume the coefficient of the linear term is the double of the quadratic term's. Q x : compute the global minimum value of all the quadratic functions at x: min{fi(x)}. Before the query, there is at least a curve in the plane.  All numbers in the input file are integers, whose absolute values are no more than 10  6.   

 The first line of the input contains two integers N and M. N is the number of companies. M is the number of queries. (1 ≤ N, M ≤ 200000). The second line contains N integer numbers not exceeding 106 by their absolute values. The ith of them represents the turnover of the ith company this year. The following M lines contain query descriptions, each description consists of two numbers: L, R (0 ≤ L ≤ R ≤ N – 1) and represents the interval that Mr. Flower concerned.

 Input consists of several test cases followed by a line containing double 0. Each test case consists of two integers, N and M, respectively.

 The input consists of several test cases. Each contains a positive integer X (X â‰¤ 220).

 The first line contains two integers N and K (1 ≤ N ≤ 50, 0 ≤ K ≤ 10) described above. The following N lines represents the matrix. You can assume the numbers in the matrix are no more than 1000.

 There are multiple test cases.The first line contains the number of test cases.Each test case begins with an integer N( ≤ 10000), the number of inputs of Sheryl's circuit. It is guaranteed that N equals 2k, where k is an integer.The next line contains the expected signal which consists of 0 and 1 only. The length of the signal is no more than 10000.Next N - 1 numbers describe the types of the BAUs, 0 for ∨ and 1 for ∧. The describing order is from top level to bottom level. For the same level it is from left to right.

 Input file contains number of non-zero cells in the initial state N, followed by their indexes i1 i2 ... iN, and then integers S F L. All indexes are different. Constraints 1 ≤ S ≤ 109, −109 ≤ F ≤ 109, 1 ≤ L, N ≤ 2000, −1000 ≤ ik ≤ 1000 

 Input file contains number of clicks N followed by integer coordinates x1 y1 x2 y2…xN yN. Constraints 1 ≤ N ≤ 100, 0 ≤ xi yi ≤ 1000 

 Input file contains number of calls N followed by N triples qi ai xi, where qi is integer question number, ai = 1 if the answer was correct, 0 otherwise, xi = 1 if explanation was given, 0 otherwise. Constraints 1 ≤ N ≤ 10000, 1 ≤ qi ≤ 106. 

 Input file contains labyrinth size N followed by 2 × N2 numbers describing doors for each cell row by row. As there are no doors leading outside of labyrinth, values for eastern doors in the last column and southern doors in the last row are zero. Constraints 1 ≤ N ≤ 1000

 Input file contains integer N followed by N2 numbers ci, j — pixel values. Constraints 1 ≤ N ≤ 370, 0 ≤ ci, j ≤ 255.

 Input file contains number of trees N, length of log L, followed by integers i1 i2 ... iN — heights of each tree. Constraints 1 ≤ N ≤ 30000, 1 ≤ L, ik ≤ 30000 

 Input file contains format string followed by arguments, one per line. Constraints Number of arguments is not greater than 1000, length of each line is not greater than 50000 characters. 

 Input file contains number of points N followed by their integer coordinates x1 y1 x2 y2 ... xN yN. Next comes number of construction operations M followed by M quads of integers ai bi ci di, where k-th quad means that a new point is constructed as an intersection of lines containing pairs of points ai, bi and ci, di. Such a point is guaranteed to exist. Constructed point is assigned a number N + k and can be used in following operations. Constraints 4 ≤ N ≤ 100, 1 ≤ M ≤ 10, −106 ≤ xi, yi ≤ 106 

 Input file contains the following integer numbers:N — number of fulfilled orders in the delivery history w1 d1 q1 w2 d2 q2 ... wN dN qN — description of historical orders: week number, day of the week, and quantity of pizzas delivered. For each day there is no more than one record. It's considered that on those days that are not explicitly mentioned in the input file, but fall between the earliest and the latest mentioned days, zero-quantity orders were fulfilled. Constraints 1 ≤ qi ≤ 100, 1 ≤ wi ≤ 52, 1 ≤ di ≤ 7

 Input file contains integer N followed by N pairs of integers xi yi. Constraints -104 ≤ xi, yi ≤ 104, 1 ≤ N ≤ 2000. All points in the input are different. 

 Input file contains twelve floating point numbers: x1 y1 u1 v1 w1 s1 x2 y2 u2 v2 w2 s2, where (x, y) and (u, v) — coordinates of back-left and forward-left corners of the car, w — width of the car, s — speed of the car. Constraints 1 ≤ xi, yi, ui, vi, wi ≤ 106, 0 ≤ si ≤ 106. Input data is such that a crash certainly happens. Initially cars don't have common points. 

 First line of input file contains integers N T. Following N lines contain N characters each — the initial state of the terrarium. The input file guarantees unambiguous recognition of snakes — all snakes are continuous, every character of snake's body has exactly two neighbour characters belonging to the same snake, while head and tip of the tail have exactly one. Constraints 2 ≤ N ≤ 1000, 1 ≤ T ≤ 106.

 Input file contains integer N, followed by N4 integers — sudoku position. Empty cells are denoted by zeroes. Constraints 1 ≤ N ≤ 10.

 Input file contains integers P N, then N descriptions of the machines. The description of ith machine is represented as by 2 P + 1 integers Qi Si,1 Si,2...Si,P Di,1 Di,2...Di,P, where Qi specifies performance, Si,j — input specification for part j, Di,k — output specification for part k. Constraints 1 ≤ P ≤ 10, 1 ≤ N ≤ 50, 1 ≤ Qi ≤ 10000 

 The input is given by a number of lines giving the directions taken in a depth-first traversal of the trees. There is one line for each tree. For example, the tree above would give dudduduudu, meaning 0 down to 1, 1 up to 0, 0 down to 2, etc. The input is terminated by a line whose first character is #. You may assume that each tree has at least 2 and no more than 10000 nodes.

 The first line of input is an integer giving the number of cases to follow. For each case, the first line is of the form   OUTLETS OUTLET_INITIAL OUTLET_FINAL LENGTH1 LENGTH2   where    * OUTLETS is the number of outlets in the server room (2 <= OUTLETS <= 1000).   * OUTLET_INITIAL is the index (starting from 1) of the outlet the server is initially connected to.   * OUTLET_FINAL is the index (starting from 1) of the outlet the server is finally connected to.   * LENGTH1 and LENGTH2 are the positive lengths of the two power cords, with at most three digits of precision after the decimal point (0 < LENGTH1, LENGTH2 <= 30000).   These are followed by OUTLETS lines giving the integer coordinates of the wall outlets, one per line, with the k-th line giving the location of the k-th outlet. All coordinates are specified as two integers (x- and y-coordinates) separated by a space, with absolute values at most 30000. You may assume that all coordinates are distinct, and that the initial outlet and the final outlet are different.

 The first line of input is an integer specifying the number of cases to follow. For each case, you will be given 4 integers m, n, t, and c on a single line, separated by spaces. The playing area consists of m rows and n columns of tiles, each having side length t. The diameter of the coin used is c. You may assume that 1 <= m, n <= 5000, and 1 <= c < t <= 1000.

 The input consists of a number of cases. The first line of each case contains two positive integers M and N. M is the number of consecutive days for which the resort's manager has a reservation table, and N is the number of units (condominiums) in the resort. The units are labeled by upper case letters starting at 'A'. There are at most 100 days and at least 3 rooms in the reservation table. The days are numbered 1, 2, ..., M for simplicity.   The reservation table is given in the next M lines. Each line (row) of the table refers to a particular day (in the order 1, 2, 3, etc.), and each column of the table to a particular unit of the resort (in the order 'A', 'B', 'C', etc.). An entry of 'X' means that the corresponding unit is reserved for that day, while an 'O' means that the unit is available.   The reservation table is followed by one line of input, the reservation request, consisting of two integers: the arrival date and the departure date. The arrival date is in the range 1..M. The departure date is greater than the arrival date and less than or equal to M+1.   The end of input is indicated by M = N = 0.

 The input consists of a number of games. The first line of the input file specifies the number of games to follow. Each game contains the batting order of the visiting team followed by the batting order of the home team. The batting order of each team starts with a line specifying the team name (at most 15 upper and lower case letters). The next 9 lines specify the 9 players, listed in the order they bat. Each of these lines contains the player's name (at most 15 upper and lower case characters), a space, then a floating-point number (to 3 decimal places) specifying his hit percentage, a space, and finally his sacrifice percentage (to 3 decimal places). You may assume that all hit percentages are between .200 and .400, and all sacrifice percentages are between .300 and .750. You may assume that no game will last more than 200 innings.

 The input consists of a number of cases. Each case is specified on one line. The first number specifies the number of pieces (N). Each of the following N numbers is a positive integer specifying the length of each piece. There are at most 13 pieces, and the length of each piece is at most 25. The end of input is specified by a case in which N = 0.

 The first line of the input file contains a number N (1≤N ≤ 300), which stands for the total skills Anub'arak can use. The following N lines contain two integers each. The first integer Di (10 ≤ Di ≤ 100,000,000, which is a multiple of 10) describes the basic damage of the ith skill, and the second integer Ei (0 ≤ Ei ≤10) describe the enhancing level of the ith skill.

 The input consists of a number of cases. Each case is specified on a line, starting with an integer N (1 <= N <= 256) indicating the number of samples. The next N integers are the transformed samples. The end of input is indicated by a case in which N = 0.

 The first line of the input contains a positive integer giving the number of cases to follow. For each case, there are two lines of input each containing a non-negative integer represented in set notation. Each line contains only the characters '{', '}', and ','. The sum of the two given integers will be at most 15.

 The input contains a sequence of several scenarios, the sequence is terminated by a line containing negative number.   Each scenario begins with a non-negative integer L, the number of bus routes that operate in the city (L ≤ 1000). Every route is then described by two lines. The first line contains names of stops that the bus runs through. Between each consecutive stops, there is a non-negative integer specifying the number of minutes required to travel between these stops with the given bus. The last stop is followed by a negative number.   The second line of each bus route contains non-negative integers separated with spaces. The first integer H gives the number of buses that depart the initial stop in every hour (H ≤ 60). The remaining H integers are always distinct and sorted ascendingly, they list the minutes of departure (between 0 and 59). The timetable repeats every hour. For example, if the second line says “2 00 30”, the buses leave the initial stop at 12:00, 12:30, 13:00, 13:30, 14:00, etc.   After the description of routes, there are two lines that specify the initial position of students. Each of them will contain time in a standard 24-hour format (one or two digits for hours, colon, and two digits for minutes) and a stop name.   All numbers, times, and stop names will be separated with a single space. Stop names are case-sensitive and may be composed only from lower-case and upper-case letters, their length will not exceed 30 characters. The total number of stops will be at most 1000, the number of stops on a single route will not exceed 100. The time between any two consecutive stops will be at most one hour. The routes are considered one-way, if they operate in both directions, they will be given as two separate routes. A route may run through the same stop several times.

 The input contains a sequence of several reorganizations, the last one followed by a line with zero.   Each reorganization consists of three lines: the first line contains a positive integer N — the number of days in month that are considered, 1 ≤ N ≤ 30. The second line describes the old schedule and the third line the new schedule, each of them contains N meeting identifiers, separated with spaces. Some meetings may appear more than once.

 The input will consist from commands, each written on a separate line. Possible commands are assignments, “RESET”, and “QUIT”. An assignment command starts with a single digit representing one of ten registers that the calculator has. The register number is followed by an equal sign (“=”) and an expression. The expression will consist only from valid roman numbers, register names (digits), plus (“+”) and minus (“-”) signs. You may assume that the expression will always be valid and no longer than 10000 characters.

 Input contains several pictures. Each picture describes at most 26 shapes, each specified on a separate line. The line begins with an uppercase letter that uniquely identifies the shape inside the corresponding picture. Then there is a kind of the shape and two or more points, everything separated by at least one space. Possible shape kinds are: • square: Followed by two distinct points giving the opposite corners of the square.• rectangle: Three points are given, there will always be a right angle between the lines connecting the first point with the second and the second with the third.• line: Specifies a line segment, two distinct end points are given.• triangle: Three points are given, they are guaranteed not to be co-linear.• polygon: Followed by an integer number N (3 ≤ N ≤ 20) and N points specifying vertices of the polygon in either clockwise or anti-clockwise order. The polygon will never intersect itself and its sides will have non-zero length. All points are always given as two integer coordinates X and Y separated with a comma and enclosed in parentheses. You may assume that |X|, |Y | ≤ 10000. The picture description is terminated by a line containing a single dash (“-”). After the last picture, there is a line with one dot (“.”).

 The input contains several tasks. Each task begins with a line containing a positive integer N, the number of trademarks (2 ≤ N ≤ 4000). The number is followed by N lines, each containing one trademark. Trademarks will be composed only from lowercase letters, the length of each trademark will be at least 1 and at most 200 characters. After the last trademark, the next task begins. The last task is followed by a line containing zero.

 Input contains several tasks to be solved. Each task begins with a line containing one nonnegative number: the amount to be paid. Then there is a list of tenders possessed by the customer (the one who pays). Each line in the list contains the tender nominal value (nonnegative number), one space, number of tenders of that value (non-negative integer), and thelowercase letter “x”. The list is terminated by a line containing number “-1”. After the first list, there is a list of tenders possessed by the shopkeeper (the one who gets paid). The second list has the exactly same format as the first one. Then the next task begins. The last task is followed by one more line containing “-1”. You may assume that each list will contain at most 100 lines, and nobody will have more than 10 000 units and/or 500 tenders. Nominal values can be arbitrary, they do not need to follow any existing scheme valid in known countries. All numbers that allow non-integer values will be given either as integers or as decimal numbers with one or two digits after the decimal point.

 The input consists of several scenarios, each of them described on two lines. End of the input is signalized by two zeros. The first line of each scenario contains two positive integers N and M, separated with a space, N ≤ 200000, M ≤ 200000. N is the number of carriages, M is the number of tracks. The second line will contain N non-negative integers representing carriages and their intended order on the other end of the station. Some carriages may have identical numbers, in such a case, their mutual order is not significant.

 The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:  One line describing the colour sequence S. This line contains a string of m (with 1 ≤ m ≤ 100) characters from the set {'A', 'B', …, 'Z'}, denoting the colours. Different colours correspond to different characters. For example: "BGBG" denotes the sequence blue, green, blue, green. Two lines, corresponding to the row of cards chosen from the pile. Each of these lines contains a string of k (1 ≤ k ≤ 100) characters from the set {'A', 'B', …, 'Z', '*'}. The character '*' denotes a joker, which can play the role of any of the possible colours.The string in the first line corresponds to the row of colours on the visible side of the cards. The string in the second line corresponds to the row of colours on the hidden side of the cards.So for the ith card in the row, the first line gives the colour of the side turned upwards and the second line shows the colour of the side face down. Obviously the strings on both lines have the same length. Furthermore, a '*' in one line (denoting a joker) always corresponds to a '*' in the other line at the corresponding position. 

 The input contains description of several tournaments. Each tournament begins with a line containing single positive integer N: the number of participating teams, N ≤ 80. Then there are N lines, each containing a unique name of one team. The name is case-sensitive and may be composed only from letters, digits, dots (“.”), and dashes (“-”). No name will be longer than 100 characters. After the team names, there will be a line with a single non-negative integer M: the number of games that have already been played. Each of the next M lines describes one game and contains the host team name, space, dash, space, guest team name, space, and the game result. The result will always appear as a single digit (0-9), colon (“:”), and another single digit (0-9). The digits specify the number of goals scored by the host and guest teams. Then, the next tournament is described. The last tournament is followed by a zero on a separate line. No output should be produced for this zero. You may assume that all team names have been listed among the N teams. All games will have distinct opponent pairs. This also means that any two teams may play at most two games with each other — in such a case, each of the two teams will be a host in one game and a guest in the other.

 Input Specification The input consists of several labyrinth descriptions. Each description begins with a line containing a single integer number d (2 ≤ d ≤ 20) — the number of dimensions. On the second line of each description, there are d integer numbers n1, n2, . . ., nd separated by spaces. These numbers give the size of the labyrinth in every dimension, measured in unit hypercubes (∀i : 2 ≤ ni). You may assume that the total number of hypercubes in any labyrinth will not exceed 220 = 1048576. Then a labyrinth map follows, the description is defined recursively: Two-dimensional labyrinth (of the size n1 × n2) is described by n2 lines containing n1 characters each. Every character describes a single hypercube (”square” in the case of 2 dimensions) and is either “#” (rock), “.” (free space), or one of uppercase letters “T” (Theseus’ position), “M” (Minotaur), and ’S’ (sword). Each of these three objects will appear exactly once in the whole labyrinth. The hypercubescontaining the letters are considered ”empty” otherwise, i.e., Theseus can walk (and must walk) through them. For better clarity of the input, each two-dimensional map is followed by one empty line. For d > 2, any d-dimensional labyrinth is a sequence of nd ”layers”, each layer being a description of a (d − 1)-dimensional labyrinth. The last labyrinth description is followed by a line containing zero. This line terminates the input and no output should be produced for it.

 The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:  A description of the board, consisting of 8 lines, corresponding to the 8 lines of the board, from top to bottom. Each line contains a string of 8 characters from {'F', 'D', '.'}. Here, 'F' denotes a forbidden field, 'D' denotes a fixed dangerous field and '.' (a period) denotes an open field.Of course, an open field may become dangerous due to the position of the Black pawn. One line with two integers xK and yK (1 ≤ xK, yK ≤ 8), separated by a single space, specifying the initial position of the White king. Here, xK denotes the column (counted from the left) and yK denotes the row (counted from below).This initial position is neither a forbidden field, nor a fixed dangerous field. One line with two integers xP and yP (1 ≤ xP, yP ≤ 8), separated by a single space, specifying the initial position of the Black pawn. Here, xP denotes the column (counted from the left) and yP denotes the row (counted from below).This initial position is not a forbidden field, and is different from the initial position of the White king. 

 The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:  One line, containing four integers a, b, c, d (with 1 < a, b, c, d â‰¤ 10, 000 and gcd(a, b, c, d) = 1), separated by single spaces. 

 The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:  One line with one integer N1 (2 ≤ N1 ≤ 25): the number of points describing the left wall of the mineshaft. N1 lines with the coordinates of the points describing the left wall of the mineshaft, from the bottom to the top. The ith line contains two integers xi and yi (−1,000 ≤ xi ≤ 1,000 and 0 ≤ yi ≤ 1,000) separated by a single space: the x- and y-coordinate of the point, respectively.The y-coordinates are monotonically increasing: y1 < y2 < … < yN1. One line with one integer N2 (2 ≤ N2 ≤ 25): the number of points describing the right wall of the mineshaft. N2 lines with the coordinates of the points describing the right wall of the mineshaft, from the bottom to the top. The ith line contains two integers x′i and y′i (−1,000 ≤ x′i ≤ 1,000 and 0 ≤ y′i ≤ 1,000) separated by a single space: the x- and y-coordinate of the point, respectively.The y-coordinates are monotonically increasing: y′1 < y′2 < … < y′N2.  We always have x1 < x′1, y1 = y′1, xN1 < x′N2, and yN1 = y′N2. The walls described by the sequences of points do not cross or even touch each other.

 The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:  One line with one integer m with 1 ≤ m ≤ 100: the number of projects. One line with one integer n with 0 ≤ n ≤ 100: the maximal number of available employees. One line with one integer salary with 0 ≤ salary ≤ 1,000: the salary of one employee. Remember that the salary is given in euros. m lines, each line corresponding to a project i, containing n integers pi1, pi2, …, pin (the percentages, with 0 ≤ pi1, pi2, …, pin ≤ 100), followed by two integers corresponding to the reward and the punishment for project i. All values are separated by single spaces. Both reward and punishment are given in euros and are between 0 and 100,000 (boundaries included). 

 The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:  One line with one integer n with 1 ≤ n ≤ 15: the number of books on a certain shelf. One line with the n integers 1, 2, …, n in some order, separated by single spaces: the unique identification codes of the n books in their current order on the shelf. 

 The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:  One line with the word W, a string over {'A', 'B', 'C', …, 'Z'}, with 1 ≤ |W| ≤ 10,000 (here |W| denotes the length of the string W). One line with the text T, a string over {'A', 'B', 'C', …, 'Z'}, with |W| ≤ |T| ≤ 1,000,000. 

 The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:  One line with one integer n with 0 ≤ n ≤ 100: the number of line segments. One line with two integers xL and yL, the coordinates of the light source, separated by a single space. The coordinates satisfy −100 ≤ xL ≤ 100 and 1 ≤ yL ≤ 1,000. n lines, each containing four integers xi, yi, ui and vi, separated by single spaces, that specify x- and y-coordinates of the two endpoints (xi, yi) and (ui, vi) of the ith line segment, where −100 ≤ xi, ui ≤ 100 and 0 < yi, vi < yL, for 1 ≤ i ≤ n. 

 The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:  One line with two integers N and M, separated by a single space, with 2 ≤ N ≤ 1,000 and 1 ≤ M ≤ 10, 000: the number of cities and the number of roads in the road map. M lines, each with three integers A, B and L, separated by single spaces, with 1 ≤ A, B ≤ N, A ≠ B and 1 ≤ L ≤ 1,000, describing a road from city A to city B with length L.The roads are unidirectional. Hence, if there is a road from A to B, then there is not necessarily also a road from B to A. There may be different roads from a city A to a city B. One line with two integers S and F, separated by a single space, with 1 ≤ S, F ≤ N and S ≠ F: the starting city and the final city of the route.There will be at least one route from S to F. 

 Your program will be tested on one or more test cases. Each test case is described on a single input line listing the grades of the judges. The end of the test cases is identified with a dummy test case with all the grades being zero.

 The first line contains one integer N. N â‰¤ 100000.Each of the next N lines contains a decimal fraction Ai. The total number of digits of the N decimal fractions doesn't exceed 400000. There is always a radix point, so zero is "0." instead of "0".

 The first line contains five integers, N, x, y, H1, H2. 1 ≤ N ≤ 105, 1 ≤ x,y ≤ 104, 1 ≤ H1,H2 ≤ 109. Then follow N lines, the ith line contains one integer Ai-1. 1 ≤ Ai-1 ≤ 104.

 There are multiple test cases. Each case contains one line consisting of 4 integers a, b, c, d (0 ≤ a,b,c,d ≤ 109).

 There are four integers, N, M, C, Q, in the first line. (1 ≤ N, M, C ≤ 100, 1 ≤ Q ≤ 10000)The next N lines each contains M integers between 1 and C which describe the color of cells.The following Q lines each has either the form "C i j k" indicating to change the color of cell (i, j) into k, or the form "Q c" indicating to query the total amount of crosses of color c. (1 ≤ i ≤ N, 1 ≤ j ≤ M, 1 ≤ k, c ≤ C)

 The first line contains two numbers N and Q. 1 ≤ N,Q ≤ 100000.The second line contains N numbers, the initial values of A1, A2, ... , AN. -1000000000 ≤ Ai ≤ 1000000000.Each of the next Q lines represents an operation."C a b c" means adding c to each of Aa, Aa+1, ... , Ab. -10000 ≤ c ≤ 10000."Q a b" means querying the sum of Aa, Aa+1, ... , Ab.

 There are two integers in the first line of input data, N and M (1 ≤ N ≤ 20000, 1 ≤ M ≤ 200000) .The next N lines, each contains two integer, Ai and Bi.In the following M lines, each contains three integers: a, b, w. The meaning is that if module a and module b don't execute on the same core, you should pay extra w dollars for the data-exchange between them.

 The first line contains N and M (both not exceeding 50,000). M is the number we put Xiaoniao in the place.The following N lines describe the walls. Each line consists 4 integers x1, y1, x2, y2, meaning a wall from (x1,y1) to (x2,y2). The wall is always parallel to the coordinate axes.The next M lines describe where we put Xiaoniao. Each line consists 2 integers x and y. This means we put Xiaoniao at the point (x,y).

 The input consists of several test cases.The first line of each test case contains an integer N ( N â‰¤ 100).The second line of each test case contains N integers, an-1, ..., a0, these numbers represents the polynomial: xn + an-1 Ã— xn-1 ... + a0. ( All ai fits in 32-bit signed integer)

 The input consists of multiple test cases. Each test case contains only one integer n (3 ≤ n ≤ 104). Process util EOF is met.

 The input consists of a single test case. The first input line contains the number n (1 ≤ n ≤ 200) alone. The next n lines each contain n nonnegative numbers, giving the elements of an n-by-n square matrix A in row-major order. On the last line, there are n nonnegative numbers which are the components of an n-dimensional column vector b in increasing order of their indices. The sum of elements in every column of A is strictly less than 1, and the components of b sum to exactly 1. The duple <A, b> constitutes the description of an SFSA.

 The input consists of multiple lines. The first line contains only an integer N (1000 ≤ N ≤ 5000). Then come N lines, each containing three real numbers xi, yi, zi, the coordinate of a sample point in the Cartesian system. The points are sampled from the interior of an ellipsoid the lengths of whose principal axes are a, b, c (0 < a, b, c < 1) such that a ≥ 1.2b, b ≥ 1.2c. The ellipsoid may be rotated and translated, and its center lies inside the unit sphere centered at the origin.

 The input contains multiple test cases each occupying one line. Each test case consists of four integers a, b, c, d (0 < a, b, c, d ≤ 231 − 1) indicating that the dimension of an envelop is a × b and that of a transcript is c × d. Process until EOF is met.

 The input contains only a string of ‘R’s, ‘G’s and ‘B’s representing the balls in the chain from left to right.

 The input in is the following format with 1 ≤ m, n ≤ 100.     m n      a11 a12 … a1n b1   a21 a22 … a2n b2   … … … … …   am1 am2 … amn bm     All numbers except m and n are real numbers.

 The input consists of a single test case. The first line contains two integers m and n (1 ≤ m ≤ 4000, 1 ≤ n ≤ 200). The next m lines each contain a pair of integers xi and yi (1 ≤ xi ≤ yi ≤ n). The first of the remaining two lines contains n integers bi (0 ≤ bi ≤ 2000); the second contains m integers ci (0 ≤ ci ≤      2 000 000  ). The input is interpreted as follows. The dean office has listed n points to improve, from which arise m sources of possible recognizable affectation. Since the points are appropriately grouped into categories, these sources of troubles can be describe economically: for each i = 1, 2, …, m, if the score increases from points numbered xi through yi (inclusive) sum to over ci, some inspector will believe what he/she has seen is deliberate and unnatural. The total extra score is calculated as the weighted sum of score increase in each point with the bi’s as the weights.

 The input consists of a single test case. The first line contains an integer n (3 ≤ n ≤ 100), indicating that he polygon has n vertices. Each of the next n lines contains a pair of real numbers xi, yi, the coordinates of the i-th vertex. The vertices are listed in counterclockwise order. Any three of them are not collinear.

 The first line of input will contain a single integer T – the number of test cases. Next T pairs of lines will describe tests in a following format. The first line of each test will contain an integer N – the amount of different M&M colors in a box. Next line will contain N integers Ai, separated by spaces – amount of M&Ms of i-th color. Constraints:1 <= T <= 474,1 <= N <= 47,1 <= Ai <= 4747

 Each line of the input contains one of the possible requests; only the last line contains the stop-request (code 0). You may assume that when there is a request to include a new client in the list (code 1), there is no other request in the list of the same client or with the same priority. An identifier K is always less than 106, and a priority P is less than 107. The client may arrive for being served multiple times, and each time may obtain a different priority.

 Input file consists from multiple data sets separated by one or more empty lines. First line of each set contains definition of digit ordering for some hypothetical numerical system. All ASCII printable characters (codes greater than 0x20 (space)) are allowed to appear as digits, and they are sorted according to increased decimal value (starting from zero). Each line of the input data set (starting from second one) is one number coded with previously defined digits. Such numbers can have multiple decade interpretations (taking different base for hypothetical system) and your task is to find sum of all possible interpretations. Explanation: If we define digit ordering as “0123456789” possible bases are 2..10 but number “6201” can be decoded only in systems with base 7..10. Input lines can contain white space characters on both ends which should be ignored.

 The input consists of multiple datasets each of which is formatted as follows. n k m The last dataset is followed by a line containing three zeros. Numbers in a line are separated by a single space. A dataset satisfies the following conditions. 2 ≤ n ≤ 10000, 1 ≤ k ≤ 10000, 1 ≤ m ≤ n The number of datasets is less than 100.

 Write a program that reads sets of data from an input text file. Each data set corresponds to a set of mortgage applications and starts with two integers: 0≤N≤10000 that shows the number of applications in the set, and 0≤L≤100 which shows the maximum number of loans the Bank can pay at any given time. Follow N pairs of integers pi di, i=1..N, that specify the profit 0≤pi≤10000 and the deadline 0≤di≤10000 of the application i. Input data are separated by white spaces, are correct, and terminate with an end of file.

 Input file consists from multiple data sets separated by one or more empty lines. Each data set represents a sequence of 32-bit (positive) integers (references) which are stored in compressed way. Each line of input set consists from three single space separated 32-bit (positive) integers X Y Z and they represent following sequence of references: X, X+Z, X+2*Z, X+3*Z, …, X+K*Z, …(while (X+K*Z)<=Y). Your task is to data-mine input data and for each set determine weather data were corrupted, which reference is occurring odd number of times, and count that reference.

 The program input is from a text file. Each data set in the file stands for a particular set of a highway and the positions of the villages. The data set starts with the length L (fits an integer) of the highway. Follows the distance D (fits an integer), the number N of villages, and for each village the location (x,y). The program prints the minimum number of exits. White spaces can occur freely in the input. The input data are correct and terminate with an end of file.

 The program input is from a text file. Each data set in the file stands for a particular set of costs. A data set starts with the cost c for getting a new computer. Follows the number n of years, and the maintenance costs m(y,z), y=1..n, z=y..n. The program prints the minimum cost of having a computer throughout the n year period. White spaces can occur freely in the input. The input data are correct and terminate with an end of file.

 The input consists of at most 10 datasets, each of which represents a floor map of a house. The format of a dataset is as follows.     w h n    c11 c12 ⋯ c1w   c21 c22 ⋯ c2w   ⋮ ⋮ ⋱ ⋮   ch1 ch2 ⋯ chw     w, h and n in the first line are integers, separated by a space. w and h are the floor width and height of the house, respectively. n is the number of ghosts. They satisfy the following constraints. 4 ≤ w ≤ 16, 4 ≤ h ≤ 16, 1 ≤ n ≤ 3 Subsequent h lines of w characters are the floor map. Each of cij is either:  a ‘#’ representing a wall cell, a lowercase letter representing a corridor cell which is the initial position of a ghost, an uppercase letter representing a corridor cell which is the position where the ghost corresponding to its lowercase letter is supposed to be, or a space representing a corridor cell that is none of the above.  In each map, each of the first n letters from a and the first n letters from A appears once and only once. Outermost cells of a map are walls; i.e. all characters of the first and last lines are sharps; and the first and last characters on each line are also sharps. All corridor cells in a map are connected; i.e. given a corridor cell, you can reach any other corridor cell by following corridor cells in the 4-neighborhoods. Similarly, all wall cells are connected. Any 2 × 2 area on any map has at least one sharp. You can assume that every map has a sequence of moves of ghosts that restores all ghosts to the positions where they are supposed to be. The last dataset is followed by a line containing three zeros separated by a space.

 The first line gives you the number of tests. The first line of each test case contains integer n (0 < n < 27). Next line describes n male and n female names. Male name is a lowercase letter, female name is an upper-case letter. Then go n lines, that describe preferable lists for males. Next n lines describe preferable lists for females.

 The input contains multiple test cases. Each test case begins with a line containing three positive integers n, x and k (n ≤ 1000, k ≥ 2), where x is the capacity of the knapsack, and k means each division divides an item or a divided part into k identical smaller parts. Then comes a line containing n positive integers, the sizes of different kinds of items.

 The input contains multiple test cases. Each test case begins with a line containing five positive integers n, r, c, x and y (n ≤ 10; 3 ≤ r, c ≤ 10; x ≤ r; y ≤ c). Lambert specifies the cell in the x-th row and y-th column as the ending cell. Then come n lines each containing a pair of positive integers xi and yi (xi ≤ r; yi ≤ c), indicating a frog in the cell in the xi-row and yi-column. The input ends once EOF is met.

 The input contains multiple test cases. Each test case begins with a line containing a positive integer n (1 ≤ n ≤      1 000 000  ), the number of stars shown in each image. Then comes 2n lines each containing a pair of real numbers (x, y), the position of a star in an image. The first n lines describe the first image; the rest describe the second image. The input ends once EOF is met.

  The first line of input contains four integers, L, R, N, T (0 ≤ L, R, T ≤ 1000000), (0 ≤ N ≤ 100). The following N lines describe the soldiers. Each line consists of two integers, x (0 ≤ x ≤ L) and d. x indicates the initial position of the soldier and d indicates the direction of soldier's movement. The soldier moves to the end with x = L when d = 1 and to the end with x = 0 when d = -1. 

 The input contains multiple test cases. Each test case begins with a line containing n (1 ≤ n ≤ 500). Then comes a line containing the sizes of different kinds of items, each not exceeding 5000. The input ends once EOF is met.

 The input describes one puzzle which begins with two integer n, m(1 ≤ n, m ≤16). Then n lines follow. Each contains m integers. The j-th number on i-th row corresponds to the grid(i,j). The absolute value of each number is less than 1000.

 The input contains multiple test cases. Each test case begins with m and n (1 ≤ m, n ≤ 2000) on line. Then come the elements of a (0,1)-matrix in row-major order on m lines each with n numbers. The input ends once EOF is met.

 The input contains multiple test cases. Each test case consists of three integers x, y, z separated by single spaces on a separate line. There are neither leading or trailing blanks nor empty lines. The input ends once EOF is met.

 The input is divided into two parts by a separator line containing a single #. The first part contains a list of hyphenation patterns and the exception list. The largest possible number that appears in the patterns is six. Words in the exception list are preceded by single @’s, with -’s indicating all possible hyphenating points. All letters in the first part are lowercase. The second part contains the words to be hyphenated. Words consist of only lowercase or uppercase letters. Matching between patterns and words is case-insensitive.

 On the first line one positive number: the number of testcases, at most 100. After that per testcase:  One line with two integers: 1 ≤ n ≤          1 000    , the number of available components and 1 ≤ b ≤          1 000 000 000    , your budget. n lines in the following format: “type name price quality”, where type is a string with the type of the component, name is a string with the unique name of the component, price is an integer (0 ≤ price ≤          1 000 000    ) which represents the price of the component and quality is an integer (0 ≤ quality ≤          1 000 000 000    ) which represents the quality of the component (higher is better). The strings contain only letters, digits and underscores and have a maximal length of 20 characters. 

 On the first line one positive number: the number of testcases, at most 100. After that per testcase:  One line with the integer N (1 ≤ N ≤ 100) and a floating-point number D (0 ≤ D ≤          100 000    ), denoting the number of ice pieces and the maximum distance a penguin can jump. N lines, each line containing xi, yi, ni and mi, denoting for each ice piece its X and Y coordinate, the number of penguins on it and the maximum number of times a penguin can jump off this piece before it disappears (         −10 000     ≤ xi, yi ≤          10 000    , 0 ≤ ni ≤ 10, 1 ≤ mi ≤ 200). 

 On the first line one positive number: the number of testcases, at most 100. After that per testcase:  A single positive integer n (n â‰¤ 1012) on a single line: the required capacity (number of containers) for the parking lot. 

 On the first line one positive number: the number of testcases, at most 100. After that per testcase:  One line with two integers l and w with 1 ≤ l, w ≤ 8: the size of the dorm. 

 On the first line one positive number: the number of testcases, at most 100. After that per testcase:  One line with three positive numbers N, X, Y. 1 ≤ N ≤          10 000     is the number of enemy bases and 1 ≤ X, Y ≤          1 000     the size of the map: coordinates x, y are on the map if 0 ≤ x < X, 0 ≤ y < Y. One line containing two pairs of coordinates xi, yi and xr, yr: the initial position of the commandos and the rendezvous point. N lines each containing one pair of coordinates x, y of an enemy base.  All pairs of coordinates are on the map and different from each other.

 On the first line one positive number: the number of testcases, at most 100. After that per testcase:  One line containing two integers C (1 ≤ C ≤ 20) and N (2 ≤ N ≤ 20), where C is the number of continents and N is the number of key points in the flight route. N lines each containing two integers X, Y giving the coordinates of the key points, from first to last. The descriptions of the C continents. Each continent description starts with a line containing an integer M (3 ≤ M ≤ 30) giving the number of vertices of this continent. It is followed by M lines, each containing a pair of integers X, Y giving the coordinates of the M vertices, in either clockwise or counter-clockwise order.  Every coordinate in the input is between      −10 000   and      10 000  .

 On the first line one positive number: the number of testcases, at most 100. After that per testcase:  One line with three integers 1 ≤ h ≤ 500, 1 ≤ w ≤ 500 and 1 ≤ d ≤          1 000 000 000    . h and w are the dimensions of the map. d is as defined in the text. h lines with w integers, where the xth integer on the yth line denotes the height 0 ≤ h ≤          1 000 000 000     of the point (x, y). 

 On the first line one positive number: the number of testcases, at most 100. After that per testcase:  One line with a string s: the sentence to decipher. The sentence consists of lowercase letters and has a length of at least 1 and at most          1 000     characters. One line with an integer n with 1 ≤ n ≤          10 000    : the number of words in the dictionary. n lines with one word each. A word consists of lowercase letters and has a length of at least 1 and at most 100 characters. All the words are unique. 

 On the first line one positive number: the number of testcases, at most 100. After that per testcase:  One line with two integers h and l with 1 ≤ h ≤ 50 and 2 ≤ l ≤ 50: the height of the parking tower and the length of the conveyor belts. h lines with l integers: the initial placement of the cars. The jth number on the ith line describes the jth position on the ith floor. This number is −1 if the position is empty, and r if the position is occupied by the rth car to pick up. The positive numbers form a consecutive sequence from 1 to the number of cars. The entrance is on the first floor and the elevator (which is initially empty) is in the first position. There is at least one car in the parking tower. 

 On the first line one positive number: the number of testcases, at most 100. After that per testcase:  One line with 0 ≤ N ≤          2 500    , the number of height curves. One line for each height curve, with 1 ≤ Hi ≤          1 000     being the height of the curve, 3 ≤ Pi ≤          2 000     the number of vertices in the polygon, and the vertices x1, y1, …, xPi, yPi having integral values          −300 000     ≤ xi, yi ≤          300 000    .  There will be no more than      200 000   polygon vertices in total in all test cases.

 Your program will be tested on one or more test cases. Each case is specified on a separate line and is made of a single positive number having less than 1,000,000 digits. The last line of the input file is made of a single zero.

 Your program will be tested on one or more test cases. The first input line of a test case is an integer N which is the size of the grid. N input lines will follow, each line made of N integer values specifying the values in the grid in a row-major order. Note than 0 < N â‰¤ 1,000 and grid values are natural numbers less than or equal to 1,000,000. The end of the test cases is identified with a dummy test case with N = 0.

 Your program will be tested on one or more test cases. Each test case is specified on a separate input line that specifies two integers L, U where L ≤ U < 1,000,000. The last line of the input file includes a dummy test case with both L = U = −1.

No input description

 Your program will be tested on one or more test cases. Each test case includes a set of two or more unique points, where the Cartesian coordinates of each point is specified on a separate line using two integers X and Y where 0 â‰¤ |X|, |Y| < 1,000,000. No test case has more than 1000 points. An input line made of two or more '-' (minus signs) signals the end of a test case. An extra input line of two or more '-' (minus signs) follow the last test case.

 Your program will be tested on one or more test cases. The first line of each test case includes two positive integers (S and F) where S is the price of a single ticket and F is the price of a family ticket. The remaining lines of the test case are either the name of a person going by him/herself, or of the form: N1 N2 N3 … Nk where N1 is the name of a parent, with N2… Nk being his/her children. Names are all lower-case letters, and no longer than 1000 characters. No parent will be taking more than 1000 of their children to the movies :-). Names are unique, the name of a particular person will appear at most twice: Once as a parent, and once as a child. There will be at least one person and at most 100,000 people in any test case. The end of a test case is identified by the beginning of the following test case (a line made of two integers.) The end of the last test case is identified by two zeros.

 Your program will be tested on one or more test cases. The first line of a test case specifies two positive integers: T and N where T is the total number of users (not exceeding 100,000) and N is the number of writers (not exceeding 100). N line follows, one for each writer. Each line is made of one or more names, the first being the name of a writer, and the remaining being the names of admirers of that writer. For example: writer reader1 reader2 … readerd Where writer is the writer’s name, reader1 … readerd are the names of the writer’s admirers. A name is a sequence of one or more lower-case letters, no longer than 16 characters. Names are unique throughout the test case. Names are separated by one or more spaces. The last line of the input file is made of two zero’s.

 Your program will be tested on one or more test cases. Each test case is specified on a single line using the following format: A ⊙ B = R (n) where A, B, and R are sequences of one or more digits, but no more than nine digits. ⊙ is one of the four operators: + - * /. n is a natural number representing the number of sticks to move. One or more spaces separate A, ⊙, B, =, R, and (n). The end of the test cases is indicated by a separate line having the word "EOF" (without the quotes).

 Your program will be tested on one or more expressions. Each expression is specified on a single line. No line will be longer than 256 characters. The last line, which is not part of the test cases, will be 0=0.

 The input is a sequence of lines each of which contains a single positive integer. Each positive integer is greater than 1 and less than or equal to the 100000th prime number, which is 1299709. The end of the input is indicated by a line containing a single zero.

 The input consists of multiple datasets, each containing integers in the following format. N T L BLose1⋯LoseLBack1⋯BackB N is the index of the goal, which satisfies 5 ≤ N ≤ 100. T is the number of turns. You are requested to compute the probability of success within T turns. T satisfies 1 ≤ T ≤ 100. L is the number of squares marked “Lose one turn”, which satisfies 0 ≤ L ≤ N − 1. B is the number of squares marked “Go back to the start”, which satisfies 0 ≤ B ≤ N − 1. They are separated by a space. Losei’s are the indexes of the squares marked “Lose one turn”, which satisfy 1 ≤ Losei ≤ N − 1. All Losei’s are distinct, and sorted in ascending order. Backi’s are the indexes of the squares marked “Go back to the start”, which satisfy 1 ≤ Backi ≤ N − 1. All Backi’s are distinct, and sorted in ascending order. No numbers occur both in Losei’s and Backi’s. The end of the input is indicated by a line containing four zeros separated by a space.

 The input consists of multiple datasets, each in the following format.  X0 Y0 X1 Y1 X2 Y2 They are all integral numbers between âˆ’100 and +100 inclusive. (X0, Y0), (X1, Y1), (X2, Y2) are the coordinates of three vertices of the triangular base in counterclockwise order. The end of the input is indicated by a line containing six zeros separated by a single space.

 The input consists of multiple datasets, each in the following format. nxs ysxg ygx11 y11 x21 y21⋮x1k y1k x2k y2k⋮x1n y1n x2n y2n n, representing the number of line segments, is a positive integer less than or equal to 200. (xs, ys) and (xg, yg) are the start and goal points, respectively. You can assume that (xs, ys) ≠ (xg, yg) and that each of them is located on an end point of some line segment representing a street. You can also assume that the shortest path from (xs, ys) to (xg, yg) is unique. (x1k, y1k) and (x2k, y2k) are the two end points of the kth line segment. You can assume that (x1k, y1k) ≠ (x2k, y2k) Two line segments never cross nor overlap. That is, if they share a point, it is always one of their end points. All the coordinates are non-negative integers less than or equal to 1000. The end of the input is indicated by a line containing a single zero.

 The first line contains one number N -- the number of battleships.(1 ≤ N ≤ 500) Following N lines each contains three integers presenting the position of one battleship.

 The input consists of multiple datasets, followed by a line containing two zeros separated by a space. Each dataset has the following format.     n m    a1 b1 w1    ⋮    am bm wm     Every input item in a dataset is a non-negative integer. Items in a line are separated by a space. n is the number of the vertices and m the number of the edges. You can assume 2 ≤ n ≤ 100 and 0 ≤ m ≤ n(n − 1)/2. ak and bk (k = 1, …, m) are positive integers less than or equal to n, which represent the two vertices vak and vbk connected by the kth edge ek. wk is a positive integer less than or equal to 10000, which indicates the weight of ek. You can assume that the graph G = (V, E) is simple, that is, there are no self-loops (that connect the same vertex) nor parallel edges (that are two or more edges whose both ends are the same two vertices).

 The input consists of multiple datasets followed by a line which contains only a single ‘.’ (period). Each dataset consists of a program also followed by a line which contains only a single ‘.’ (period). A program does not exceed 1000 lines. Any line does not exceed 80 characters excluding a new line character.

 The input consists of multiple datasets. Each dataset represents a map of an island, which is a convex polygon. The format of a dataset is as follows.     n     x1  y1    ⋮    xn  yn     Every input item in a dataset is a non-negative integer. Two input items in a line are separated by a space. n in the first line is the number of vertices of the polygon, satisfying 3 ≤ n ≤ 100. Subsequent n lines are the x- and y-coordinates of the n vertices. Line segments (xi, yi)–(xi+1, yi+1) (1 ≤ i ≤ n − 1) and the line segment (xn, yn)–(x1, y1) form the border of the polygon in counterclockwise order. That is, these line segments see the inside of the polygon in the left of their directions. All coordinate values are between 0 and 10000, inclusive. You can assume that the polygon is simple, that is, its border never crosses or touches itself. As stated above, the given polygon is always a convex one. The last dataset is followed by a line containing a single zero.

 The input consists of multiple datasets, each in the following format. a m b n This line represents m√a + n√b. The last dataset is followed by a single line consisting of four zeros. Numbers in a single line are separated by a single space. Every dataset satisfies the following conditions.  m√a + n√b ≤ 4. mn ≤ 20. The coefficients of the answer a0, …, ad are between (−231 + 1) and (231 − 1), inclusive. 

 The input consists of a single test case. The first line contains m and n (1 ≤ m, n ≤ 10). Next come n lines each containing a string of m characters, which describes a legal position in the game. We use black (‘B’) and white (‘W’) discs in this problem. Unoccupied positions in the grid is denoted by periods (‘.’). At most 40 or 60% of all positions are unoccupied. The first player always plays black discs when the game starts, but the given position may be continued with the second player playing first.

 The input consists of a single test case and is given in the following format:     m n t    a11 a12 ⋯ a1n   a21 a22 ⋯ a2n   ⋮ ⋮ ⋱ ⋮   am1 am2 ⋯ amn   b11 b12 ⋯ b1n   b21 b22 ⋯ b2n   ⋮ ⋮ ⋱ ⋮   bm1 bm2 ⋯ bmn   i1 j1 k1    i2 j2 k2    ⋮ ⋮ ⋮    it jt kt      Bounds on the values are: 1 ≤ m, n ≤ 20; 1 ≤ t ≤ 1000; 0 ≤ aij, bij ≤ 10; 1 ≤ it ≤ m; 1 ≤ jt ≤ n; 1 ≤ kt ≤ 109.

 The first line contains one number N -- the number of test cases.(1 ≤ N ≤ 100)Each of the following N lines contains four integers M, D, L, R ( 1≤ M, D, L, R ≤ 2,000,000,000)

 K (1 <  K ≤ 10) and  N ( ≤ 10 20, in the system of base  K)

 The first line contains two positive integers N and M, the number of nodes and wires in the circuit.( N, M â‰¤ 100)The next M lines, each describe a wire connection by three integers X, Y, R which indicates that between Node X and Node Y, there is a wire with resistance of R ohm.

 There are multiple test cases.  Every test case starts with one line containing a single number  N indicating the number of lights which is initially on. ( N ≤ 100)  Each of the next  N lines contains the coordinates ( x,  y,  z) (1 ≤  x,  y,  z ≤ 1000) showing that the light at this position is on initially.

 The input consists of a single test case. The first line of input contains three integers n, m, v (1 ≤ n ≤ 50,000, 1 ≤ m ≤ 200,000, 1 ≤ v ≤ 1,000). Next come n lines, each containing a pair of integers (xi, yi) (−109 ≤ xi, yi ≤ 109, ∀1 ≤ i ≤ n). The following m lines each contains three integers ai, bi, ti (0 ≤ ai, bi ≤ n + 1, 1 ≤ ti ≤ 1,000, ∀1 ≤ i ≤ m). The last line contains two pairs of integers (x0, y0), (xn+1, yn+1) (−109 ≤ x0, y0, xn+1, yn+1 ≤ 109). There were n + 2 chambers in total, numbered 0 through n + 1. Chamber 0 was where Yangyang found the statue of God Proxima; chamber n + 1 was located, as the only exception, on the ground and would not trap Yangyang even if it collapsed. Chamber i (1 ≤ i ≤ n) was located at (xi, yi). Corridor i (1 ≤ i ≤ m) connected chambers ai and bi, and Yangyang needed ti units of time to run through it. Seismic waves propagated at constant speed v.

 The first line of the input file contains two integers: n — the length of each string (1 ≤ n ≤      100 000  ) and k — the cardinality of V (1 ≤ n ⋅ k ≤ 100 000). The next k lines contains strings V1, V2, …, Vk. The last two lines contain strings A and B of length n. All strings Vj, A and B consist of small letters of English alphabet. It is guaranteed that A and B are orthogonal to V.

 The input file contains single integer number n (1 ≤ n ≤ 106) — the capacity of the refrigerator. Help the beer lovers to find the optimal dimensions of their new refrigerator.

 Input file contains one integer number n (3 ≤ n ≤ 2000).

 The first line of the input file contains two numbers: n — the number of apartments to be connected and m — the number of possible links (1 ≤ n ≤ 1000, 1 ≤ m ≤      10 000  ). Following m lines contain possible link descriptions. Each description consists of three integer numbers: ai and bi — apartments that can be connected by the link and li — link length in meters (0 ≤ li ≤ 100). Apartments are numbered from 1 to n. The last line of the input file contains four integer numbers: p5, q5, p6 and q6 — price and quantity of category 5 and 6 cables respectively (1 ≤ pi, qi ≤      10 000  ).

 The input contains a single line with the values N and M. Both numbers are integers, belong to the interval from 2 to 20000 and are separated from each other by one or more spaces.

 The first line of the input file contains one integer h — the height of the skyscraper (1 ≤ h ≤ 1018). The second line contains three integers a, b and c — the parameters of the buttons (1 ≤ a, b, c ≤      100 000  ).

 The only line of input contains the Boolean function represented as a string consisting of characters ‘a’..‘k’, ‘(’, ‘)’, ‘~’, ‘&’ and ‘|’. The last three tokens stand for ¬, ∧ and ∨ respectively. Tokens can be separated by an arbitrary number of spaces. The line contains      1 000   characters at most. The formula in the file is syntactically correct.

 The first line of the input file contains a given string T. The second line contains S. Both strings are of equal length in range from 1 to      5 000   characters. All characters in these strings are zeros or ones.

 Input file contains integer n, the number of teams in the championship (2 ≤ n ≤ 8). The following n lines contain one integer number each — points gained by the teams.

 The input file contains two integer numbers b and w — the number of black and white tiles respectively (0 ≤ b, w ≤ 10 000).

 The first line of the input file contains integer numbers n (1 ≤ n ≤ 1000) and t (1 ≤ t ≤ 109). The second line contains n integer numbers wi (1 ≤ wi ≤ 109) — the weights of the pigs. The third line contains n integer numbers dj (1 ≤ dj ≤ 109) — the distances to the villages from the town A. The fourth line contains n integer numbers pj (1 ≤ pj ≤ 109) — the prices of pork in the villages.

 The first line of the input file contains a space-free text string (255 symbols at most), containing Mayan hieroglyph encoded in plain text form.

 The input contains 10 lines containing 10 characters each. The character is either ’1’ or ’.’. ’1’ means that the cell is occupied by a ship, ’.’ means that the cell is free.

 The first line contains numbers n and m, separated by one or more spaces. Each of the next n lines consists of m characters describing tiles.

 The first line contains two integers N and M separated by one or more spaces. The next N lines contain M integers each. The integers are separated by one or more spaces.

 The input contains only one line with the encoded arithmetic expression.

 The first line contains four floating point numbers Xa Ya Xb Yb, separated by one or more spaces. The next line contains single integer number K (K â‰¤ 200). Each of the rest K lines of the file contains three floating point numbers Xi, Yi, Ri separated by one or more spaces. Ri > 0.

 The input contains one line with the source AT-sequence.

 The first line contains the number of white and black pieces. The numbers are separated by one or more spaces. Each following line contains the description of one piece (upper-case Latin letters R, Q, K, B, C for king "rex", queen, knight, bishop, or castle) and the initial location of the piece in the standard chess notation (the lower left-hand square has notation a1, the upper right-hand â€“ h8). At first the white pieces are described, then the black ones. It is guaranteed that the initial configuration contains no lines that could be removed.

 The first line contains a single integer n, 1 ≤ n ≤ 50000. Each of the next n lines contains two integers pj and dj, 0 ≤ pj ≤ 1000, 0 ≤ dj ≤ 1000000, separated by one or more spaces. Line n+2 contains an integer m (number of arcs), 0 ≤ m ≤ 10*n. Each of the next m lines contains two integers i and j, 1 ≤ i, j ≤ n.

 The input consists of M+1 lines. The first line contains the numbers N, M, and K. Each next line describes one road and contains the initial city number, the final city number and the length of the road. All numbers are integers and separated from each other by one or more spaces.

 The only line of the input contains numbers H, R, D1, h1, D2, h2, D and n separated by spaces. All the numbers are real. Each of them does not contain more than three digits in its fractional part.

 Input consists of multiple test cases, and ends with a line of “-1 -1 -1”.  For each test case:  The first line contains three integers x1, y1 and z1, representing q. q=x1 y1+z1.  The second line contains two integers: y2 and z2, representing n. n=2 y2+z2.  The third line contains a single integer P, meaning that what you really should output is the formula’s value mod P.  Note: 0<=x1,y1,z1,y2,z2<=50000, z1>0, 0<P<100000000

 The input consists of one line. The line contains two integer numbers N and B (1 ≤ N ≤ 40, 1 ≤ B ≤ 5) separated by one or more spaces.

 The input consists of two lines. The first line contains an integer number N (1 ≤ N ≤ 20), while the second line contains a real number P (0 ≤ P ≤ 1).

 The input, as in the previous task, consists of two lines. The first line contains an integer number N (1 ≤ N ≤ 20), while the second line contains a real number P (0 ≤ P ≤ 1).

 The input contains 5 lines. The first line describes function F1 and contains either sin or cos. The second and the third lines describe functions F2 and F3 respectively and have the same format as the first line. Next, the fourth line contains either min or max. If the line contains min than it is necessary to minimize criterion function, otherwise it is necessary to maximize criterion function. Finally, the fifth line contains parameter S value (3 ≤ S ≤      1 000 000  ).

 The input contains multiple data sets, the first line of each data set contains N <= 35, the number of elements, the next line contains N numbers no larger than 10 15 in absolute value and separated by a single space. The input is terminated with N = 0

 The input contains several test cases. The first line contains the number of test cases T (1 ≤ T ≤ 10). Each of the next T lines describes one test case and contains an integer number n (1 ≤ n ≤ 500).

 On the first line of the file is the integer N (0 ≤ N ≤ 100), the number of the teleports. On the second line of the file are the integers XV and YV (−100 ≤ XV ≤ 100, −     1 000 000   ≤ YV ≤      1 000 000  ), the coordinates of the source point V. On the third line of the file are the integers XW and YW (−100 ≤ XW ≤ 100, −     1 000 000   ≤ YW ≤      1 000 000  ), the coordinates of the destination point W. Each of the N following lines contains 5 integers, separated by spaces, that describe the ith teleport – giving its parameters Ai, Bi, Ci, XLi, XRi (‑100 ≤ Ai, Bi, Ci ≤ 100, Ai ≠ 0, −100 ≤ XLi < XRi ≤ 100).

 The first line of the input contains 36 letters ’a’ … ’d’. The letter on the position i denotes the initial color of the triangle number i. It is known that each of the four letters occurs exactly 9 times on the first line of the file. The second line of the file contains 36 distinct integers 1…36 that describe the ”magic re-paint” operation. The ith integer on this line is the member pi of the permutation that defines the operation.

 The first line of the input file contains a single integer number n (1 ≤ n ≤ 100) — the number of ant colonies and apple trees. It is followed by n lines describing n ant colonies, followed by n lines describing n apple trees. Each ant colony and apple tree is described by a pair of integer coordinates x and y (−     10 000   ≤ x, y ≤      10 000  ) on a Cartesian plane. All ant colonies and apple trees occupy distinct points on a plane. No three points are on the same line.

 The input file consists of a single integer number n (1 ≤ n ≤ 50) — the number of countries that are hosted in the building.

 The first line of the input file contains two integer numbers n and m (1 ≤ n ≤      50 000  , 0 ≤ m ≤      10 000  ). Here n is the number of vertices in the graph. Vertices are numbered from 1 to n. Edges of the graph are represented by a set of edge-distinct paths, where m is the number of such paths. Each of the following m lines contains a path in the graph. A path starts with an integer number ki (2 ≤ ki ≤ 1000) followed by ki integers from 1 to n. These ki integers represent vertices of a path. Adjacent vertices in a path are distinct. Path can go to the same vertex multiple times, but every edge is traversed exactly once in the whole input file. There are no multiedges in the graph (there is at most one edge between any two vertices). The graph in the input file is a cactus.

 The first line of the input file contains 6 integer numbers:  d (10 ≤ d ≤ 100) — initial depth of the diver. vd (1 ≤ vd ≤ 10) — maximal speed of the diver. n (1 ≤ n ≤ 20) — number of sharks. r (1 ≤ r ≤ 10) — minimal safe distance between a shark and the diver. w (10 ≤ w ≤ 100) — maximal distance that a shark swims away from the rope. vs (1 ≤ vs ≤ 50) — speed of a shark.  Then follow n lines describing sharks with 3 integer numbers per line for each shark:  di (1 ≤ di < d) — depth of i-th shark. wi (0 ≤ wi ≤ w) — initial distance from i-th shark to the rope. fi (fi is 1 or −1) — initial direction of i-th shark’s movement in relation to the rope (1 if it swims away from the rope, or −1 if it swims to the rope).  Initially the diver is more than r feet from any shark.

 The input file consists of a single line with at most 30 tokens separated by spaces. Each token is either:  a digit from 0 to 9; an operation +, -, *, or /; an uppercase letter X that denotes variable x.  The input file contains a correct representation of f(x) in postfix notation where token X occurs at most once. There is no division by a constant zero in this equation, that is, there always exists a value of x, such that f(x) can be evaluated without division by zero.

 The first line of the input file contains four numbers — c, m, n, and k. Here c (0.01 ≤ c ≤      100 000 000.00  ) is the amount of cash collected from individual investors up to a cent (up to two digits after decimal point); m (1 ≤ m ≤ 100) is the number of days in the fund’s lifetime; n (1 ≤ n ≤ 8) is the number of stocks selected by Frank for trading; k (1 ≤ k ≤ 8) is the overall limit on the number of lots the fund can hold at any time. The following 2n lines describe stocks and their prices with two lines per stock. The first line for each stock contains the stock name followed by two integer numbers si and ki. Here si (1 ≤ si ≤      1 000 000  ) is the lot size of the given stock, and ki (1 ≤ ki ≤ k) is the number of lots of this stock the fund can hold at any time. Stock name consists of 1 to 5 capital Latin letters from “A” to “Z”. All stock names in the input file are distinct. The second line for each stock contains m decimal numbers separated by spaces that denote prices of the corresponding stock for each day in the fund’s lifetime. Stock prices are in range from 0.01 to 999.99 (inclusive) given up to a cent (up to two digits after decimal point). Cash and prices in the input file are formatted as a string of decimal digits, optionally followed by a dot with one or two digits after a dot.

 The first line of the input file contains an integer number n (1 ≤ n ≤ 30) — the number of Kingdoms that are dividing Qari. Then follow n sections describing the areas that were indicated by each Kingdom as worthy. The first line of each section contains an integer number mi (1 ≤ mi ≤ 30) — the number of circles indicated by i-th Kingdom. It is followed by mi lines describing circles, one circle per line. A circle is described by three integer numbers x, y, and r (−1000 ≤ x, y ≤ 1000; 1 ≤ r ≤ 1000) — the coordinates of its center and its radius correspondingly. Circles in one section do not intersect, but may touch each other.

 The first line of the input file contains two integer numbers n and k (2 ≤ n ≤ 50, 1 ≤ k < n). n denotes the total number of contestants, k denotes the number of the person who has the token at the beginning of the game. The second line of the input file contains n − 1 numbers that denote the probabilities pi (0.01 ≤ pi ≤ 0.99) of passing the token to the right for the persons numbered from 1 to n − 1. The probability of passing the token to the left for the person number i is 1 − pi. The probabilities are given with at most 2 digits after decimal point.

 The input file contains two lines. The first line consists of a single integer number n (1 ≤ n ≤ 30) — the number of disks in the puzzle. The second line contains descriptions of six moves separated by spaces — the strategy that is used to solve the puzzle.

 The input file contains at most 1000 lines with at most 80 characters in each line. Each line contains one or more words separated by spaces and special symbols: ‘-’, ‘,’, ‘.’, ‘"’, ‘(’, ‘)’, ‘:’, ‘;’, ‘!’, ‘?’. There are no trailing spaces, but other separators are allowed at the end of line. Words may be either full or abbreviated. Full word consists of one to 32 Latin letters and may be written in one of three capitalization forms: all lowercase, First Capital Letter, or ALL CAPITAL LETTERS. Abbreviated word consists of a Latin letter, followed by a number from 2 to 30 (no leading zero), followed by a Latin letter. Abbreviated words also have three corresponding capitalization forms: all l7e, F3t C5l L4r, or ALL C5L L5S.

 The first line of the input file contains a single integer n (2 ≤ n ≤ 20) — the number of writings in the input file. It is followed by descriptions of n writings. Each writing starts with a line with a single integer number mi (1 ≤ mi ≤ 100) — the number of strokes in i-th writing. It is followed by mi lines that describe strokes for i-th writing. Each stroke is represented by a line with four integer numbers xaij, yaij, xbij, and ybij (−1000 ≤ xaij, yaij, xbij, ybij ≤ 1000) — coordinates of endpoints. xaij, yaij are coordinates of the beginning of j-th stroke and xbij, ybij are coordinates of the end of j-th stroke. The beginning and the end of the stroke are distinct points. Any two endpoints are connected by at most one stroke.

 The input consists of a single test case. The test case contains at most 1001 lines, each being a string of at most 80 printable ASCII characters. The first string is the format string. The rest comprises the array of arguments.

 The first line of the input file contains a single integer number n (1 ≤ n ≤      5 000  ) — the number of words in the language. It is followed by n lines with a word on each line. Each word consists of 1 to 30 lowercase Latin letters from “a” to “z”. All words in the input file are different.

 The input consists of several test cases. Each test case has the following format:Cx1 y1 x2 y2 x3 y3t1 t2 t3The input is terminated by C = 0

  Input consists several test case. The first line of each test case is N (N ≤ 100000), the total number of cards. The following N lines describe the cards. Each line contains three integers a, b, c (a, b, c ≤ 10000) which present the number of points in apo, bqu and cri of that card respectively. Jack has the first card. The last of each test case is M (M ≤ 10000000), the number of chances to enhance cards. The input ends with N = 0. 

 The input consists of several test cases.In each test case, N will be given in the first line. Then N numbers are given, representing X1, X2, ... , XN, ( Xi ≤ 1,000,000,000  3 ≤ N ≤ 1,00,000 )

  The first line contains n (n ≤ 100000). The following n lines describe the sequence. Then follows M (M ≤ 100000), the numbers of operations and queries. The following M lines describe the operations and queries. 

  The first line contains n. (n â‰¤ 200000) The following n lines contain the sequence. 

 There are several test cases for this problem.For each case, the first number is an integer M, refer to the HP of the creep.The second number is a positive integer, d, refer to the HP dropping rate of the creep.Then follows four integers, refer to Attack_1, Time_1, Attack_2, and Time_2 All numbers are less than 10000.

   The input consists of multiple test cases. Each test case occupies one line which contains   δ + 1 (0 ≤   δ ≤ 10) integers   a 0,   a 1, …,   a δ such that |  a i| ≤ 1000, ∀  i : 0 ≤   i ≤   δ. These integers define a polynomial    f(x) = a0 + a1x + a2x2 + ⋯ + aδxδ,  which is to be factorized. The input ends once EOF is met. 

 The first line of the input is an integer T which indicates the number of test cases. The first line of each test case is a positive integer n. Each of the following n - 1 lines contains three integers x, y, z separated by spaces, representing there is an edge between node x and node y, and the capacity of the edge is z. Nodes are numbered from 1 to n.All the elements are nonnegative integers no more than 200000. You may assume that the test data are all tree metrics.

 The first line of the input is an integer T which indicates the number of test cases. Each test case is specified on a separate line and is made of two positive number m and n, where m ≤ 100000 and n ≤ 1000.

 The first line of the input is an integer T which indicates the number of test cases. The first line of each test case is an integer n, denoting the number of points.3 ≤ n ≤ 655. The following n lines describe coordinates of points. 0 ≤ x, y ≤ 10000. 

 The first line of the input is an integer T which indicates the number of test cases. For each test case, the first line are two integers n (1 ≤ n ≤ 10000) and m (1 ≤ m ≤ 100000), then m lines of instructions in the forms as described above. In the instructions, names are strings contain either letters or figures with length no greater than 10.n minstruction[1]instruction[2]...instruction[m]

 The first line of the input is an integer T which indicates the number of test cases. For each test case, input two numbers. Each number contains four different digits.

 The first line contains the number the test cases, Q(1 ≤ Q ≤ 500000). Each test case contains an integer N(1 ≤ N ≤ 5000000) 

 The first line of the input is an integer T which indicates the number of test cases. Each test case occupies a line, contains an integer n (1 ≤ n ≤ 100).

  The first line of the input is an integer T which indicates the number of test cases. Each of the case, the first line will be the three integers L, W, and H, (0 < L, W, H ≤ 10000 indicate the length (x-coordinate), width (y-coordinate) and the height (z-coordinate) of the solid. The next line follows an integer K (0 ≤ K ≤ 10), indicating the number of floors with holes above the solid (including the roof of the villa). Then follows K lines describe the holes. Each of the K lines begin with an integer indicating the number Ni (3 ≤ Ni ≤ 100) of points of the convex polygons of the hole, the next Ni pairs of integers will be the continuous points of the hole counter-clockwise, you can assume that all the coordinates of the points are in the range (0, 10000). The floors are all horizontal and you need not to know exactly how high they are. Then follows a three-dimensional integer coordinate (x, y, z) indicating the location of the target aphis. You can assume that this point is always on the plane X = L or Y = W. The original point of the coordinate system is inside the solid, and the coordinate of Point A is (0, 0, H). 

  The first line of the input is an integer T which indicates the number of test cases. For each of the test case, the first will be two integers N, M (2 ≤ N, M ≤ 40). The next N lines will describe the map of the mine field. Each of the N lines will be a string that contains M characters. Each character will be an integer X (0 ≤ X ≤ 9) or a '*' or a '#'. The integer X indicates that square has X units of ores, which your truck could get them all. The '*' indicates this square has a magic power which can transfer truck within an instant. The '#' indicates this square is full of rock and the truck can't move on this square. You can assume that the starting position of the truck will never be a '#' square. As the map indicates, there are K '*' on the map. Then there follows K lines after the map. The next K lines describe the specified target coordinates for the squares with '*', in the order from north to south then west to east. (the original point is the northwest corner, the coordinate is formatted as north-south, west-east, all from 0 to N - 1,M - 1).  

  The first line of the input is an integer T which indicates the number of test cases. Each of the cases tells the map of the sea base you will explore, The first line will be the M, N, K, P. M (1 ≤ M ≤ 20) is the width of the area, N (1 ≤ N ≤ 20) is the length of the area, and K (1 ≤ K ≤ 10) is the number of kinds of resource, P is the certain capacity of the battery. Then follows M lines characters indicating the map, each line contains N characters. There are four kinds of characters, '.', '*', '#' and capital letters. The symbol '.' indicate that free space. The '*' indicates where the research ship located, notice that once the robot moves back to this area, it will be fetched back to the main ship automatically. You can assume there is only one '*' on one map.The '#' indicates that the space is blocked of some reason, the capital letters indicate K kinds of resource, and you can assume that there are always K kinds of capital letters (alphabetically from A). The next K lines follows two integers each line, Ai and Bi. 

 The input contains a single test case. The first line contains four integers n, m, s and t (2 ≤ n ≤ 100; 0 ≤ m ≤ 1000; 1 ≤ s, t ≤ n; s ≠ t). There are n junctions, some pairs of which are connected by m roads. The court and the prison are located at the s-th and the t-th junctions, respectively. The next m lines each contain five integers x, y, b, e and c (1 ≤ x, y ≤ n; 0 ≤ b < e ≤ 104; 1 ≤ c ≤ 104), indicating that the directed lanes running from the x-th junction to the y-th junction of a road that takes the motorcade of escort c units of time to pass through will be shut down between time b and e. The earliest time when the motorcade can leave the court is time 0.

 The input contains multiple test cases. Each test case consists of a single integer n (3 ≤ n ≤ 107) on a separate line. The input ends where EOF is met.

 The input contains a single test case. The first line contains four numbers (x⊕, y⊕, z⊕) and r⊕, the Cartesian coordinates of the planet and its radius. The second line contains four numbers (x⊙, y⊙, z⊙) and r⊙, the Cartesian coordinates of the star and its radius. The third line contains three numbers (x, y, z), the Cartesian coordinates of the space probe. The input is physically consistent.

 The input contains multiple test cases. Each test case consists of a single integer n (3 ≤ n ≤ 5000) on a separate line. The input ends where EOF is met.

 The input contains a single test case. The first line contains n (1 ≤ n ≤ 105). The remaining n lines each contain two integers v and w (0 ≤ v, w < 106), the straight-line and drift speeds of a kart.

 The input contains a single test case describing a DFA whose states are {0, 1, 2, …, n} and which reads only lowercase letters. The first line contains n and the start state s (1 ≤ s ≤ n ≤ 1000). The second line contains an integer m (0 ≤ m ≤ 26n). Each of the following m lines contains an integer x, a symbol c and another integer y (1 ≤ x ≤ n; c ∈ Σ; 0 ≤ y ≤ n), specifying a state transition “x —c→ y”. The state transition “x —c→ 0” is implicitly assumed for any state x and symbol c if not otherwise specified. The next line contains an integer k (0 ≤ k ≤ n), which is followed by a line containing k integers, the final states of M. 0 is not a final state. If there multiple choices of w, you may choose any one.

 The input contains a single test case. The first line contains two integers r and c (1 ≤ r, c ≤ 20), the dimensions of A. The following r lines, each containing a string of length c, give an r × c 0-1 matrix representing the pixels of A. The next line contains two integers R and C (r ≤ R ≤ 20; c ≤ C ≤ 20), the dimensions of B. The following R lines, each containing a string of length C, give an R × C 0-1 matrix representing the pixels of B. A 0 indicates a white pixel; a 1 indicates a black pixel.

 The input contains multiple test cases. Each test case consists of two lines. The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 106). The second lines contains n integers a1, a2, …, an (1 ≤ a1, a2, …, an ≤ 105). For each 1 ≤ i ≤ n, there are ai disks of size i. The input ends where EOF is met.

 The input contains a single test case consisting of some text. The text is given on multiple lines not longer than 100 characters each. The text contains only letters (lowercase and uppercase), punctuation marks and spaces. Punctuation marks include periods, commas, semicolons, colons, single and double quotes, exclamation and question marks. Quotes are represented by “`” (left single quote), “'” (right single quote), “``” (left double quote) and “''” (right double quote), respectively. They are also recognized following the leftmost longest rule. The input ends where EOF is met.

 The input contains a single test case describing a solvable puzzle. The first line contains two integers r and c (2 ≤ r, c ≤ 12). The next r lines, each containing c integers, give an r × c 0-1 matrix describing the sand in the garden. A 0 indicates a sand-covered square; a 1 indicates a rock-occupied square. All squares are not occupied by rocks.

 There are multiple test cases.The first line contains the number of test cases.Each test case begins with an integer N( ≤ 10000), the number of inputs of Sheryl's circuit. It is guaranteed that N equals 2k, where k is an integer.Next N - 1 numbers describe the types of the BAUs, 0 for ∨ and 1 for ∧. The describing order is from top level to bottom level. For the same level it is from left to right.

 There are multiple test cases.The first line contains the number of test cases, T.Each of the next T lines describes a test case which consists of three integers n, m, k (0 ≤ n, m, k ≤ 1000)

 The input consists of several test cases.Each test case begins with two integers N, M. (3 ≤ N, M ≤ 10000)Each of the next N lines contains a pair of coordinates, which describes the position of a vertex in one convex polygon.Each of the next M lines contains a pair of coordinates, which describes the position of a vertex in the other convex polygon.A line with N = M = 0 indicates the end of input. The coordinates are within the range [-10000, 10000].

  The input consists of a single test case. The first line contains two integers n and m (2 ≤ n ≤ 8, 1 ≤ m ≤ 16), which are the numbers of states and different commands. The states are numbered 0 through n − 1. State 0 is the only ready state. The commands are denoted by hexadecimal digits 0 through f. Immediately following the first line comes an n × m matrix Δ = {δij}n×m with zero-based indices. Each element δij (0 ≤ δij ≤ n − 1) indicates that when the chip receives command j in state i, it transits to state δij . 

  The input consists of a single test case.  The first line contains an integer n (1 ≤ n ≤ 100). Each of the next n lines contains a fraction pk/qk (0 ≤ k ≤ n - 1) where pk and qk (-100 ≤ pk ≤ 100, 1 ≤ qk ≤ 100) are integers coprime to each other in the form either pk/qk (if qk ≠ 1) or pk (if qk = 1). It is guaranteed that p0 ≠ 0. The given numbers represent the Maclaurin series    of some function f(x). 

  The first line contains two integers m and n, (1 ≤ m ≤ 1000, 1 ≤ n ≤ 100), the numbers of edges and vertices of the graph. The vertices are numbered 1 through n.  The next m lines each contain four integers x, y, u(e) and c(e) (1 ≤ x, y ≤ n, 1 ≤ u(e) ≤ 200, 1 ≤ c(e) ≤ 200) describing an edge e, where x and y are the endpoints of e, and u(e) and c(e) are the capacity and the weight of e, respectively.  The last n lines each contain an integer b(vi) (1 ≤ b(vi) ≤ 200), the balance of vertex i. 

 * Line 1: Two space-separated integers: N and C* Lines 2..N+1: Line i+1 contains a single integer: heighti 

 * Line 1: Four space-separated integers: N, T, S, and E* Lines 2..T+1: Line i+1 describes trail i with three space-separated integers: lengthi , I1i , and I2i 

 The first line of input gives the number of test cases, 1 ≤ t ≤ 100. There are two lines for each test case. The first gives the number of stores Michael wants to visit, 1 ≤ n ≤ 20, and the second gives their n integer positions on Long Street, 0 ≤ xi ≤ 99.

 * Line 1: Two space-separated integers: C and L* Lines 2..C+1: Line i describes cow i's lotion requires with two integers: minSPFi and maxSPFi * Lines C+2..C+L+1: Line i+C+1 describes a sunscreen lotion bottle i with space-separated integers: SPFi and coveri 

 * Line 1: Three space-separated integers: N, M, and T* Lines 2..M+1: Line i+1 contains three space-separated integers: Si , Ei , and Hi * Lines M+2..M+T+1: Line i+M+1 contains two space-separated integers that describe task i: Ai and Bi 

 * Line 1: Three space-separated integers: N, M, and R* Lines 2..M+1: Line i+1 describes FJ's ith milking interval withthree space-separated integers: starting_houri , ending_houri , and efficiencyi 

 * Line 1: A single integer: N* Lines 2..N+1: Line i+1 contains a single initial ('A'..'Z') of the cow in the ith position in the original line

 * Line 1: Two space-separated integers: T and N* Lines 2..N+1: Line i+1 contains a single integer that is the location of the ith landmark: xi

 * Line 1: Two space-separated integers: N and K* Lines 2..K+1: Line i+1 contains three space-separated integers: Si , Ti , and Ri 

 * Line 1: Three space-separated integers: N, M, and K* Lines 2..K+1: Line i+1 describes one submerged location with two space separated integers that are its row and column: R and C

 * Line 1: Two space-separated integers: L and P* Lines 2..L+1: Line i+1 contains a single one integer: Fi* Lines L+2..L+P+1: Line L+i+1 describes cow path i with three space-separated integers: L1i , L2i , and Ti 

 * Line 1: Two space-separated integers: N and M.* Lines 2..N+1: Line i+1 contains two space-separated integers: Ai and Bi * Lines N+2..N+M+1: Line i+N+1 contains two space-separated integers: Ci and Di 

 * Line 1: A single integer: N* Lines 2..N+1: Line i+1 contains a single initial ('A'..'Z') of the cow in the ith position in the original line

 * Line 1: Two space-separated integers: N and M* Lines 2..N+1: Line i+1 describes charm i with two space-separated integers: Wi and Di 

 * Line 1: Two space-separated integers: N and M* Lines 2..N+1: Two space-separated integers: Xi and Yi * Lines N+2..N+M+2: Two space-separated integers: i and j, indicating that there is already a road connecting the farm i and farm j.

 * Line 1: Three space-separate integers: X, Y, and N.* Lines 2..N+1: Line i+1 contains two space-separated integers: Ai and Bi

 * Line 1: Two space-separated integers: N and B* Lines 2..N+1: Line i+1 contains a single integer: Hi 

 * Line 1: Two space-separated integers: N and B* Lines 2..N+1: Line i+1 contains a single integer: Hi 

 * Line 1: Three space-separated integers: N, K, and P

 The first line of input gives a single integer, 1 ≤ t ≤ 40, the number of test cases. Each test case starts with n, the number of phone numbers, on a separate line, 1 ≤ n ≤ 10000. Then follows n lines with one unique phone number on each line. A phone number is a sequence of at most ten digits. 

 On the first line of input is a single positive integer 1 ≤ t ≤ 50 specifying the number of test cases to follow. Each test case begins with two positive integers 1 ≤ m ≤ n ≤ 10000 on a line of itself, m telling the number of words in the dictionary and n the size of the hash table in the test case. Next follow m lines of which the ith describes the ith word di in the dictionary D by two non negative integers h1(di) and h2(di) less than n giving the two hash function values of the word di. The two values may be identical.

 The first line of input gives a single integer, 1 ≤ t ≤ 100, the number of test cases. Then follow, for each test case, a line with the string S of length 1 ≤ m ≤ 18, and a line with the string T of length 1 ≤ n ≤ 18.

 On the first line of input is a single positive integer, 1 ≤ t ≤ 50, specifying the number of test cases to follow. Each test case begins with three integers ab, bc, ca ≤ 1000 on a line of itself. ab is the amount Alice owes Bob (negative if it is Bob who owes Alice money), bc the amount Bob owes Cynthia (negative if it is Cynthia who is in debt to Bob), and ca the amount Cynthia owes Alice (negative if it is Alice who owes Cynthia). Next follow three lines each with six non-negative integers a100, a50, a20, a10, a5, a1, b100, ... , b1, and c100, ... c1, respectively, where a100 is the number of 100 crown notes Alice got, a50 is the number of her 50 crown notes, and so on. Likewise, b100, . . . , b1 is the amount of notes/coins of different value Bob got, and c100, . . . , c1 describes Cynthia's money. Each of them has at most 30 coins (i.e. a10+a5+a1, b10+b5+b1, and c10+c5+c1, are all less than or equal to 30) and the total amount of all their money together (Alice's plus Bob's plus Cynthia's) is always less than 1000 crowns.

 The first line of input gives 1 ≤ n ≤ 1000 and 0 ≤ m ≤ 10000, the number of cities and roads. Then follows a line with n integers 1 ≤ pi ≤ 100, where pi is the fuel price in the ith city. Then follow m lines with three integers 0 ≤ u, v < n and 1 ≤ d ≤ 100, telling that there is a road between u and v with length d. Then comes a line with the number 1 ≤ q ≤ 100, giving the number of queries, and q lines with three integers 1 ≤ c ≤ 100, s and e, where c is the fuel capacity of the vehicle, s is the starting city, and e is the goal.

 On the first line of input is a single positive integer 1 ≤ t ≤ 20 specifying the number of test cases to follow. Each test case begins with a positive integer 1 ≤ m ≤ 20000 on a line of itself telling the number of dolls in the test case. Next follow 2m positive integers w1, h1,w2, h2, ... ,wm, hm, where wi is the width and hi is the height of doll number i. 1 ≤ wi, hi ≤ 10000 for all i.

 Standard input consists of several test cases followed by a line containing 0. Each test case begins with an integer 1 < k â‰¤ 2500, the number of knights. k lines follow, each giving the name and ability of a knight. The name is a string of lower case letters not longer than 20; the ability is a real number. The mismatch between knights with abilities a and b respectively is defined to be (a - b)2.

 The first line of input gives the number of test scenarios, 1 ≤ t ≤ 20. Each scenario consists of two lines of input. The first gives the number of items Lindsay is buying, 1 ≤ n ≤ 20000. The next line gives the prices of these items, 1 ≤ pi ≤ 20000.

 The first line of input gives a single integer, 1 ≤ t ≤ 50, the number of test cases. For each test case, there are two lines. The first contains 2 ≤ h ≤ 200 and 2 ≤ c ≤ h, where h is the number of houses in the street and c is the number of house locations that can be stored. The second contains h integers in increasing order giving the location of the h houses. Each location is in the interval [0, 1000000].

 The input contains a number of test cases, followed by a line containing 0. Each test case begins with 0 < d â‰¤ 365, the number of days that your crystal ball can predict. d lines follow, giving the price of a U.S. dollar in Canadian dollars, as a real number.

 The input consists of several test cases followed by a line containing 0. Each test case begins with an integer 1 ≤ n ≤ 10000, the number of frosh. For each frosh, a line follows containing the course numbers of five distinct courses selected by the frosh. Each course number is an integer between 100 and 499. The popularity of a combination is the number of frosh selecting exactly the same combination of courses. A combination of courses is considered most popular if no other combination has higher popularity.

 * Line 1: A single integer: N* Lines 2..N+1: Line i+1 describes level i with two space-separated integers: Wi and Hi 

 Input contains several test cases followed by a line containing "0 0". Each test case consists of a line containing p and a. 

 The first line of input contains two integers n and m, 1 ≤ n ≤ 15, 1 ≤ m ≤ 1000, the number of people in the group and the number of roads in the city. The places that must be visited along the way are numbered 1 through n. The campus is numbered 0, and Joe's house is numbered n+1. An additional m lines follow, each containing three integers describing a stretch of road. The first two integers are in the range 0 to n + 1 inclusive, and describe the two places connected by the stretch of road. The third integer specifies the length of the stretch of road, in kilometres. A road may be taken in both directions. There is a sequence of roads connecting every place in the city to every other place.

 Input consists of several test cases followed by -1 -1. Each test case first gives the number of Alliance systems, followed by a line for each system giving the integer coordinates -100 ≤ x, y, z ≤ 100 of the system in 3-dimensional space. The number of Empire systems, and the coordinates of each, follow. The Empire and Alliance combined have at least one and no more than 200 systems. All systems have distinct coordinates.

 The input to the program is a series of instances followed by 0 0. An instance consists of a line containing a positive integer N, representing the terminus of that night's run (Nth Street and Nth Avenue), followed by positive integer M. 

 Input consists of several Smeech expressions, one per line, followed by a line containing ().

 The input contains several test cases. The first line of each test case contains two integers between 1 and 20000 inclusive, indicating the number n of heads that the dragon has, and the number m of knights in the kingdom. The next n lines each contain an integer, and give the diameters of the dragon's heads, in centimetres. The following m lines each contain an integer, and specify the heights of the knights of Loowater, also in centimetres.  The last test case is followed by a line containing:  0 0

 The input consists of a number of test cases, followed by a line containing 0 0. Each test case gives n, the number of couples, followed by the number of adulterous pairs, followed by the pairs, in the form "4h 2w" (husband from couple 4, wife from couple 2), or "10w 4w", or "3h 1h". Couples are numbered from 0 to n - 1 with the bride and groom being 0w and 0h.

 The input for this problem is sets of glyphs to be packed. In a given test case, all glyphs are the same height, and an integer, N, on the first line of the test case specifies this height. The next N lines contain the glyphs to be packed. Empty pixels in a glyph are represented by a dot '.' character. Non-empty pixels are represented by a hash mark '#' for visible pixels, and a zero '0' for invisible pixels. Glyphs are separated by a single column of space characters. The input will always consist of more than one glyph, at least one of which will always contain at least one visible pixel. A glyph will always have at least one non-empty pixel in its leftmost and rightmost column, and every glyph will have at least one non-empty pixel at the same height as at least one other glyph in the input. The minimum dimension of a glyph is 1 × 1, the maximum dimension is 20 × 20, and the maximum number of glyphs that will appear in any test case is 20. Test cases continue until a value of zero is specified for N.

 The input consists of one or more strings, each 1â€“79 characters long and on a line by itself, followed by a line containing only "#" that signals the end of the input. The character "#" is used only as an end-of-input marker and will not appear anywhere else in the input. A string may contain spaces, but not at the beginning or end of the string, and there will never be two or more consecutive spaces.

 The input for this problem is a set of Slink puzzles to be solved. The first line of a Slink problem's input contains two integers, r and c, separated by a space, the number of rows and the number of columns in the puzzle. The next r rows of the input contain c integers, space delimited, valued from 0 to 3, which specify the content of the puzzle. The minimum dimension of a puzzle is 2 by 2 cells, and the maximum dimension is 20 by 20 cells. It is guaranteed that a unique solution to every input puzzle exists and can be determined with the above rules if a rule is always applied when it can be applied. A line with values of zero for r and c marks the end of the input.

 There are from one to sixteen datasets followed by a line containing only 0. Each dataset is a line containing decimal integer values for A, B, C, and S, separated by single blanks.

 The input consists of a set of cities for which you must find a fastest route if one exists. The first line of an input case contains two integers, which are the vertical and horizontal number of city blocks, respectively. The smallest city is a single block, or 1 by 1, and the largest city is 20 by 20 blocks. The remainder of the input specifies speed limits and traffic directions for streets between intersections, one row of street segments at a time. The first line of the input (after the dimensions line) contains the data for the northernmost east-west street segments. The next line contains the data for the northernmost row of north-south street segments. Then the next row of east-west streets, then north-south streets, and so on, until the southernmost row of east-west streets. Speed limits and directions of travel are specified in order from west to east, and each consists of an integer from 0 to 9 indicating speed limit, and a symbol indicating which direction traffic may flow. A zero speed limit means the road is closed. All digits and symbols are delimited by a single space. For east-west streets, the symbol will be an asterisk '*' which indicates travel is allowed in both directions, a less-than symbol '<' which indicates travel is allowed only in an east-to-west direction, or a greater-than symbol '>' which indicates travel is allowed only in a west-to-east direction. For north-south streets, an asterisk again indicates travel is allowed in either direction, a lowercase "vee" character 'v' indicates travel is allowed only in a north-to-south directions, and a caret symbol '^' indicates travel is allowed only in a south-to-north direction. A zero speed, indicating a closed road, is always followed by an asterisk. Input cities continue in this manner until a value of zero is specified for both the vertical and horizontal dimensions.

 The input consists of one or more ACL logs, each 3â€“79 characters long and on a line by itself, followed by a line containing only "#" that signals the end of the input. Logs will be in the format defined above and will not contain any whitespace.

  The input will consist of one to sixteen data sets, followed by a line containing only 0. On each line the data will consist of blank separated tokens. The first line of a dataset contains integers p c g, where p is the number of points specified, c is the number of corridors, and g is the number of guards to be placed. Constraints are 1< p < 12; 0 < c < 12; 0 < g < 5.   Next in the dataset are a total of p groups of four tokens, each consisting of a capital letter and three nonnegative integers L x y v indicating the point (x, y) with label L contains an item with value v. If p is no greater than 6, these groups will all be on one line. If p is greater than 6, then the seventh and further groups will be on the next line. Labels will be consecutive letters starting from A. All the numbers are less than 1000. Each of the points is unique. A value of 0 for v means there is no item of value there. The number of locations with items of value will be at least as large as the number of guards.  The last line of a dataset contains c strings of letters, one for each corridor. For each corridor the letters are labels for points along the corridor, in order along the line segment from one end to the other, including both endpoints, all intersection points with other corridors, and all locations on the corridor with a valuable item. Each of the points given in the dataset will lie on at least one of the corridors.   

 * Line 1: Two space-separated integers: N and Q* Lines 2..Q+1: Each line contains three space-separated integers that represent a single query and its reply: Ql, Qh, and A

 * Line 1: A single integer: N* Lines 2..N: Each line specifies a pair of adjacent pastures with two space-separated integers: A and B

 * Line 1: Two space-separated integers: N and M* Lines 2..M+1: Each line contains two space-separated integers that describe the competitors and results (the first integer, A, is the winner) of a single round of competition: A and B

 * Line 1: Two space-separated integers: N and M* Lines 2..N+1: Line i+1 contains the single integer: Di 

 * Line 1: Three space-separated integers: N, P, and K* Lines 2..P+1: Line i+1 contains the three space-separated integers: Ai, Bi, and Li 

 * Line 1: Two space-separated integers: N and S* Lines 2..N+1: Line i+1 contains a single integer: Li 

 * Line 1: Two space-separated integers: A and B.

 * Line 1: Two space-separated integers: N and K * Lines 2..N+1: Line i+1 contains two space-separated integers: Ai and Bi 

 * Line 1: Two space-separated integers: N and T* Lines 2..N+1: Line i+1 contains a single integer: Ri 

 * Line 1: A single integer: N* Lines 2..N+1: Line i+1 contains a single integer elevation: Ai 

 * Line 1: Two space-separated integers: N and M* Lines 2..M+1: Line i+1 contains request expressed as one of two possible formats: (a) Two space separated integers representing a check-in request: 1 and Di (b) Three space-separated integers representing a check-out: 2, Xi, and Di 

 * Line 1: A single integer: N* Lines 2..N+1: Line i+1 describes lattice point i with two space-separated integers: Xi and Yi.

 * Line 1: A single integer: M* Lines 2..M+1: Line i+1 contains three space-separated integers: Xi, Yi, and Ti 

 * Line 1: A single integer: N* Lines 2..N+1: Line i describes the i-th cow's current dining group with a single integer: Di 

 * Line 1: A single integer: N* Lines 2..N+1: Line i+1 describes cow i's dining preference with a single integer: Di 

 * Line 1: Five space-separated integers: M, T, U, F, and D* Lines 2..T+1: Line i+1 describes path segment i with a single letter: Si

 The input will contain several test cases. For each case:The first line contains only one real number R. The second line contains an integer N. The following N lines contain two real numbers xi and yi each, which describe the coordinates of a vertex. Two vertexes in adjacent lines are also adjacent on the polygon. Constraints: 3 ≤ N ≤50, 0.1 ≤ R ≤1000, -1000 ≤ xi, yi ≤ 1000

 The first line contains three integers, N (1 ≤ N ≤ 10), W (1 ≤ W ≤ 10), H (1 ≤ H ≤ 10).The following N lines contain six integers x1, y1, x2, y2, x3, y3 (-100 ≤ xi, yi ≤ 100) each, describing the coordinates of the vertices of a triangle each.

  The first line of the input contains the number of the test cases.Each test case follows the format below:  One line contains an integer N (1 ≤ N ≤ 15), the number of different kinds of poises One line contains N integers, W1, W2 ... WN, ( 1 ≤ Wi ≤ 30) One line contains an integer M (1 ≤ M ≤ 500), the number of requests One line contains M integers, R1, R2, ... RM ( 1 ≤ Ri ≤ 30)  

 The first line contains two integers N (1 ≤ N ≤ 1000) and M,(0 ≤ M ≤ 1,000,000) indicating the number of vertices and edges.The following M lines contain three integers a (0 ≤ a < N), b(0 ≤ b < N), c and an operator op each, describing the edges. 

 The first line contains three integers, N, M and T (1 ≤ N, M, T ≤ 20).N × M integers follow which describe the satisfaction values of every block.

 The first line of input is the number of test case.The first line of each test case contains two integers, N and K (1 ≤ K ≤ N ≤ 200).The next N line each contain three integers ai, bi, wi(1 ≤ ai < bi ≤ 100,000, 1 ≤ wi ≤ 100,000) describing the intervals. There is a blank line before each test case.

 The first line of input is the number of test case.The first line of each test case contains two integers, N and M (1 ≤ M ≤ N ≤ 200).The next N line each contain two integers xi, yi (1 ≤ xi, yi ≤ 10,000) describing the points. There is a blank line before each test case.

 The input consists of several test cases. For every case, there is a line with an integer K ( 0 < K ≤ 1000 ) and a real number p (0.1 ≤ p ≤ 1). Input ends with a single zero.

  The first line of input contains one integer, T (T ≤ 20), the number of test cases. Each case starts with a separate line containing three floating number, H, X, Y(0<H≤200, -200≤X,Y≤200), which specify the direction of sunlight, that is, if there is a object at (0,0,H), its shadow on the ground will be located at (X, Y, 0). The next line of the case contains a single integer, N (N≤20), the number of high buildings. The following N lines describe these N buildings separately. The i-th line consists of seven floating numbers, xi1, yi1, xi2, yi2, xi3, yi3 and hi(-2,000,000≤ xi1, yi1, xi2, yi2, xi3, yi3≤ 2,000,000, 0<hi≤200), that is, (xi1, yi1, 0), (xi2, yi2, 0), (xi3, yi3, 0) is three corner of the rectangular base of the building and hi stands for the height of the building.  

 The first line contains a integer N ( 1 ≤ N ≤ 1000). The next N lines contain the Si, Ti and Di. Si and Ti are in the format of hh:mm. 

 The first line of the input contains one integer C (C ≤ 20) indicating the number of test cases. Each of the following lines contains four integers N, H, R, T.1≤ N ≤ 100.1≤ H ≤ 100001≤ R ≤ 1001≤ T ≤ 10000

 The first line of input is the number of test case.For each test case there is only one line contains two integers, N(1 ≤ N ≤ 50,000) and M(1 ≤ M ≤ N × N). There is a blank line before each test case. 

 The first line of input is the number of test case. The first line of each test case contains two integers, N and M (1 ≤ N,M ≤ 50).The next N lines each contain M integers, describing the matrix Zij (1 ≤ Zij ≤ 100,000) There is a blank line before each test case.

  The first line of the input contains an integer T(1≤T≤100), the number of test cases. Each of the next T lines contains an integer N(1≤N≤10^9) indicating the number of blocks.  

 The first line of input is the number of test case. The first line of each test case contains two integers, N (1 ≤ N ≤ 200) and M (0 ≤ M ≤ 40,000). The next M line each contain two integers a and b indicating the ball labeled with a must be lighter than the one labeled with b. (1 ≤ a, b ≤ N) There is a blank line before each test case. 

 There are several test cases.The first line of each test case contains two integers N (1 ≤ N ≤ 10000) and M (1 ≤ M ≤ 100000).The second line contains N integers Ai (1 ≤ Ai ≤ M). The input ends with two zeros

 The first line contains two numbers n (1 ≤ n ≤ 100000) and m (1 ≤ m ≤ 10000).The following n lines each contain three integers Ai, Bi, Ci (1 ≤ Ai, Bi, Ci ≤ 10000). The next m lines each contain two integers Si and Ti (1 ≤ Si, Ti ≤ 10000).

  The input consists of multiple test cases. Each test case starts with a line containing five integers N, M, T, P and Q(1 ≤ N, M ≤ 1000, 1 ≤ T ≤ 100, 1 ≤ P, Q ≤ 50). The following N lines describe the N × M matrix, each of which contains M characters '*' or '0'.The last part of the test case describe T constellations, each of which takes P lines in the same format as the matrix describing the sky. There is a blank line preceding each constellation.The last test case is followed by a line containing five zeros. 

   The input consists of multiple test cases. Each test case starts with a line containing one integers   N (1 ≤   N ≤ 50), which is the number of DNA segments causing inherited diseases.  The following   N lines gives   N non-empty strings of length not greater than 20 containing only characters in "AGCT", which are the DNA segments causing inherited disease.  The last line of the test case is a non-empty string of length not greater than 1000 containing only characters in "AGCT", which is the DNA to be repaired.  The last test case is followed by a line containing one zeros. 

  The input consists of multiple test cases. Each test case starts with a line containing three integersG, B (1 ≤ G, B ≤ 200) and M (0 ≤ M ≤ G × B), which is the number of girls, the number of boys andthe number of pairs of girl and boy who know each other, respectively.Each of the following M lines contains two integers X and Y (1 ≤ X≤ G,1 ≤ Y ≤ B), which indicates that girl X and boy Y know each other.The girls are numbered from 1 to G and the boys are numbered from 1 to B. The last test case is followed by a line containing three zeros. 

  The input consists of multiple test cases. Each test case contains exactly one line, whichgives a non-empty string consisting of lowercase letters. The length of the string will not be greater than 100,000. The last test case is followed by a line containing a '#'. 

  The input consists of multiple test cases. Each test case starts with a line containing two integers N(1 ≤ N ≤ 100,000) and M(N - 1 ≤ M ≤ 200,000).Each of the following M lines contains two integers A and B ( 1≤ A ≠ B ≤ N), which indicates a link between computer A and B. Computers are numbered from 1 to N. It is guaranteed that any two computers are connected in the initial network.The next line contains a single integer Q ( 1 ≤ Q ≤ 1,000), which is the number of new links the administrator plans to add to the network one by one.The i-th line of the following Q lines contains two integer A and B (1 ≤ A ≠ B ≤ N), which is the i-th added new link connecting computer A and B.The last test case is followed by a line containing two zeros. 

  The input consists of multiple test cases. Each test case starts with a line containing two integers N(1 ≤ N ≤ 20) and M(1 ≤ M ≤ 100000), indicating the number of rectangles on the screen and the number of queries, respectively.The i-th line of the following N lines contains four integers X1,Y1,X2,Y2 (0 ≤ X1 < X2 ≤ 1000, 0 ≤ Y1 < Y2 ≤ 1000), which indicate that the lower-left and upper-right coordinates of the i-th rectangle are (X1, Y1) and (X2, Y2). Rectangles are numbered from 1 to N.The last M lines of each test case describe M queries. Each query starts with a integer R(1<=R ≤ N), which is the number of rectangles the query is supposed to fill. The following list of R integers in the same line gives the rectangles the query is supposed to fill, each integer of which will be between 1 and N, inclusive. The last test case is followed by a line containing two zeros.  

  The input consists of multiple test cases. Each test case contains exactly one line containing L(1 ≤ L ≤ 2,000,000,000). The last test case is followed by a line containing a zero.  

  The input consists of multiple test cases. Each test case starts with a line containing two integers N and M (1 ≤ N ≤ 10,000, 0 ≤ M ≤ 1,000,000), which are the number of computers and the number of damaged links in USTC campus network, respectively. The computers are numbered from 1 to N and computer 1 is the BBS server.Each of the following M lines contains two integers A and B(1 ≤ A ≤ N, 1 ≤ B ≤ N, A ≠ B), which means the link between computer A and B is damaged. A link will appear at most once. The last test case is followed by a line containing two zeros.  

 The input consists of several test cases. The first line of each test case contains an integer n(1 ≤ n ≤ 50). The next line contains n different integers indicating the heights. 

   There are multiple cases ended by   EOF. Test case up to 500.The first line of input is   M,   N (  M ≤ 16,   N ≤ 300). The next   M lines every line contains   N integers separated by space.  

 The expanded view of the cube.

  The first line of the input is the number of test cases. For each case there are two lines. Each line contains 30 characters. '.' represents empty grid. '*' represents a chessman. There is a blank line before each test case. 

 The first line contains a non-negative integer N, the number of polygons, at most 100.The second line contains a positive floating number standing for the radius R of the biggest vehicle. It is guaranteed that the initial position of the vehicle will not intersect with any of the alert area.The next N lines contain several integers each, representing a polygon. The first integer K(3 ≤ K ≤ 50) stands for the number of vertices of this polygon, and rest K pairs of floating numbers (x,y) stand for the positions of the vertices, in counterclockwise order. The coordinate will be in the range of -10000...10000. 

 The first line of input contains two integers N, M, denoting the size of board and the number of pieces on the board. 1 ≤ N ≤ 100, 1 ≤ M ≤ N × NFollowing m lines, each contains two numbers X,Y, denoting the position of one piece. All (X,Y) will be distinct. 0 < X,Y ≤ N

 第一行输入小孩的人数N（N<=64）  接下来每行输入一个小孩的名字(人名不超过15个字符)  最后一行输入W,S (W < N)，用逗号","间隔

 The input contains one integer n. 1 ≤ n ≤ 100

 The first line of input four integers n, m, c1, c2, denote the number of players, the number of problems, the number of finalist and the number of player will advanced to wildcard round. 3 ≤ n ≤ 40, 1 ≤ m ≤ 40, c1 ≥ 1, c2 ≥ 1, n-c1-c2 ≥ 1Following n lines, the i-th line contains m+2 integers Si, Ai1, Ai2, ……Aim, Ci denote the SEED number, the scores of the m problems and the score during the challenge phase for player i. All Si will be distinct. 1 ≤ Si ≤ n, 0 ≤ Aij ≤ 1000, -2000 ≤ Ci ≤ 2000

  The input consists of a single data set given in the format (n, m ≤ 512)      where     for all 1≤i≤n. All numbers except m and n are floating-point. Blank characters are irrevelant.  

 There are several test cases. The first line of each test case contains an integer  d (2≤ d≤100). The second line contains 2 d-1 integers:  a 1, …,  ad -1, followed by  b 0, ...,  bd -1. The third line contains integer  m (0< m≤10 100), and the forth line contains integer  k (0< k≤10 100). The input file ends with integer -1.  

  The first line of the input file contains a single integer T (1 ≤ T ≤ 20) – the number of tests in the input file. Each test starts with a line containing two numbers n (2 ≤ n ≤ 500000) – the amount of numbers in the sequence and k (2 ≤ k ≤ n). It is followed by a line with n integer numbers—the degree sequence in ascending order. And every number s in the sequence is in the range [0, 500000].  

  The input file contains multiply test cases.The first line of each test case is an integer N (N<100), which represents the number of sub-trees. The following lines show the structure of the trees. The first line of the description of a tree is the number of the nodes m (m<100) and the number of the edges k (k<500). The nodes of a tree are numbered from 1 to m. Each of following lines contains 2 integers a and b representing an edge <a, b>. Node 1 is always the root.  

   The input consists of one or more test cases ended with   EOF. Each line contains one test case. Each test case contains 7 non-negative float numbers meaning the coordinates of   A,   B,   C and the height of   P. All numbers are less than 1000.  

 The input contains several test cases.For each test case, there is one line with two positive integers, n ≤ 1000 and k ≤ 1000.The input ends with two zeroes.

  The first line of the input contains one integer N(N â‰¤ 100), the number of grids on the chessboard (so that there are N+1 grids totally).  The next line contains one integer Nf, the number of "go forward" instructions. Next Nf lines contain two integers each. The first integer stands for the number of grid having the instruction and the second integer stand for the number of steps to go forward.  Following line contains one integer Nb, the number of "go backward" instructions. The formats of next Nb lines are similar as what mentioned above.  The next line contains one integer Ns, the number of "stop" instructions. Next Ns lines contain one integer each, which stand for the number of grid having the instruction.  

 The input consists of several test cases.For each test case, the first line contains two integers, N ≤ 500 and M ≤ 20000. indicating the number of cities and tunnels.The following M lines each contains two integers a and b (0 ≤ a, b < N), indicating the city a and city b are connected directly by a tunnel. The input ends by two zeroes.

  The first line is a integer T representing the number of test cases.Each test case begins with an integer N (1 ≤ N ≤ 100000).The next N lines describe the positions of the stations. Each line consists of two integers X (0 ≤ X ≤ 1000000000) and Y (0 ≤ Y ≤ 1000000000) indicating the positions of the station.The next following N lines describe the positions of the agents. Each line consists of two integers X (0 ≤ X ≤ 1000000000) and Y (0 ≤ Y ≤ 1000000000) indicating the positions of the agent. 　 

   The first line of input is the number of test case.  The first line of test case contains two integers   N and   M.  The second line contains   N integers.  The   i th integer denote which group the   i th soldier is in, 0 stands for blue, and 1 for red.  Then the   M lines each contains two integers X and Y, denoted that X and Y are close friend.  (1 ≤   N ≤ 200 , 0 ≤   M ≤ 20000).  There is a blank line before each test case.  

   The first line of the input is number of test case. Each test case contains two integers,   pand   q, which are the points Panda has got for the first two rounds.(0≤  p,  q≤4)  

   There are multiple test cases. Each test case contains string in a line represented. The length of the string will not exceed 500. The format is shown in the sample input.  

   The input consists of multiple test cases. Each test case starts with two integers,   N and   M, which are the number of different types of chocolates and the number of three-type-mixed-chocolates dishes Facer will choose, it is guaranteed that 1≤  N≤1000, 0≤  M≤1000. The following two lines contain one   N-bit binary integer each, which represents Facer's and his girlfriend's original chocolates set. A case with   N=0 and   M=0 indicates the end of the input file, which should not be processed.  

   The first line contains an integer representing the number of test cases.  For each test case, the first line contains an integer representing the number of nodes N (3≤  N≤100). Next   N lines describe a tree. The nodes are numbered from 1 to   N. If the   i th node is not a leaf node, the   i th line should contain two positive integers, which stand for the ID of   i th node’s left child and the ID of   i th node’s right child. Otherwise the   i th node is a leaf node and the   i th line should be "-1 -1". It is guaranteed that Node 1 will be the root of the tree. The following line contains an integer   M representing the number of weights (2≤  M≤16). Next line contains   M positive integers standing for the value of these weights. The value of a single weight will not exceed 100.  

 The input consists of several test cases. Each test case is a line containing two integers n (2 ≤ n ≤ 100) and k (0 ≤ k ≤ 9).

  The first line of input consists of three integers, Rw, Rc and R. (0 ≤ Rw, Rc, R ≤ 1000000) The following ten lines describe the heroes in the battle. Each line contains three integers, x, y, and l indicating the hero's position and the threat level. (-1000000 ≤ x, y, l ≤ 1000000). The first line of the ten always describes Darkterror and his threat level is always zero. 

  The first line of input is the number of test case.The first line of each test case contains three integers, N, M and R.Then R lines followed, each contains three integers xi, yi and di.There is a blank line before each test case. 1 ≤ N, M ≤ 100000 ≤ R ≤ 50,0000 ≤ xi < N0 ≤ yi < M0 < di < 10000 

  The first line of input is N, the number of the coordinates.Each of the next N lines contains a pair of coordinates xi, yi separated by one space.  1 ≤ N ≤ 200 ≤ xi ≤ 5  

  The input contains many test cases ended with EOF. Each test case contains only one line of two integers, k and m.  1 ≤ k, m ≤ 10^9  

  The first line of input is the number of test case.The first line of each test case contains three integers, RA, RB and RC.The second line contains string S.There is a blank line before each test case.  0 ≤ RA, RB and RC ≤ 10^9 0 < The length of S ≤ 500  

  There are multiple cases ended by EOF. Each case has two lines, first line is the equation and the second line is x0. We ensure that each equation just contain integers, 'x', '+', '-', '=' and '^', the right part of '=' is always 0, and there is a space between each term. The number of terms in the equation is less than 50 and all integers in the equations are less than 1000.  

  The first line contains N, the number of cities.Each of the next N lines contains wi the goods' price in each city.Each of the next N-1 lines contains labels of two cities, describing a road between the two cities.The next line contains Q, the number of paths.Each of the next Q lines contains labels of two cities, describing a path. The cities are numbered from 1 to N.  1 ≤ N, wi, Q ≤ 50000  

  There are multiple test cases. Each case contains three lines: the first line contains three integers n, m and k where n represents the length of S1, m represents the length of S2 and k represents the length of substring; the second line contains string S1 and the third line contains string S2. Here 0 ≤ n, m ≤ 50000. Input ends with EOF. 

  The first line of the input contains n, m. n stands for the number of wordlist and m stand for the number of times Facer needs to review each wordlist. Then next line contains an ascending integer sequence contains a1, a2, ..., am indicating on which day Facer needs to review the wordlist. The day is calculated from the day he first memorize it.  1 ≤ n, m ≤ 1000ai+1 - ai ≤ 1001 ≤ a1 ≤ 100 

  The first line of input contains N(N<=100), the number of test cases. Each of the following lines describes one test case. Each line consists of four integers, X, Y, x, y(0<X,Y≤2000, 0≤x≤X, 0≤y≤Y), which (X, Y) is the North-East corner of the city and (x, y) is the location of Hamilton's shelter. The famous thief, of course, cannot driver out of the city. 

  The input file contains multiple cases until the end of file. The first line of each case consists of two integers, R and C (1≤R≤4, 1≤C≤4), which stands for the number of rows and columns of the paper. There are R lines follows which describes the original paper. Each line contains C integers, which the j-th integer of the i-th line describes the color of block (i,j) (1≤i≤R, 1≤j≤C). Colors are represented by integers in the range [0, 19]. And the target color, which Alice wants to paint the whole paper into, is zero.  

  The input file consists of multiple test cases, ending with three zeroes "0 0 0". For each test case, three integers n, m and k are given firstly, where n is the number of cats and k is the length of the move sequence. The following k lines describe the sequence.(m≤1,000,000,000, n≤100, k≤100) 

  In the beginning of each case is a integer N(1≤N≤100), indicates the number of the Sniper's enemies. In each line of next N lines, there are 5 numbers, Xi, Yi, Si, Ri. Di, (Xi, Yi) is the initial coordinate of the i-th enemy. Si, Ri, Di are the stun time, range and damage of the i-th enemy's spell. The last line of each case is consist of one integer, HP, indicate the initial Health Point of the Sniper.  

  Input contains several test cases. Eash case contains only one real number S, representing the surface area of the cone. It is guaranteed that 1≤S≤10000.  

  The input contains several test cases.For each test case, two integers n, m are iven in the first line.The second line contains n×(n+1)/2 numbers depicting the bulk of cards. The cards are given from top to bottom, and from left to right when they are in the same row. The last line of each test case are the integers P, Q, and X, where X represents the initial base card. The input file ends with two zeroes. (1≤n≤5, 0≤m≤100, 0≤P, Q≤100)  

  The 1st line contains three positive integer n1, n2 and n3. n1 stands for the number of lines parallel to x-axis, n2 stands for the number of lines parallel to y-axis, n3 stands for the number of points.(0<n1, n2, n3≤1000)Each of the 2nd line to (n1+1)th line gives an integer y_i (0≤y_i≤1000), means a line with equation y=y_i.Each of the (n1+2)th line to (n1+n2+1)th line gives an integer x_j (0≤x_j≤1000), means a line with equation x=x_j.Each of the last three lines gives two integers px_k and py_k (0≤px_k,py_k≤1000), means a point with coordinate (px_k, py_k).  

   The input contains several test cases. The first line of each test case specifies two number P and Q (1 < P < Q < 37), follow by N0 (the length of N0 is not larger than 5,000,000). Note that a digit larger than 9 is given in small letters, with 'a'=10, 'b'=11 ...  

   The input contains several test cases.  The first line of each test case gives two integer   n (1 < n ≤ 200) and   t (-10 ≤ t ≤ 10). The following line is a sequence of   n integer a  0,a  1, ... ,a  n (-1000 ≤ a  i ≤ 1000), which is separated by exactly one space.   

  The first line of input contains one integer specifying the number of test cases to follow. Each test case begins with a line containing one integer N (1 ≤ N ≤ 100), the number of cut HH performed.  Following N lines each contains two numbers describe the ith cut as following: Suppose the origin is at the center of the cake. Each cut intersects the cake at two points. The polar angles of the two intersections are the given two numbers. They are in range [-π, π). Note: No three cut intersects at one point. Any two cut are distinct. The cake has radius 10.0. 

   The input contains many test cases ended with   EOF.  Each test case contains two lines.  The First line of each test case is   N (1 ≤   N ≤ 10) and   p (0.25 ≤   p ≤ 0.75) seperated by a single blank, standing for the number of mines and the probability to walk one step.  The Second line of each test case is N integer standing for the place of N mines. Each integer is in the range of [1, 100000000].  

 The input consists of several test cases.  Each test case starts with two integers n(2≤n≤2,000) and m(1≤m≤1,000,000), representing the number of detectives and assistants, followed by n lines. The ith line describes the assistants who works for detective i . In the ith line , an integer k comes first , presenting the number of assistants who works detective i , then there are k integers . The jth number x means this assistant is assigned to transport message from detective i to detective x .  For the detectives, L is numbered 1 and other detectives are numbered 2 to n.  For the assistants , they are numbered from 1 to m by the order they appeared in the input file.  A case with n = 0 and m = 0 indicates the end of the input file, and should not be processed by your program..  You can assume that the input file is valid , which means there are exactly m assistants appearing in each test case  

   The input contains only one case.  The first line specifies two number   N and   M (1 ≤   N,   M ≤ 5000). The next   N lines will be the words and the functions. Every line contains a word and its function, separated by a space. The next   M lines will be the sentences -- one sentence per line. Each sentences contains at most 20 words. Every word in the sentences will appear in the dictionary.  

   The input contains many test cases ended with   EOF.  The first line of each test case is   N (1 ≤   N ≤ 10) and   R (1 ≤   R ≤ 1000), standing for the number of bombs and the radius of the base. The center of the base is always at (0,0). The second line of each test case is two real numbers standing for the initial place of YYF.  In the next   N lines, each contains two real numbers standing for the initial place of a bomb.  It is guaranteed that all the initial places is in the base.  

 仅一行，包括R,X,Y，以逗号","分隔，R为16进制表示的32位整数，X,Y在0-31之间且Y>=3，(Y-X)的绝对值>=3，保证两次置位不会重合

 最多不超过100个数据集组成，每个数据集之间不会有空行，每个数据集由3部分组成:     起始行：START  密码消息：由1到200个字符组成一行，表示凯撒发出的一条消息. 结束行：END   在最后一个数据集之后，是另一行：ENDOFINPUT

 第一行为一个整数T（T<=10），代表总共需要转换的时间日期字符串的数目。  接下来的总共T行，每行都是一个需要转换的时间日期字符串。

 M为行数，N为列数，其中M，N都为大于0的整数。

 输入包含多组数据，以EOF结束  每组数据第一行为不含空格的源字符串，长度小于256；接下来的一行或多行都是关键字串（长度小于16），一直到END结束。“NULL”表示关键字串为空，此时输出的拷贝后的长度应为0，拷贝后的字符串为空串（也用”NULL”表示，见下文）。

 输入包含多组数据，以EOF结束  每组数据共两行。  第一行共四个 十进制整数，分别为协议格式要求的： <SlaveAddress, 1 Byte>,<Function, 1 Byte>,<Start Address, 2 Bytes>,<NumberofBytes, 2 Bytes>，以逗号“,”分开。  如：1,4,40,2  其中：1为SlaveAddress；4为Function；40为Start Address；2为NumberofBytes。  第二行为符合接收格式的数据帧（16进制表示），需从其中解析所接收的数据，其长度小于64个字符，浮点数数据最多为4个（即DataIEEE32数据项最多为32bytes）。  如: 010404420B999A7405  其中：01为SlaveAddress；04为Function；04为NumberofBytes； 420B999A 为DataIEEE32；7405为Checksum。

  There are multiple test cases.  The first line of each case is an integer N (N ≤ 30), representing the number of pillars. Next line contains two integers A and V, representing the starting point of Mars is (A,0) and the maximum speed is V per second. (10 ≤ A ≤ 100, 10 ≤ V ≤ 45) Next N lines contain 2 real numbers each, representing the X-Y position of the ith pillar. The input data in finished with a case of N=0.  

  The first line contains two integers N and K (K≤ N ≤ 20000), and a real number F. The master should choose exactly K machines among total N backend servers. The F is the size of the file.  The following N lines describe the details of each backend servers. Each line contains three real numbers, pi, bi and ci, representing the processing throughput, bandwidth and unit cost.  

  There are multiple test cases.For each test case,  The first line contains three integers representing the AM of Lancers, AM of Cavaliers and AM of Halberdiers.  The second line contains three integers representing the AA of Lancers, AA of Cavaliers and AA of Halberdiers.  The third line contains two integers representing N and M, the size of battlefields.  The following N lines describe the battlefields. Each line contains M element.  Each element could be:     'O'- Non-occupied-Grass field     'X'- Mountains     A character in 'A'-'F' and an integer-Occupied grass field ('A' for Facer's Lancers, 'B' for Facer's Cavaliers, 'C' for Facer's Halberdiers, 'D' for Enemy Lancers, 'E' for Enemy Cavaliers, 'F' for Enemy Halberdiers, the integer stands for the number of soldiers in that troops and the integer will be in the range of 1 to 100)  A test case starting with three zeros indicates the end of input data.  Note that both Facer and his enemy will have up to 10 troops.  

  The first line of input file contains two integers n and m(n,m ≤ 200), representing the number of applications and the number of servers.  The second line contains n integers, representing the required CPU demand (≤ 1000)for each application. The application is numbered from 0 to n-1.  The following m lines describe the details of each server. In the ith line, the first integer represents CPU capacity of this server( ≤ 10000), and the second integer ki represents the number of instances running on it. Following is ki ( ≤ n)integers, ai,0, ai,1,…,ai,ki, representing the running instances for application ai,0, application ai,1,…, application ai,ki.  

 第一行是一个整数,代表测试数据组数  每组测试数据共三行。   第一行，三个整数 M,N,T。其含义为：   每个司令部一开始都有M个生命元( 1 <= M <= 1000)  两个司令部之间一共有N个城市( 1 <= N <= 20 )  要求输出从0时0分开始，到时间T为止(包括T) 的所有事件。T以分钟为单位，0 <= T <= 1000   第二行：五个整数，依次是 dragon 、ninja、iceman、lion、wolf 的初始生命值。它们都大于0小于等于100   第三行：五个整数，依次是 dragon 、ninja、iceman、lion、wolf 的攻击力。它们都大于0小于等于100  

   The input may contain several cases.  The first line contains an integer   T (  T ≤ 100,000), indicating the number of test cases.  Then   T lines of test cases follow. For each line, it contains two integers   N and   K (1 ≤   N ≤ 1,000,000, 0 ≤   K ≤   N - 1) where   N is the size of array and   K is the number of Bubble Sort Rounds.  

  The first line contains 2 integers N and K (1 ≤ N ≤ 2000, 0 ≤ K ≤ 100), indicating the number of tasks and days respectively. This is followed by N lines; each line has the following format: hh_Li:mm_Li:ss_Li hh_Ri:mm_Ri:ss_Ri w Which means, the i-th task must be done from hh_Li : mm_Li : ss_Li to hh_Ri : mm_Ri : ss_Ri and its productivity score is w. (0 ≤hh_Li, hh_Ri ≤ 23, 0 ≤mm_Li, mm_Ri, ss_Li, ss_Ri ≤ 59, 1 ≤ w ≤ 10000). We use exactly 2 digits (possibly with a leading zero) to represent hh, mm and ss. It is guaranteed that the moment hh_Ri : mm_Ri : ss_Ri is strictly later than hh_Li : mm_Li : ss_Li.　 

  The first line of input contains the number n --- the number of cities in Wonderland (3 ≤ n ≤ 100 000). The following n-1 lines describe the roads. Each road is represented by two integers --- the indexes of two cities it connects. 

  The input contains several test cases. The first line of each test case contains an integer n(1<=n<=100000), The following n-1 lines each contains three integers u(0 <= u < n),v(0 <= v < n),w(0 <= w < 2^31), which means there is an edge between node u and v of length w.  

  There are several test cases in the input. The first line of each case contains an integer n, the number of pieces on the board. The following n lines, each line contains the location of the pieces and a character indicates the type of the pieces. The input is ended by n = 0. 

  The input contains multiple test cases.The first line of each case contains three integers N, M, K, representing the size of the chessboard. N and M will be in the range of [1ï¼Œ1000] and K equals either N or N-1. It is guaranteed that all input information is valid (So that (2, 1, 1) will not appear).The following line is a real number R, the radius of the coin.Input is ended with a case of N=M=K=0. 

  The input contains multiple test cases. The first line of each case is an integer N (2<=N<=600), representing the number of cities in the country. The second line contains one integer M (0<=M<=10000), which is the number of roads. The following M lines are the information of the roads. Each line contains three integers A, B and T, which means the road between city A and city B will cost time T. T is in the range of [1,500]. Next part contains N integers, which are either 1 or 2. The i-th integer shows the supporting leader of city i.  To simplify the problem, we assume that Mr. M starts from city 1 and his target is city 2. City 1 always supports leader 1 while city 2 is at the same side of leader 2.  Note that all roads are bidirectional and there is at most 1 road between two cities. Input is ended with a case of N=0. 

  The input contains multiple test cases.The first line of each case is an integer N, representing the size of the template is N*N (N could only be 3, 4 or 5).Next N lines describe the template.The following line contains an integer Q, which is the Scale Level of the picture.Input is ended with a case of N=0.It is guaranteed that the size of one picture will not exceed 3000*3000. 

  There are several cases in the input file, end by 0. For each case,The first line is an integer N (N<=10000), the number of players in your team.Then followed N lines, each line describes the rates of a batter, in the bat order.For each line, there are 5 real numbers, the rate of “bad bat”, the rate of “good bat”, the rate of “very well bat”, the rate of “excellent bat” and the rate of successful batting in the sacrifice way.The input is always valid. 

  There are several cases in the input file, end by 0. For each case,The first line is an integer N (N<=1000), the number of batting team players.The second line contains 4 integers K1, K2, K3 and K4.Then N lines followed, each line contains 2 integers, the coordinate of the ball's falling place after each player of batting team bats the ball. 

 The first line contains an integer T indicating the number of test cases, and then T test cases follows.  Each test case consists of two lines. The first line is an integer N (0 < N <= 50000) which represents the number of kids. The second line lists the height of all kids, in left to right order. It is guaranteed that every kid’s height is unique and less than 2 31 – 1 .  

 The first line is an integer indicating the number of test cases.  For each test case, the first line is an integer n representing the number of islands.(0 < n < 50)  Then n lines follow. Each line contains two integers x and y( -20 <= x, y <= 20 ) , indicating the coordinate of an island.

 There are multiple test cases, ended by 0.   For each test case:  The first line contains an integer n（1 <= n <= 15）, meaning the number of players in Avatar’s team. All players are numbered for 1 to n.   Then a n×n matrix A follows. Aij describes what result the player i will get if he is the jth batter.( i and j start from 1 )   Following is the meaning of the value of Aij:  0 means the result is “Out”  1 means the result is “Sacrifice”  2 means the result is “Bingle”  3 means the result is “Allrun”

 Several lines, each line has one pattern consist of only lowercase alphabetic characters. The length of the longest pattern is 10000. The input ends with a separate line of ‘0’. 

 The input contains several test cases, and each test case is given in the following format:  The first line contains an integer n (0 < n <= 5), indicating the number of enemy units in the game.  The second line are two integers (x0,y0) representing the position where POM stands.  The third line gives a vector (dx,dy) describing the flying direction of the arrow.  Then n lines follows, each describing an enemy unit. An enemy unit can be considered as a convex polygon and the polygon is given in the following format in a line:     m x1 y1 x2 y2…xm ym  m is the number of vertices(m <= 10), and (x1,y1)…(xm,ym) are the vertices coordinates of the polygon, given in counter-clockwise order.  The first enemy unit is the POM’s target.   The input ends with a zero in a separate line (n=0). All input numbers are integers that do not exceed 105 in magnitude. It is guaranteed that polygons do not contact or overlap, and the point (x0,y0) isn’t inside (or on) any polygons.

 Input contains several test cases. In the first line of each case, there are two integers N (N<=100) and M (M<=10000), representing the number of spots and the number of roads between them.   Next M lines describe all roads. In each line, there are three integers a, b and c (0<=a, b<N, 0<c<=10000), representing a road of length c between Spot a and Spot b. Pay attention that there may be more than one roads between two spots, as well as some roads may come into a self-loop (a=b).   The following line contains an integer P (0<P<=50), representing the total number of agents. Following N lines describe the probability matrix PT. PT(i,j) (0<= PT(i,j)<=1) represents the probability that robber can be captured by j FBI agents in Spot i when he comes to Spot i . We don’t give the leftmost column of the matrix for they are all zero, so the matrix only has P columns. In other words, the first number you read from the matrix is PT(0,1) .   The input file ends with a line that contains “0 0”.

 For each test case, first print an integer in a line, indicating how many students win the awards. Then print the names of those who win the awards in alphabetic order, each name in a line.

 The first line contains only one integer T indicates the number of test cases.  The following 2Ã—T lines represent T test cases. The first line of each test case is a integer N (0 < N *lt;= 100) which represents the number of tasks, and the second line contains N real numbers indicating the time needed for each task. The time is in milliseconds, greater than 0 and less than 10000000.

 Input consists of multiple test cases and ends with a line of “0”.  For each test case:  The first line contains a single integer n (0<n<=1000), representing the number of city scenic spots. Scenic spots are numbered form 1 to n.  Then n lines follows, and each line consists of n integers. These n lines make a matrix. If the element in the ith row and the jth column is 1(i≠j), it means that the direction of the road between spot i and spot j is from spot i to spot j. If that element is 0, it means that the road’s direction is from spot j to spot i. The numbers in the main diagonal of the matrix are all 0. (i and j start from 1)

 The first line of input contains a single integer P, (1 ≤ P ≤ 1000), which is the number of data sets that follow. Each data set consists of a single line containing the data set number, followed by a space, followed by 10 space separated decimal integers whose values are between 1 and 1000 inclusive. 

 The first line of input contains a single integer P, (1 ≤ P ≤ 1000), which is the number of data sets that follow. The first line of each data set contains the data set number, followed by a space, followed by  a decimal integer M, (1 ≤ M ≤ 10000), giving the total number of integers in the sequence. The remaining line(s) in the dataset consist of the values, 10 per line, separated by a single space. The last line in the dataset may contain less than 10 values.

 The first line of input contains a single integer P, (1 ≤ P ≤ 1000), which is the number of data sets that follow. Each data set consists of a single line containing three(3) decimal integer values: the problem number, followed by a space, followed by the number of balls B, (1 ≤ B ≤ 50), followed by a space and the number of floors in the building M, (1 ≤ M ≤ 1000).

 The first line of input contains a single integer P, (1 ≤ P ≤ 1000), which is the number of data sets that follow. The first line of each data set contains the data set number, followed by a space, followed by an odd decimal integer M, (1 ≤ M ≤ 9999), giving the total number of signed integers to be processed. The remaining line(s) in the dataset consists of the values, 10 per line, separated by a single space. The last line in the dataset may contain less than 10 values. 

 The first line of input contains a single integer P, (1 ≤ P ≤ 1000), which is the number of data sets that follow. Each data set is a single line that contains the data set number, followed by a space, followed by up to 80 decimal digits which is the input value.

 The first line of input contains a single integer P, (1 ≤ P ≤ 1000), which is the number of data sets that follow. Each data set is a single line that contains the data set number, followed by a space, followed by a decimal integer giving the number (n) of bits in the bit strings, followed by a single space, followed by a decimal integer (k) giving the desired adjacent bit count. The number of bits (n) will not be greater than 100 and the parameters n and k will be chosen so that the result will fit in a signed 32-bit integer.

 The first line of input contains a single integer P, (1 ≤ P ≤ 1000), which is the number of data sets that follow. The first line of each data set contains the data set number, followed by a space, followed by a decimal integer giving the number of points N, (3 ≤ N ≤ 50), in the set. The remaining lines in the data set contain the points in the set, at most 5 points per line (the last line may have fewer). Each point consists of 2 space separated decimal integer values representing the x and y coordinates respectively.

 The first line of input contains a single integer P, (1 ≤ P ≤ 1000), which is the number of data sets that follow. The first line of each data set contains the data set number, followed by a space, followed by a decimal integer giving the number vertices N, (3 ≤ N ≤ 50), of the polygon. The remaining lines in the data set contain the vertices, one per line in standard order. Each line contains the decimal integer x coordinate, a space and the decimal integer y coordinate.

 The first line of input contains a single integer N, (1 <= N <= 1000) which is the number of data sets that follow. Each data set consists of a single line of input containing the time in sexagesimal format.

 The first line of input contains a single integer N, (1 <= N <= 1000) which is the number of data sets that follow. Each data set consists of a single line of input containing a single positive integer for which the number of recursively palindromic partitions is to be found.

 The first line of input contains a single integer N, (1 ≤ N ≤ 1000) which is the number of datasets that follow.   Each dataset consists of six lines of input. The first line of input is the specification for the folded out cube as described above. This line is followed by five lines, each of which gives the specification of one answer image as described above.

 The first line of input contains a single integer N, (1 <= N <= 1000) which is the number of data sets that follow. Each data set consists of three lines of input. The first line contains a single integer K, (4 <= K <= 26), the number of keys which are to be used. The second and third lines contain 13 decimal values each giving the percent frequency of the letters A through Z in order.

 The first line of input contains a single integer N, (1 <= N <= 1000) which is the number of data sets that follow. Each data set consists of multiple lines of input. The first line contains the number of points P, (1 <= P <= 100) in the problem instance. Each succeeding line contains the centers of the cubes, eight to a line (except possibly for the last line). Each center is given as 3 integers, separated by commas. The points are separated by a single space.

 The first line of input contains a single integer N, (1 <= N <= 1000) which is the number of data sets that follow. Each data set consists of a single line of input containing 6 space separated floating point numbers x1 y1 x2 y2 x3 y3 giving the coordinates of the vertices of a triangle.

 The first line of input contains a single integer N, (1 <= N <= 1000) which is the number of data sets that follow. Each data set consists of a single line of input containing the two strings to be compared separated by a space.

 The first line of the input contains a single decimal integer, N, 1 <= N <= 50, the number of problem data sets to follow. Each data set consists of a single integer R, 1 <= R <= 20, for which we want a power of 2 ending in a string of R 1's and 2's.

 The input is a sequence of datasets. The end of the input is indicated by a line containing a zero.   Each dataset is formatted as follows.    k px1 py1 qx1 qy1 . . . pxk pyk qxk qyk hx hy  For all datasets, the size of the initial sheet is 100 mm square, and, using mm as the coordinate unit, the corners of the sheet are located at the coordinates (0, 0), (100, 0), (100, 100) and (0, 100). The integer k is the number of folding instructions and 1 <= k <= 10. Each of the following k lines represents a single folding instruction and consists of four integers p x i, p y i, q x i and q y i, delimited by a space. The positions of point P and Q for the i-th instruction are given by (p x i, p y i) and (q x i, q y i), respectively. You can assume that P != Q. You must carry out these instructions in the given order. The last line of a dataset contains two integers hx and hy delimited by a space, and (hx, hy) represents the position of the pinhole.   You can assume the following properties:   The points P and Q of the folding instructions are placed on some paper segments at the folding time, and P is at least 0.01 mm distant from any borders of the paper segments.  The position of the pinhole also is at least 0.01 mm distant from any borders of the paper segments at the punching time.  Every folding line, when inﬁnitely extended to both directions, is at least 0.01 mm distant from any corners of the paper segments before the folding along that folding line.  When two paper segments have any overlap, the overlapping area cannot be placed between any two parallel lines with 0.01 mm distance. When two paper segments do not overlap, any points on one segment are at least 0.01 mm distant from any points on the other segment.   For example, Figure 5 (a), (b), (c) and (d) correspond to the ﬁrst four datasets of the sample input.

 The first line of input contains a single integer N, (1 ≤ N ≤ 1000) which is the number of datasets that follow.   Each dataset contains a single decimal integer, the width, W, of the grid for this problem instance.

 The input file will contain multiple test cases. Each test case begins with a single line containing an even integer w (2 ≤ w ≤ 1000), the width of the tunnel, and an integer N (0 ≤ N ≤ 100), the number of obstacles. The next N lines each contain the description of a single obstacle. The ith obstacle is a simple polygon, specified on a single line containing an integer ni (3 ≤ ni ≤ 10), the number of vertices, followed by ni pairs of integers, xij and yij (0 ≤ xij ≤ 1000 and -w/2 ≤ yij ≤ w/2 for j = 1, ..., ni ), specifying the coordinates of the vertices in counterclockwise order. Note that obstacles in the input may touch or even overlap. However, you are guaranteed that R2D2’s initial location will not touch or overlap any obstacle. The vertices of each polygon are unique, no two nonconsecutive edges of the polygon intersect (even at their endpoints), and each polygon is guaranteed to have nonzero area. The end-of-input is denoted by an invalid test case with w = N = 0 and should not be processed.

 The first line of input to your program is a single integer n (0 < n < 100), giving the number of data sets â€” one for each set of problems. Following that are exactly n lines, giving information about each data set. The first number is the number of problems in that dataset as an integer k (5 < k < 15). On the same line, separated by single spaces, are k integers, all between 1 and 300 inclusive, giving the estimated time required to solve each problem. The problems themselves are labeled by alphabetic characters starting with A. Note that there are exactly 300 minutes in the contest.

 The first line contains the integer t (1 ≤ t ≤ 350), the number of cases. Each case starts with a line containing n and c. Following this line is one line per deployed bot; that line contains two floating point values, separated by a single space, giving the Cartesian coordinates of the bot. Each such value will be between 0.0 and 10.0, inclusive (NOTE: the Sample Input shows integer values for brevity).

 The input is a sequence of chemical equations (without coeﬃcients) of the following syntax in the Backus-Naur Form:   &ltchemical_equation> ::= &ltmolecule_sequence> "->" &ltmolecule_sequence>  &ltmolecule_sequence> ::= &ltmolecule> | &ltmolecule> "+" &ltmolecule_sequence>  &ltmolecule> ::= &ltgroup> | &ltgroup> &ltmolecule>  &ltgroup> ::= &ltunit_group> | &ltunit_group> &ltnumber>  &ltunit_group> ::= &ltchemical_element> | "(" &ltmolecule> ")"  &ltchemical_element> ::= &ltuppercase_letter> | &ltuppercase_letter> &ltlowercase_letter>  &ltuppercase_letter> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"  &ltlowercase_letter> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"  &ltnumber> ::= &ltnon_zero_digit> | &ltnon_zero_digit> &ltdigit>  &ltnon_zero_digit> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"  &ltdigit> ::= "0" | &ltnon_zero_digit>   Each chemical equation is followed by a period and a newline. No other characters such as spaces do not appear in the input. For instance, the equation   Ca(OH) 2 + CO 2 -> CaCO 3 + H 2O   is represented as   Ca(OH)2+CO2->CaCO3+H2O.   Each chemical equation is no more than 80 characters long, and as the above syntax implies, the    ’s are less than 100. Parentheses may be used but will not be nested (maybe a good news to some of you!). Each side of a chemical equation consists of no more than 10 top-level molecules. The coeﬃcients that make the equations correct will not exceed 40000. The chemical equations in the input have been chosen so that 32-bit integer arithmetic would suﬃce with appropriate precautions against possible arithmetic overﬂow. You are free to use 64-bit arithmetic, however.    The end of the input is indicated by a line consisting of a single period.    Note that our deﬁnition of &ltchemical_element> above allows chemical elements that do not exist or unknown as of now, and excludes known chemical elements with three-letter names (e.g., ununbium (Uub), with the atomic number 112). 

 The input file will contain multiple test cases. Each test case begins with a single line containing two integers: N (0 ≤ N ≤ 50), the number of junctions not including the positive and negative terminals, and M (1 ≤ M ≤ 200), the number of components in the circuit diagram. The next M lines each contain a description of some component in the diagram. The ith component description contains three fields: pi, the positive junction to which the component is connected, ni, the negative junction to which the component is connected, and an integer Ii (1 ≤ Ii ≤ 100), the minimum amount of current required for component i to function. The junctions pi and ni are specified as either the character ‘+’ indicating the positive terminal, the character ‘-’ indicating the negative terminal, or an integer (between 1 and N) indicating one of the numbered junctions. No two components have the same positive junction and the same negative junction. The end-of-file is denoted by an invalid test case with N = M = 0 and should not be processed.

 The input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. Each dataset is formatted as follows.    w d h1 h2 ... hw h1' h2' ... hd'  The integers w and d separated by a space are the numbers of columns and rows of the grid, respectively. You may assume 1 <= w <= 10 and 1 <= d <= 10. The integers separated by a space in the second and third lines specify the shape of the artwork. The integers h i (1 <= h i <= 20, 1 <= i <= w) in the second line give the front view, i.e., the maximum heights of cubes per each column line, ordered from left to right (seen from the front). The integers h i ' (1 <= h i ' <= 20, 1 <= i <= d) in the third line give the side view, i.e., the maximum heights of cubes per each row line, ordered from left to right (seen from the right-hand side).

 The input consists of multiple datasets, each in the following format.    n α1 β1 α2 β2 . . . αn βn γ δ  n is a positive integer indicating the number of pairs. αi and βi are separated by a single space. You may assume that 1 <= |αi| < |βi| <= 10 for any i (|s| means the length of the string s), αi = αj for any i = j, n <= 10 and 1 <= |γ| < |δ| <= 10. All the strings consist solely of lowercase letters. The end of the input is indicated by a line containing a single zero.

 The input is a sequence of datasets. Each dataset is formatted as follows.    n t1 c1 . . . tn cn  n is an integer (1 <= n <= 50) that represents the number of swimmers. ti and ci are integers (1 <= ti <= 300, 1 <= ci <= 250) that represent the natural pace in times to swim from one end to the other and the number of planned laps for the i-th swimmer, respectively. ti and ci are separated by a space.   The end of the input is indicated by a line containing one zero.

 The input is a sequence of datasets, each of which is formatted as follows.    n m x1 y1 . . . xn yn xn+1 yn+1 . . . xn+m yn+m  

 The input is a sequence of datasets. A dataset is a line containing six integers x1, y1, x2, y2, x3 and y3 in this order, separated by a space. The coordinates of the vertices of the given triangle are (x1, y1), (x2, y2) and (x3, y3), respectively. You can assume that the vertices form a triangle counterclockwise. You can also assume that the following two conditions hold.   All of the coordinate values are greater than -1000 and less than 1000.  None of the Malfatti circles of the triangle has a radius less than 0.1.   The end of the input is indicated by a line containing six zeros separated by a space.

 The input is a sequence of multiple datasets. Each dataset begins with a line which consists of two integers, m and n: the number of features, and the number of objects, respectively. You can assume 0 < m <= 11 and 0 < n <= 128. It is followed by n lines, each of which corresponds to an object. Each line includes a binary string of length m which represent the value (“yes” or “no”) of features. There are no two identical objects.   The end of the input is indicated by a line containing two zeros. There are at most 100 datasets.

 The input consists of multiple datasets, followed by a line containing two zeros separated by a space. Each dataset has the following format.    w h a11 ... a1w ... ah1 ... ahw  w is the number of the rail units in a row, and h is the number of those in a column. aij (1 <= i <= h, 1 <= j <= w) is one of uppercase letters ‘S’, ‘C’, ‘L’ and ‘R’, which indicate the types of the rail unit at (i, j) position, i.e., straight, curve, left-switch and right-switch, respectively. Items in a line are separated by a space. You can assume that 2 <= w <= 6, 2 <= h <= 6 and the sum of the numbers of left-switches and right-switches is greater than or equal to 2 and less than or equal to 6.

 The input is a sequence of datasets. The end of the input is indicated by a line containing a single zero. Each dataset is formatted as follows.      Here, n is the size of the grid. That means that the grid is comprised of n * n areas. You may assume 1 <= n <= 5. The rest of the dataset consists of n lines of n letters. Each letter aij specifies the state of the area at the beginning: ‘#’ for infection, ‘.’ for free of virus, and ‘@’ for the initial location of the vehicle. The only character that can appear in a line is ‘#’, ‘.’, or ‘@’. Among n * n areas, there exists exactly one area which has ‘@’.

 There will be several test cases. Each test case will begin with a line with a single capital letter, indicating the special piece which must be moved off of the board. The next 6 lines will consist of 6 characters each. These characters will either be a '.' (period), indicating an empty square, or a capital letter, indicating part of a piece. The letters are guaranteed to form pieces that are 1x2, 1x3, 2x1 or 3x1, and no letter will be used to represent more than one piece on any given board. The letter indicating the special piece is guaranteed to correspond to a 1x2 piece somewhere on the board. The end of data is indicated by a single '*' (asterisk) on its own line.

 There will be several test cases. Each test case will consist of twelve real numbers, with no more than 3 decimal places each, on a single line. Those numbers will represent, in order:    AX AY BX BY CX CY DX DY EX EY FX FY  where point A is (AX,AY), point B is (BX,BY), and so on. Points A, B and C are guaranteed to NOT be collinear. Likewise, D, E and F are also guaranteed to be non-collinear. Every number is guaranteed to be in the range from -1000.0 to 1000.0 inclusive. End of the input will be signified by a line with twelve 0.0's.

 There will be multiple test cases. Each test case begins with a line containing a single integer N (1 ≤ N ≤ 50), the number of guards available. There will then be N blocks of data, one for each guard.   Each block provides the preferences of one guard. A block begins with two integers, K (1 ≤ K ≤ 50) and M (1 ≤ M ≤ 1440), in that order; K is the number of time intervals specifying when the guard is available for work, and M is the maximum number of minutes s/he is able to work each day. The next K lines each contains the starting and ending time, in that order, of a time interval where the guard is available, separated by whitespace. These time intervals may overlap. The union of all K time intervals provides the complete set of times at which the guard is available.   A starting or ending time is formatted as HH:MM (00 ≤ HH ≤ 23, 00 ≤ MM ≤ 59). Midnight is represented by 00:00. When the ending time is smaller than the starting time, it means the guard is available for working past midnight. For example, the interval “23:00 03:00” means the guard is available from 11pm at night to 3am in the morning. If the starting and ending times are equal, then the guard is available for work during any time intervals throughout the day. The last test case is followed by a line with a single 0.

 There will be multiple test cases. Each test case begins with a line containing two integers N (1 ≤ N ≤ 1000) and D (1 ≤ D ≤10 6). The next N lines each contain a single integer, giving the heights of the N trees, in the order that they should be planted. Within a test case, all heights will be unique. The last test case is followed by a line with two 0's.

 There will be multiple test cases. Each case is on a single line containing seven integers:    L W CX CY TX TY N  The first two integers, L and W (2 ≤ L,W ≤ 100), are the dimensions of the table. The next two pairs of integers are the coordinates (X, Y) of the cue and target balls, such that 0 < CX,TX < L, and 0 < CY,TY < W, and (CX,CY) is not the same as (TX,TY). The last integer N, (0 ≤ N ≤ 100), is the number of cushions that must be hit. The test cases will be followed by a line with seven 0's.

 There will be several test cases. Each test case will begin with a line with one integer, N (1 ≤ N ≤ 1000) which is the number of targets on the course. Each of the next N lines will describe a target with three integers, X, Y and P, where (X,Y) is a location on the course (1 ≤ X,Y ≤ 99, X and Y in meters) and P is the penalty incurred if the robot misses that target (1 ≤ P ≤ 100). The targets will be given in order – the first line after N is target 1, the next is target 2, and so on. All the targets on a given course will be unique – there will be at most one target point at any location on the course. End of input will be marked by a line with a single 0.

 There will be several test cases. Each test case will consist of two integers on a single line, N and M (2 ≤ N ≤ 10, 2 ≤ M ≤ 500). These represent the dimensions of the strip he wishes to fill, in inches. The data set will conclude with a line with two 0's.

 Your program will be given a sequence of configurations, one per line, of the form:   N C0X C0Y C1X C1Y T1X T1Y T1R T2X T2Y T2R ...   Here, N is the number of towers, (C0X,C0Y) is the start of path of the cell phone user, (C1X,C1Y) is the end of the path, (TkX,TkY) is the position of the kth tower, and TkR is its transmission radius. The start and end points of the paths are distinct.   The last problem is terminated by the line   0

 You will be given a number of documents to process. Each document is given as one line of text which may be empty. The input is terminated by the end of file.

 Each test case will consist of two lines. The first will be n, the number of digits in the number to be guessed. The maximum value of n will be 5. The second line will contain n triplets of numbers of the form m l p where m is the number of choices for a digit, l is the number of known candidates, and p is the probability that one of the known candidates is correct. In all cases 0 ≤ l < m ≤ 10 and 0.0 ≤ p ≤ 1.0. Whenever l = 0 (i.e., when there are no known candidates) p will always be 0.0. A line containing a single 0 will terminate the input.

 Each test case will consist of two lines. The first line will contain a string of digits to decompress. The second line will contain the initial dictionary used in the compression. This line will start with a positive integer n indicating the number of entries in the dictionary (1 ≤ n ≤ 100), followed by n alphabetic strings. The first of these will be paired with 0 in the dictionary (or 00 if n > 10), the second with 1, and so on. The last test case will be followed by a line containing a single 0.

 Each test case will consist of 4 lines. The first line will be a positive integer n (2 ≤ n ≤ 100) which is the number of cards laid out. The second line will be a string of n characters. A character U indicates the corresponding card is dealt face up and a character D indicates the card is face down. The third line is a string of n-1 characters indicating the order of the flips Bobby performs. Each character is either R, indicating a right flip, or L, indicating a left flip. The fourth line is of the form m q1 q2 . . . qm, where m is a positive integer and 1 ≤ qi ≤ n. Each qi is a query on a position of a card in the pile (1 being the top card, n being the bottom card). A line containing 0 indicates end of input.

 The first line of input for a test case will contain two positive integers r and c indicating the number of rows and columns in the matrix. After this will follow r lines each containing c positive integers. The values of r and c will be â‰¤ 500, each entry in the matrix will be no greater than 65,536, and the last test case is followed by a line containing 0 0.

 The first line of each test case will contain four positive integers n, m, s, and e, where n (2 ≤ n ≤ 100) is the number of traffic lights (numbered 0 through n-1), m is the number of roads between the traffic lights, and s and e (s = e) are the starting and ending lights for the desired trip. There will then follow n lines of the form g y r indicating the number of seconds that each light is green, then yellow, then red. (1 ≤ g, y, r ≤ 100.) The first of these lines refers to light 0, the second to light 1, and so on. Following these n lines will be m lines, each describing one road. These lines will have the form l1 l2 t, where l1 and l2 are the two lights being connected by the road and t is the time (in seconds, t ≤ 500) to travel the length of the road at full speed — you should add 5 to this value to obtain the travel time when driving the road beginning at a standstill. All roads are two way. At time 0, all lights are just starting their green period and your car is con- sidered to be at a standstill at traffic light s. Since it takes 5 seconds to get going, you may assume that g + y is never less than or equal to 5. The last test case is followed by a line containing 0 0 0 0 indicating end-of-input.

 Multiple test cases, ended by a line of "0 0 0". For each test case:   The first line contains three integers N,M and K ( 1 <= N <= 100, 1 <= M <= 1000, 1 <= K <= 10), tells the size of the pool and Facer must refill the oxygen bottle every K seconds.   Following are N lines describing the cells by top to bottom order. Each line contains M elements, separated by blanks, telling the information about the cells of a row, by left to right order. There are only two kinds of elements:     a char "v" followed by an integer T, meaning that there is a "speed changing machine" of value T (-20 <= T <= 20) in the correspondent cell.  a char "$" followed by an integer P, meaning that there is a "money box" of value P (-1000000 <= P <= 1000000) in the correspondent cell.  

 There are multiple test cases.   The first line in the input is a integer T indicating the number of test cases. (1 < T <= 400)    For each test case:   First line contains three integers P 1, P 2 and P 3 (0 <= P 1, P 2, P 3 <= 10000), meaning that Facer earns P 1 dollars after destroying a row of plants and earns P 2 dollars after destroying a sunflower, and Facer has P 3 dollars at the beginning.   Following are 5 lines describing the plants field by top to bottom order. Each line contains 5 integers, telling what's in the cells of a row, by left to right order. For those 5 integers:    "1" represents a sunflower.   "2" represents a bean.   "3" represents a magnet.   "4" represents a lettuce.

 There are several test cases and the input ended by a line of "0 0 0".    For each test case:   The first line contains three integers: n, m and k (1 <= n, m <= 30, 1 <= k <= 50). It means that there are n rows of seats in the classroom and there are m seats in every row. k is the number of students who come into the classroom trying to take up seats.   Following are n lines describing the seats by north to south order. Each line represents a row of seats and contains m integers, indicating the "feeling index" of every seat in that row, by west to east order. "Feeling index" can be fit in a 32-bit integer.   Then k lines follow (We call them k "student lines"). Each line is in the format of "hh:mm q" (0 <= hh < 24, 0 <= mm <= 59, 1 <= q <= 50) meaning that a student comes into the classroom at mm minutes past hh o'clock, trying to take up q seats. mm and hh are all two digit integers with possible leading zero, and q is also an integer. Please note that when a student enters the class room, he begins to do his seat taking job immediately and the job takes no time.   It is guaranteed that the "feeling index" of every seat is different and no students come into the classroom at the same time.

 The first line contains an integer T representing the number of test cases (0 < T <= 20). For each test case, the first line contains an integer N (3 <= N <= 20), representing the number of vertexes of the hole-polygon.   Next N lines describe the shape of the hole-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r 1 and r 2 (-100 <= r 1, r 2 <= 100), describing the position of a vertex.   The next line contains an integer M (3 <= M <= 20), representing the number of vertexes of the coin-polygon.   Next M lines describe the shape of the coin-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r 1 and r 2 (-100 <= r 1, r 2 <= 100), describing the position of a vertex.   The positions mentioned above are relative coordinates but not absolute values.

 The input consists of multiple test cases.   The first line of the input contains one integer T (1 <= T <= 10), which is the number of test cases. For each test case, there is one integer N (1 <= N <= 20) in the first line, representing the number of shopping malls.   The following N lines each contain three integers X,Y,R, representing that the mall has a shape of a circle with radius R and its center is positioned at (X, Y). X and Y are in the range of [-10000,10000] and R is a positive integer less than 2000.

 The input contains several test cases. For each test case, the first line contains a single integer N (0 < N <= 50000), representing the total number of posters. Each of the following N lines contains 8 integers x1, y1, x2, y2, x3, y3, x4, y4, showing details about one poster. (x1, y1) is the coordinates of the poster's bottom-left corner, and (x2, y2) is the coordinates of the poster's top-right corner. (x3, y3) is the coordinates of the hole's bottom-left corner, while (x4, y4) is the coordinates of the hole's top-right corner. It is guaranteed that 0 <= xi, yi <= 50000 (i = 1...4) and x1 <= x3 < x4 <= x2, y1 <= y3 < y4 <= y2.   The input ends with a line of single zero.

 The input contains several test cases. The first line of each case contains two positive integers N and M (0 < N, M <= 100000). N is the length of Hamlet's pattern and M is the length of Laertes'.   The second line contains a string of length N, representing the pattern of Hamlet's. The third line contains a string of length M, representing the pattern of Laertes'. All the strings only contain uppercase letters `H' and `T'. The input ends by a line of two zeros.

 The input contains several test cases, ended by a line of `-1 -1'.   Each test case begins with a line of two integers n (1 <= n <= 10) and m (0 <= m <= 30), indicating the number of vertexes and edges in the graph. All vertexes are numbered from 0 to n - 1.   Then m lines follow. Each line contains two integers p and q (0 <= p, q < n), indicating there is an edge between vertex p and vertex q.   It is possible that the graph contains more than one edge between two vertexes and self-loops.

 There are several test cases.   The first line in the input is an integer T indicating the number of test cases (0 < T <= 10).    For each test case:   The first line contains an integer N, meaning there are N kinds of goods (0 < N <= 20). These N kinds are numbered from 1 to N.   Then N lines follow, each contains two integers Q and P, meaning that the price of the goods of kind Q is P. (0 < Q <= N, 0 < P <= 30)   The next line is a integer M (0 < M <= 20), meaning there are M "bargains".   Then M lines follow, each contains three integers N1, N2 and R, meaning that you can get an item of kind N2 by paying an item of kind N1 plus R gold coins. It's guaranteed that the goods of kind N1 is cheaper than the goods of kind N2 and R is none negative and less than the price difference between the goods of kind N2 and kind N1. Please note that R could be zero.

 The first line contains an integer indicating the number of test cases.    For each test case:   Line 1: It contains two positive integers: n and T (n <= 20, T <= 1000) meaning that there are n computers in the system numbered from 1 to n, and you task is to figure out that how many percentage of the file does every computer gets after T seconds from the beginning.   Line 2: It contains two positive integers: k and S (k <= n, S <= 2 20) meaning that at the beginning there are k servers, and the size of the file of our concern is S (KB).   Line 3: It contains k integers. It's a list of all servers' No.   Line 4 ~ n+3: These n lines form a matrix of size n x n. The j-th integer in the i-th row of the matrix represents the transfer speed (in KB/s, no more than 2 10) between computer i and computer j (i and j start from 1). The matrix is symmetrical and the integers on the diagonal are meaningless.   Line n+4 ~ 2n+3: Each line contains an online/offline pattern for a computer in the following format (These lines are in the ascending order of computer No.):      t online_time  1 offline_time  1 online_time  2 offline_time  2...online_time  t offline_time  t   t is an integer no more than 10 and the time given are all non-negative integers and in ascending order. During the time between online_time i and offline_time i, the computer is online and can download data from other computers or send data to other computers.   Line 2n+4: It contains one positive integer m, representing the number of download actions in the system.   Line 2n+5 ~ 2n+m+4: Each line contains two integers representing a download action in the following format:      download_time  i computer_id  i   At time download_time i, the computer_id i computer starts to download the file, where 0 <= download_time i <= T, 1 <= computer_id i <= n.   These lines are given in non-descending order of time. It's guaranteed that servers never try to download the file. It's ensured that at time download_time i the computer computer_id i is online (Though it's possible that it instantly go offline after issuing a download command).   When a client starts to download, it will try to connect to all servers and download data simultaneously from online servers. The client's download speed is the sum of all connections. We assume the construction of a connection to be instant and cost no time. Only data transfer is time consuming.   When a client goes offline, unfinished download task will be saved and continued when it's online next time. If a server goes online, all computers that are currently downloading will connect to it and download data from it. What's more, when a client becomes a server, it begins to send data to clients immediately.    NOTE: To simplify the problem, time used to download a file should be rounded up to integer (If the file size is 6KB and download speed is 5KB/s, the download task will cost 2 seconds instead of 1.2 seconds -- 5KB for the first second and 1KB for the next second).   Please note that all times given above are in seconds.

 The input consists of several test cases. The first line of input contains an integer c (1 <= c <= 200), giving the number of test cases. Then, each test case starts with an integer n (1 <= n <= 50 000), giving the number of subway stations in Nuremberg. Then follow n 1 lines, describing the subway net. Each of these lines contains three integers a, b, and t (1 <= a, b <= n, and 1 <= t <= 300), indicating that stations a and b are adjacent and that it takes t seconds to travel between them. This is followed by a line containing an integer m (0 <= m <= n), denoting the number of stations which you want to go to regularly. Then follow m lines. Each of these lines contains two integers a and f (1 <= a <= n, 1 <= f <= 500), where a is the station you want to visit and f is the number of times you want to visit this station in a year. No station will occur in this list more than once.

 The first line of the input holds the number of test cases c (1 <= c <= 200). Each test case consists of a single line. This line contains the digits (at least one, at most seven) that are on the paper snippets.

 The first line of the input contains the number c (1 <= c <= 200), the number of expressions. Each of the following c lines contains an expression according to the given syntax, without any whitespace.  Its tree representation contains at most 50 000 nodes.

 The first line of the input consists of an integer c (1 <= c <= 200), the number of test cases. Then follow two lines per test case.  Each test case starts with a line consisting of two integers d (1 <= d <= 1 000 000) and n (1 <= n <= 50 000), the divisor of the sum of the subsequences and the length of the sequence, respectively. The second line of a test case contains the elements of the sequence, which are integers between 1 and 1 000 000 000, inclusively.

 The input starts with a single number c (1 <= c <= 200) on one line, the number of test cases. Then each test case starts with one line with n (3 <= n <= 100), the number of points of the polyline. Then follow n lines with on the ith line two integers xi and yi ( -1 000 <= xi, yi <= 1 000), the consecutive points of the polyline. Next follows one line with an integer d (1 <= d <= 10), the depth of the fractal. Finally, there is one line with a floating point number f (0 <= f <= 1), the fraction of the length thatis traversed.  The length of each line segment of the polyline is smaller than the distance between the first point (x1, y1) and the last point (xn, yn) of the polyline. The length of the complete polyline is smaller than twice this distance.

 The first line of the input consists of a single integer c (1 <= c <= 200), the number of test cases.  Then follow the test cases, each beginning with a single line consisting of an integer n (1 <= n <= 200), the number of cars you are to consider in this test case. The remainder of each test case consists of n lines, one line per car, starting with a single upper case letter ("A" or "B"), giving the direction in which the car is going. Then follow, on the same line, two integers t (0 <= t <= 100 000) and d (1 <= d <= 100 000), giving the arrival time at the beginning of the road and the minimum travel time, respectively, both in seconds.  Within a test case, the cars are given in order of increasing arrival time, and no two cars will arrive at the same time.

 The input starts with a single number c (1 <= c <= 200) on one line, the number of test cases. Each test case starts with one line containing a number n (2 <= n <= 50 000), the number of inventors and rooms. The following n-1 lines contain the choices of the n-1 guests (excluding the organizer). For each inventor, there is a line containing two numbers a and b (1 <= a < b <= n), the two room numbers which are selected by the inventor. The last line of each test case consists of n integers v1, ... , vn (1 <= vi <= 1 000 000), where vi is the organizer's rating for room i.  

 On the first line of the input there is one integer c (1 <= c <= 200), the number of test cases. Each following test case consists of a single line with one integer n (1 <= n <= 10 000), the number of the tile we are curious about.

 The first line of the input consists of an integer c (1 <= c <= 200), the number of test cases. Then follow the test cases, one per line.  Each test case starts with an integer n (3 <= n <= 2 000), the number of given points. Then follow, on the same line, the coordinates of the points. Each point is specified by two integers x and y in the range -10 000 to 10 000, inclusively.

 The first line of input contains an integer c (1 <= c <= 200), the number of test cases. Each test case starts with a line containing two coordinate triples x0, y0, z0 and x1, y1, z1, the space coordinates of your departure point and destination. The next line contains an integer n (0 <= n <= 50), the number of wormholes. Then follow n lines, one for each wormhole, with two coordinate triples xs, ys, zs and xe, ye, ze, the space coordinates of the wormhole entry and exit points, respectively, followed by two integers t, d ( -1 000 000 <= t, d <= 1 000 000), the creation time t of the wormhole and the time shift d when traveling through the wormhole.  All coordinates are integers with absolute values smaller than or equal to 10 000 and no two points are the same.  Note that, initially, the time is zero, and that tunneling through a wormhole happens instantly. For simplicity, the distance between two points is deffned as their Euclidean distance (the square root of the sum of the squares of coordinate differences) rounded up to the nearest integer. Your friend's spaceship travels at speed 1.

 The input contains multiple test cases. Each test case starts with a line containing two integers n and t. The integer n is the number of line segments (n ≤ 1000) and t is the time-limit (t ≤ 10 6). Each of the next n lines specifies a line segment by giving three integers y, xs, and xt. Integer y indicates the row of that line segment (0 ≤ y ≤ 2000), and xs and xt are the x-coordinates of its end points (0 ≤ xs ≤ xt ≤ 10 6). The line segments are disjoint and do not have any intersections. A case of n = t = 0 shows the end of input and should not be processed.

 There are multiple test cases in the input. The first line of each test case is n (1 <= n <= 100), the number of words.  Each of the next n lines contains a string of at most 100 lower case characters.  The input terminates with a line containing 0.

 There are multiple test cases in the input. The first line of each test case contains two integers m and n, the size of the board (0< m, n <100). Following the first line, there are m lines with n integers denoting the color in each cell. All the colors are positive integer numbers less than 10000. The input is terminated with a single line containing two consecutive zeros.

 There are multiple test cases in the input. Each test case consists of a single line, "M N" (1 ≤ M, N ≤ 100) where M and N indicate the height and width (in units), respectively, of the input wall.   Each of the next M lines is a string of N digits which specifies a row in the wall. Each brick in a row is represented by a substring of the row (like s) such that every digit in s is the same, which is equal to the length of s too. For example, 333 and 22 are two bricks of length 3 and 2 respectively, but 111 specifies three bricks of length one. A 0 in a row means there is no brick in that place of wall. Note that the height of each brick is one. The input terminates with a line containing 0 0. You may assume that the input is correct. This means:  1) There is no brick such that the length of the brick does not conform to the digits in the brick (like 222 in the row 12221).  2) No brick can fall initially.

 The input contains a number of robot definitions. Each robot definition starts with a line containing n, the number of vertices in robotâ€™s polygon (n <= 100). The polygon vertices are specified in the next n lines (in either clockwise or counter-clock-wise order). Each of these lines contains two space-separated integers showing the coordinates of the corresponding vertex. The absolute value of the coordinates does not exceed 100. The case of n=0 shows the end of input and should not be processed.

 The input has multiple test cases. Each test case starts with a line containing an integer n (number of already landed spacecrafts), and a real number R. The land is small enough for us to be modeled by a two-dimensional plane, and (0,0) is conventionally the best point for us to land. Each of the next n lines specifies the location of a landed flying saucer by giving two real numbers x and y as the coordinates of its center.  The input ends with a case of n = R = 0 which must not be processed. Assume n â‰¤ 100, R > 0, and their absolute value does not exceed 1000.

 The input contains multiple test cases. Each test case starts with a line containing two integers n and m. The integer n is the number of line parties (n ≤ 50) and m is the number of seats ACM party needs. The next n lines contain other parties’ information, each beginning with number of seats the party has, followed by a colon, a space, and a list of demands for that party. The list of demands is in the form of triplets (a, b, c) where 0 ≤ a ≤ 1, 0 ≤ b ≤ 2, and 0 ≤ c ≤ 6.  The triplets are separated by the string “ or ” and are terminated with a semicolon in the end (see the sample input). The input is terminated with a line containing 0 0.

 The input contains multiple test cases. Each test case starts with a line containing n, which is the number of given comparisons. Each of the next n lines gives a comparison in the form of “a X b Y” meaning that “a X ≤ b Y”. The last line of each test case contains the comparison query in the same form of “a X b Y” inquiring the comparison of “a X” and “b Y”.   A case of n = 0 shows the end of input and should not be processed. All integers in the input (except the last n which is 0) are positive and are not greater than 100. Fruit names are case-sensitive strings of (lowercase and uppercase) letters with length no more than 50.

 There are multiple test cases in the input. Each test case consists of n (1 < n < 8) and m (1 < m < 8). The input terminates with a line containing 0 0.

 Input file contains two descriptions of convex polyhedra.  The first line of each description contains integer number n - the number of vertices of the polyhedron (4 <= n <= 60). The following n lines contain three integer numbers xi, yi, zi each - the coordinates of the polyhedron vertices (-10 4 <= xi, yi, zi <= 10 4). It is guaranteed that the given points are vertices of a convex polyhedron, in particular no point belongs to the convex hull of other points. Each polyhedron is non-degenerate.  The two given polyhedra have no common points.

 As many as 1000 lines, each line contains 2 integers A and B separated by a space. Input is terminated when A = B = -1 (Do not process this line).

 The first line of the input file contains two integer numbers n and m (1 <= n <= 1 000 000, 1 <= m <= 2 000) - the number of button presses and the number of elevator cars to choose from. The following m lines describe elevator cars. Each line contains two integer numbers ui and di (1 <= ui, di <= 1 000).

 The first line of the input file contains two integer numbers n and m (1 <= n <= 10 000, 1 <= m <= 10), the number of rows and columns in the table. The following n lines contain table rows. Each row has m column values separated by commas. Column values consist of ASCII characters from space (ASCII code 32) to tilde (ASCII code 126) with the exception of comma (ASCII code 44). Values are not empty and have no leading and trailing spaces. Each row has at most 80 characters (including separating commas).

 The first line of the input file contains a single integer n (1 <= n <= 100) - the number of processes.  The following n lines describe resources that each process needs. Each resource is designated with an uppercase English letter from L to Z, so there are at most 15 resources. Each line describing process contains two different resources separated by a space.

 The first line of the input file contains two integer numbers n (1 <= n <= 100) - the number of new words you can add to the dictionary and m (1 <= m <= 1 000) - the number of words you will play the game with. The following m lines contain original words. Each word consists of at most 100 uppercase letters from A to Z.

 The first line of the input file contains three integer numbers - r, c, and n, where r, c (2 <= r, c <= 300) are the dimensions of the initial matrix, n (0 <= n < 10 100) is the number of turns Pavel makes.  The following r-1 lines contain garbling map with c-1 characters R, L, or N on a line.

 The input file contains a single line with a string of n digits "0" and "1" (2 <= n <= 100). This line of digits represents the pattern of rounds that were loaded into the gun's chambers. "0" represent an empty chamber, "1" represent a loaded one. In this representation, when cylinder rotates before a shot, the next chamber to the right gets aligned with the barrel for a shot. Since the chambers are actually located on a circle, the first chamber in this string follows the last one. There is at least one "0" in this string.

 The first line of the input file contains a single integer number n (2 <= n <= 100) - the number of points in the ski resort. The following n lines of the input file describe each point of the ski resort numbered from 1 to n. Each line starts with a single integer number mi (0 <= mi < n for i from 1 to n) and is followed by mi integer numbers aij separated by spaces. All aij are distinct for each i and each aij (1 <= aij <= n, aij   i) represents a slope going downwards from point i to point aij . Each point in the resort has at least one slope connected to it.

 The first line of the input file contains three integer numbers - k, n, and m, where k (0 <= k <= n) is the number of correctly answered questions, n (1 <= n <= 100) is the total number of questions, m (1 <= m <= 10) is the number of question categories. The following m lines of the input file contain one integer number from 0 to 100 (inclusive) on a line - percentages of the number of the correct answers in each category. The input file always corresponds to some valid set of wi and ni.

 The first line contains n, the number of intervals composing the set K (1 <= n <= 10 000).  Each of the next n lines contains two positive integers ai and bi that describe the interval [ai, bi] (i. e. the set of positive integers between ai and bi, inclusive), where 1 <= ai <= bi <= 10 18. Also, for i   [2..n]: ai >= b(i-1) + 2.

 Each test case starts with a line indicating the number n of houses (1 <= n <= 50 000). The next n lines describe the positions of the houses; each of these lines contains two floating point numbers x and y ( 200 000 <= x, y <= 200 000), the coordinates of a house in meters. All houses are at different positions.  A blank line follows each case. A line with n = 0 indicates the end of the input; do not write any output for this case.

 On the first line of the input is a positive integer, the number of test cases. Then for each test case:  A line with a single positive integer n < 10 5, the number of mines in the minefield.  n lines, each containing two integers, the x and y coordinates (in meters) of each mine relative to Jones' current location. |x|, |y| < 10 5. No two mines have the exact same coordinates.

 The input has several test cases. Each case begins with a line containing a number N (1 <= N <= 1 000), followed by N lines, which contain either DROP m or TAKE m, where m > 0 is the number of plates to take or drop. DROP m represents that the next event is the waiter bringing m plates to Tom, so he has to drop them on the table, while TAKE m represents that the next event is Tom taking m plates from the table and passing them along in the right order. You can assume that he never receives a TAKE m instruction when there are fewer than m plates on the table, and that the sum M of all values of m corresponding to DROP operations does not exceed 100 000. Note that there might be plates left on Tom's table when the last request is issued, as Tom might be relieved of his duty to stay until the restaurant closes.  The input ends with a line with N = 0, which must not be processed.

 The input has at most 500 lines, one for each test case. Each line contains three integers n (1 <= n <= 1 000), m (1 <= m <= 1 000), and v (0 <= v <= n). The last line of input will hold the values 0 0 0 and must not be processed.

 The input consists of a series of lines, each containing an integer N (1 <= N <= 501), the initial score of both players. A case with N = 0 marks the end of the input and must not be processed.

 Each test case consists of a string of even length between 2 and 52, inclusive, representing the DNA structure of an alien bacterium. All characters are letters. There will be one case per line in the input. The last line contains the word "END" and must not be processed.

 The input consists of several test cases. Each test case begins with a line containing two integers W and H (1 <= W, H <= 30). These integers represent the width W and height H of the graveyard. The next line contains an integer G (G >= 0), the number of gravestones in the graveyard, and is followed by G lines containing the positions of the gravestones. Each position is given by two integers X and Y (0 <= X < W and 0 <= Y < H).  The next line contains an integer E (E >= 0), the number of "haunted holes", and is followed by E lines. Each of these contains five integers X1, Y1, X2, Y2, T. (X1, Y1) is the position of the "haunted hole" (0 <= X1 < W and 0 <= Y1 < H). (X2, Y2) is the destination of the "haunted hole" (0 <= X2 < W and 0 <= Y2 < H). Note that the origin and the destination of a "haunted hole" can be identical. T (10 000 <= T <= 10 000) is the difference in seconds between the moment somebody enters the "haunted hole" and the moment he appears in the destination position; a positive number indicates that he reaches the destination after entering the hole. You can safely assume that there are no two "haunted holes" with the same origin, and the destination cell of a "haunted hole" does not contain a gravestone. Furthermore, there are neither gravestones nor "haunted holes" at positions (0,0) and (W-1,H-1). The input will finish with a line containing 0 0, which should not be processed.

 The first line of each case gives the number of gates n (1 <= n <= 1 000). The next line contains two floating point numbers, the Cartesian coordinates x and y of the starting position, in that order. Next come n lines with three floating point numbers each, y x1 x2, meaning that the next gate is a horizontal line from (x1, y) to (x2, y). You can safely assume that x1 < x2. The values of y are strictly decreasing and are always smaller than that of the starting position. The last gate represents the finish line. All coordinates are between -500 000 and 500 000, inclusive. A value of 0 for n means the end of the input. A blank line follows each case.

 The first line of each test case is an integer n (1 <= n <= 13), meaning that you have 2 n pairs of computers to connect, as described above. A line with n = 0 marks the end of the input and should not be processed.  Each line with n > 0 will be followed by another line containing 2 n integers. The i-th integer (0 <= i < 2 n) will be the computer in the topmost row that the i-th computer in the bottommost row needs to communicate with.

 Each test case starts with two integers denoting the number of phone calls N (1 <= N < 10 000) and the number of intervals M (1 <= M < 100). This is followed by N lines describing the telephone calls, each one consisting of four integers Source, Destination, Start and Duration. Source and Destination identify the pair of telephone numbers establishing the connection (0 <= Source, Destination <= 10 000 000). Start and Duration are the start time and duration of the call in seconds (1 <= Duration <= 10 000 and Start >= 0). You can safely assume that the sum of Start and Duration fits into a 32-bit signed integer.  Afterwards follow M lines containing the time intervals the police are interested in, each on described by two integers Start and Duration, in the same format and with the same meaning and constraints as those in the telephone calls. The last test case is represented by N = M = 0 and must not be processed.

 The input contains several test cases. Each test case consists of a line with an integer m (m >= 1), the minimum number of repetitions, followed by a line containing a string s of length between m and 40 000, inclusive. All characters in s are lowercase characters from "a" to "z". The last test case is denoted by m = 0 and must not be processed.

 On the first line of the input is a positive integer, the number of test cases. Then for each test case:  A line with a single integer n < 10 5, the number of obstacles.  n lines, each containing:  - A single floating point number xi, the position of the obstacle in meters from the start.  - A string describing the obstacle, either "mine" or "spike".

 On the first line of the input is a positive integer, the number of test cases. Then for each test case:  A line with three integers ng, nr and ni (all < 10 5), the number of gears, rods and interlockings.  ng lines, each containing two integers 0 < ti < 100 and 0 <= ri < nr, the type number of gear i and the index of the rod it is on respectively.  ni lines, each containing two integers 0 <= aj < bj < ng, indicating that gears aj and bj are interlocked.

 On the first line of the input is a positive integer, the number of test cases. Then for each test case:  A line containing the forbidden word to look for, consisting of at most 20 upper case characters. This word can be formed exactly using all of Mikey's blocks.

 On the first line of the input is a positive integer, the number of test cases. Then for each test case:  A line containing two positive integers h,w <= 50, the height and width of the maze.  h lines of w characters each, the map of the cavern our protagonist made, in which:  - '#' is a wall or otherwise impassible space.  - '.' is an empty space, of which there are at most 100.  - 'S' is our protagonist.  - 'X' is one of the heavy sarcophagi. There are at most two of these.  - 'B' is a button.  - 'E' is the exit. There is exactly one exit, on the edge of the map.  The edge of the map contains only walls and the exit.

 On the first line of the input is a positive integer, the number of test cases. Then for each test case:  A line with a single integer n < 1000, the number of warp trajectories.  A line containing 11 integers (between 0 and 10), the coordinates of the starting point of a journey.  A line containing 11 integers, the coordinates of the destination, which is different from the starting point.  n lines, each containing 12 integers, the coordinates of each warp trajectory followed by the year in which that trajectory was discovered. The year will be between 3075 and 100000.

 On the first line of the input is a positive integer, the number of test cases. Then for each test case:  A line containing a three positive integers, n < 16 and h, o < 2 31, specifying the order of the Hilbert curve, and the house numbers of the offered house and the local city planning office.

 On the first line of the input is a positive integer, the number of test cases. Then for each test case:  A line with two positive integers nr, nc < 1000, the number of rows and columns of rooms in the restaurant.  A line with two integers 0 <= er < nr and 0 <= ec < nc, the row and column of the room which is connected to the entrance.  A line with two integers 0 <= kr < nr and 0 <= kc < nc, the row and column of the room which is connected to the kitchen (via an elevator).  nr lines of nc - 1 non-negative integers < 100. The integer at position j of line i is the area in square meters of the passage between room (i, j) and room (i, j + 1).  nr - 1 lines of nc non-negative integers < 100. The integer at position j of line i is the area in square meters of the passage between room (i, j) and room (i + 1, j).

 Each line contains integers n (1 < n < 10 120) and k (0 < k < 10 8).

 The program input is at most 1 MB. Each data set in the file stands for a particular set of jobs. A data set starts with the number n (n <= 10000) of jobs, followed by the list of required servers for each job, in the format:  jobnumber: (nr_servers) s1 ... snr_servers The program prints the maximum number of jobs that can be processed.  White spaces can occur freely in the input. The input data are correct and terminate with an end of file.

 On the first line of the input file the number T of the test cases will be given. Each test case starts with a line with the positive integers N and M, separated by interval (4 <= N <= 4444). Each of the next M lines of the test case contains the labels of one of the pairs of crossroads connected by a lane.

 The first line of the input file contains the number T of test cases which are described next. The first line of a test case contains the number N (1≤N≤300) of procedures composing each of the two applications. Then, N lines follow, describing the first application. The j th of these N lines contains two integers, separated by a blank: P(1,j) and D(1,j). After this, other N lines follow, describing the second application. The j th of these N lines contains two integers, separated by a blank: P(2,j) and D(2,j). We have 1≤P(i,j)≤10 and 1≤D(i,j)≤15000 (i=1,2; 1≤j≤N). Notice that we may have P(i,j)=P(k,l) – this implies that the procedures (i,j) and (k,l) cannot be executed during overlapping time intervals (notice also that if i=k this would not matter, as the procedures of the same application must be executed sequentially).

 First line of the input contains the number of test cases. For each test case, firstly two numbers L and N are given, where L is the required length of the shortest path and N is the number of lines that are given describing the maze. The following N lines describes the maze such as that each line describes a row of the maze. (Each row length is the horizontal dimension of the maze).

 Several test cases are given at the input. Each of them consists of a single line containing the pattern and the super-password strings separated by a white space.

 The first line contains single integer T â€“ the number of test cases. Each test case consists of a single line containing two integers A and B separated by a single space.

 The first line contains single integer T â€“ the number of test cases. Each test case starts with a line containing two integers N and M separated by a single space. The next line contains N integers Wk separated by single spaces. The following line contains N integers Ck separated by single spaces.

 The first line contains single integer T – the number of test cases. Each test case starts with a line containing two integers N and M separated by a single space. N is the number mentioned in the first rule. M is the number of lattice points on the world map already occupied by Brus’s army. Each of the following M lines contains two integers Xk and Yk separated by a single space. Each lattice point (Xk, Yk) is occupied by Brus’s army.

 The first line contains single integer T â€“ the number of test cases. Each test case consists of a single line containing three integers N, M and K separated by single spaces.

 输入包含多行数据  每行数据是一个字符串，格式是"a/boc/d"。   其中a, b, c, d是一个0-9的整数。o是运算符"+"或者"-"。   数据以EOF结束  输入数据保证合法

 Each data set in the file stands for a particular set of stock prices. A data set starts with the length L (L â‰¤ 100000) of the sequence of numbers, followed by the numbers (a number fits a long integer).  White spaces can occur freely in the input. The input data are correct and terminate with an end of file.

 In the input file several test cases are given. For each test case on the first line the number N of interesting stars is given (1 ≤ N ≤ 10000). The second line of the test case contains the list of ID numbers of the interesting stars, separated by spaces. Each ID is a positive integer which is no greater than 10000. The input data terminate with the end of file.

 Each data set corresponds to an instance of the problem and starts with two integral numbers: 1≤N≤1000 and 1≤M≤1000000. The data set continues with M pairs ±i ±j of signed numbers, 1≤i,j≤N. Each pair encodes a poll answer as follows:        Accepted answers to the poll question Encoding   I would be happy if at least one from i and j is elected. +i +j   I would be happy if at least one from i and j is not elected. -i -j   I would be happy if i is elected or j is not elected or both events happen. +i -j   I would be happy if i is not elected or j is elected or both events happen. -i +j      The input data are separated by white spaces, terminate with an end of file, and are correct.

 The first line of input contains a single integer T – a number of test cases. Every test case starts with a line containing two integers separated by a single space – N and M. Each of the next M lines will contain two integers ai and bi separated by a single space – the labels of cities that i-th road connects.

 输入包含多行数据   每行数据是两个整数a, b (1 <= a, b <= 32767)  数据以EOF结束

 The input file consists of multiple pieces of land. Each piece is a simple polygon (that is, a polygon which does not intersect itself). A polygon description starts with a positive integer number k, followed by k vertices, where each vertex consists of two coordinates (floating-point numbers): x and y. Naturally, the last vertex is connected by an edge to the first vertex. Note that each polygon can be ordered either clockwise or counterclockwise. The input ends with a “0” (the number zero).

 Each data set in the file stands for a particular map and the associated character’s commands, as follows:  1) The number of towns on the map N (N ≤ 10000);  2) A list of commands of the form:    a) c towni townj, where towni and townj are integers from 1 to no_of_towns. The command means that towni and townj get connected. b) d towni, where towni is an integer from 1 to no_of_towns. The command means that towni gets disconnected. c) q towni townj, where towni and townj are integers from 1 to no_of_towns. The command stands for the question: is towni connected with townj? d) e, that ends the list of commands  Each command is on a separate line. Commands (a), (b), (c) can appear in any order. The towns’ connectivity is updated after each command of type (a) or (b). Each command of type (c) is processed according to the current configuration.

 The first line of the input contains a single integer T – a number of test cases. Each of the next T lines contains two integers separated by a single space – A and B.

 The input file contains several test cases. Each test case starts with an integer n (0 < n < 1000), that stands for the cardinality of S. The next line contains the numbers of S: x1, x2, ..., xn. It is known that each xi is an integer, 0 < xi < 2*10 9. The input data set is correct and ends with an end of file.

 Each data set corresponds to an instance of the problem above and contains two integral numbers – N and C – with values in the range from 0 to 10 9. The input data are separated by white spaces, are correct, and terminate with an end of file.

 The input will consist of one to twenty data sets, followed by a line containing only 0.  The first line of a dataset contains blank separated integers w s p, where w is the number of the winning space, 3 ≤ w ≤ 1,000,000,000, s is the maximum number of spaces to jump in each turn, 2 ≤ s ≤ 6, and p is the total number of chutes and ladders, 1 ≤ p ≤ 40.  The remaining lines of the data set consist of pairs of integers bi ei, for i = 1, 2, ... p. Each bi ei pair is the beginning space and ending space for a chute or ladder, so a turn with a jump to bi actually ends at ei. All the integers are positive and less than w, and none of these 2p numbers appears more than once. Following the rules of the game, it is possible to eventually reach space w, starting from space 0, for each dataset. The numbers bi are in increasing order. Numbers in these lines are separated by either a single blank or a newline.

 The input starts with line containing a single integer N, 0 < N < 30, which is the number of groups to process. Following this are N lines, each containing three distinct positive integers less than 100.

 The input consists of at least one data set, followed by a line containing only 0.  The first line of a data set contains three space separated integers N P S, where N is the number of DuLLs available, 1 ≤ N ≤ 20, P is the number of programs which can be executed, 1 ≤ P ≤ 9, and S is the number of state transitions recorded, 1 ≤ S ≤ 32.  The next line contains exactly N space separated integers representing the sizes in bytes of each of the DuLLs, 1 ≤ size ≤ 1,000. Each DuLL is implicitly labeled with a letter: ‘A’, ‘B’, ‘C’, ..., possibly extending to ‘T’. Therefore the first integer is the size of ‘A’, the second integer is the size of ‘B’, and so on.  The next P lines contain information about each of the programs, one program per line. Each line contains a single integer representing the size of the program in bytes, 1 ≤ size ≤ 1,000, followed by 1 to N characters representing the DuLLs required by that program. There will be a single space between the size of the program and the DuLL labels, but no spaces between the labels themselves. The order of the labels is insignificant and therefore undefined, but they will all be valid DuLL labels, and no label will occur more than once. Each program is implicitly labeled with an integer: 1, 2, 3, ... possibly extending to 9.  The final line of the data set will contain S space separated integers. Each integer will either be a positive number q, 1 ≤ q ≤ P, indicating that a new execution of program q has begun, or else it will be a negative number –q, 1 ≤ q ≤ P, indicating that a single execution of program q has completed. The transitions are given in the order they occurred. Each is a valid program number; if it is a negative number –q then there will always be at least one instance of program q running.

 The input will consist of one to twelve data sets, followed by a line containing only 0.  The first line of a dataset contains the number, t, of turns reported, 2 ≤ t ≤ 15.  The next line contains four blank separated strings for the hands of players 1, 2, and 3, followed by the cards for the gang.  The remaining t lines of the data set contain the data for each turn in order. Each line contains three blank separated tokens: the number of the player interrogated, the string of interrogation letters, and the answer provided.  All letter strings will contain only capital letters from A to R, in strictly increasing alphabetical order. The same interrogation string may appear in more than one turn of a game.

 The input consists of a series of lines, one for each web session. The first integer on a line is N, 0 < N â‰¤ 25, which is the number of guesses on this line. These guesses are all between 1 and 99, inclusive. The value N = 0 indicates the end of all the input.

 The input contains between 1 and 20 pairs of lines, the first for Player 1 and the second for Player 2. Both player lines contain the same number of symbols from the set {'R', 'P', 'S'}. The number of symbols per line is between 1 and 75, inclusive. A pair of lines each containing the single character 'E' signifies the end of the input.

 The input starts with a sequence of one or more positive integers less than (7)10 17, one per line. The end of the input is indicated by a line containing only 0.

 The input consists of at least one data set, followed by a line containing only 0.  The first line of a data set contains two space separated integers T R, where    T is the number of towers, 1 ≤ T ≤ 10 R is the number of line segments which comprise the road, 1 ≤ R ≤ 10  The next T lines each contain three space separated integers representing the X-coordinate, Y-coordinate, and power of one tower, respectively. The towers are implicitly labeled ‘A’, ‘B’, ‘C’, and so on.  The next line contains 2 (R + 1) integers which are the coordinates for the R + 1 points that define the road. The road starts on the first point and moves in straight line segments through all R remaining points.  All coordinates will be integers between 0 and 100, inclusive. No two coordinate pairs are equal. The power for a tower will be an integer between 1 and 1,000,000, inclusive.

 The input consists of one to twenty data sets, followed by a line containing only 0.  The first line of a data set contains three space separated integers N S T, where    N is the total number of squares on the board, 2 ≤ N ≤ 200. S is the maximum number of spaces you may advance in each turn, 2 ≤ S ≤ 10. T is the maximum number of turns allowed, where N + 1 ≤ ST and T ≤ N + 1.  The data set ends with one or more lines containing a total of N integers, the numbers on the board. Each number has magnitude less than 10000.

 There are several test cases. Input ends with three zeros.  For each test case:  The first line contains 3 integers, n, m and k. (0 < n <= 50,0 < m <= 4000, 0 < k < 1000)  Then m lines follows. Each line contains 2 integers, s and f, indicating that there is a road from station No. s to station No. f.

 The first line contains a integer t, indicating that there are t test cases following.(t<=20).  Each test case is a line consisting of two integer n and k.(2<=n<=10 8,1<=k<=10 5).

 The input contains several test cases.   Each test case begins with two integers, n and m (1 <= n, m <= 100), indicating that the screen has n lines, and each line consists of m characters.   The following n lines describe the whole screen you see. Each line contains m characters. For characters which are not on any window frame, we just replace them with '.' .   The input ends with a line of two zeros.   It is guaranteed that:   1) There is at least one window on the screen.  2) Any window's frame is at least 3 characters wide and 3 characters high.  3) No part of any window is outside the screen.

 Input contains multiple test cases. Each test case consists of three lines which are in the following format.  x w1 y w1 x w2 y w2 v w x t1 y t1 x t2 y t2 v t d l d u In the first line, (x w1, y w1) means the start position of Wind Chaser; (x w2, y w2) is another position in the highway which Wind Chaser will definitely pass through; and v w is the speed of the car. Wind chaser will drive to the end of the world along that infinite long highway.   In the second line, (x t1, y t1) is the start position of tornado; (x t2, y t2) is the turn-around position and v t is the tornado's speed. In other words, the tornado's center moves back and forth between (x t1, y t1) and (x t2, y t2) at speed v t.   The third line shows that if the observation distance is smaller than d l, it will be very dangerous; and if the observation distance is larger than d u, it will be a miss; otherwise it will lead to a perfect observation.   All numbers in the input are floating numbers.  -2000000000 <= x w1, y w1, x w2, y w2, x t1, y t1, x t2, y t2 <= 2000000000  1 <= v w, v t <= 20000  0 <= d l, d u <= 2000000   Note:  1. It's guaranteed that the observation distance won't be very close to d l or d u during the whole wind chasing process. There will be at least 10 -5 of difference.  2. Wind Chaser and the tornado start to move at the same time from their start position.

 Input contains multiple test cases. The first line of each test case contains two integers n (2<=n<=15) and m (2<=m<=n), which stands for the number of nodes in the graph and the number of nodes in the minimal ratio tree. Two zeros end the input. The next line contains n numbers which stand for the weight of each node. The following n lines contain a diagonally symmetrical nÃ—n connectivity matrix with each element shows the weight of the edge connecting one node with another. Of course, the diagonal will be all 0, since there is no edge connecting a node with itself.   All the weights of both nodes and edges (except for the ones on the diagonal of the matrix) are integers and in the range of [1, 100].   The figure below illustrates the first test case in sample input. Node 1 and Node 3 form the minimal ratio tree.      

 There are multiple test cases. Input ends with a line containing three zeros.  Each test case consists of 2 * n + 3 lines.  The first line contains three integers: n, m and k.(0<n<=100,0<m<=10000, 0<=k<=3000000)  The next n+1 lines stands for n + 1 west-east roads in north to south order. Each line contains m integers showing the welcome values of the road's m love-hate zones, in west to east order.  The last n+1 lines also stands for n + 1 west-east roads in north to south order. Each line contains m integers showing the lengths (in minutes) of the road's m love-hate zones, in west to east order.

 输入包含多行数据   每行数据是一个字符串，长度不超过1000  数据以EOF结束

 The input consists of several test cases and ends with a line containing a zero.  In each test case, the first line contains a integer N ( 1 ≤ N ≤ 100,000) indicating the total number of the weddings.  In the next N lines, each line contains two integers Si and Ti. (0 <= Si < Ti <= 2147483647)

 The first line of the input contains an integer T(1<=T<=20), indicating the number of test cases, followed by T lines each of which describes a test case.  Every test case consists of N + 1 integers. The first integer is N, the number of players. Then N distinct integers a1, a2 ... aN follow, indicating the skill rank of each player, in the order of west to east. (1 <= ai <= 100000, i = 1 ... N).

 The first line of the input contains an integer T(1<=T<=20), indicating the number of test cases. Each line after that is a test case. It contains three real numbers, H, D(1<=H,D<=1000) and V, indicating the height and bottom diameter of the timer, and the volume of water that flew out during the ceremony. That volume is guaranteed to be less than half volume of the container.

 The first line is an integer T indicating the number of test cases. (T <= 20)   For each test case:  The first line contains two integers: i and n. The elevator is on the i-th floor at first, and n is the total number of requests. (1 <= i <= 50, 1 <= n <= 100)  Then n lines follow. Each line contains three integers: t, s and d. It means that at the time of t-th second, a person on the s-th floor sends a request, and he wants to go to the d-th floor.

 The input consists of several cases. Every case is one line with two positive integer m and k(1<=m<=100,000,000, 1<=k<=100,000,000). m is Mike's number in the game, and k is the total number of people remained in the circle when Mike was going to be kicked out. (Mike was among those k people)   The input ends with a line containing two zero.

 The input consists of several test cases. Each test case is a single line representing a wrong equation. Each wrong equation is in the format of “A + B = C” (A, B and C are all numbers), and consists of no more than 100000 characters.  

 Input consists of T (1 <= T <= 20) test cases. Each test case is one line including three integers: α for slope angle, V for ball speed and f for the constant. (0 <= α < 90, 0 < V < 50, 0 < f < 1000).  

 Input consists of multiple test cases. Each test case is one line containing two integers. The first integer is n, and the second one is m. (0 < n <= 80, 0 <= m <= 10000).  Input ends by a line containing two zeros.

 Input contains multiple test cases. Each test case means one game. It starts with five numbers: W, H, w, h, n(0<W, H<=1000, 0<w<W, 0<h<H, n<=500) which stands for the width and height of the window, the width and height of the bricks and the number of bricks in the window.(The input ends by a line with five zeros) The next n lines shows the information of n bricks in the following format: xi, yi, pi(0<=xi<=W-w, 0<=yi<=H-h, 0<pi<=100). The first two float numbers stand for the coordinate of the lower left corner of the brick and the last integer stands for the points the brick owns. The last line contains two float number X, α(0<=X<=W, 0<α<180), which stands for the launch X-coordinate and launch angle (in degrees) of the striking ball.   It guarantees that  At any time, the distances between the ball and any corners of the bricks are always larger than 0.000001. Also, the distances between the ball and the window corners are always larger than 0.000001.

 Input will consist of several wagers. The first line of input to your program will contain the total number of parlay wagers as a single positive integer.  Each wager that follows will be represented by a series of lines.  The first line of each parlay wager contains the initial bet and the count of individual wagers as integers separated from each other by a single space.  The following lines represent the individual wagers, one per line. Each individual wager is given as its money line followed by a single space and the result of the wager (“Win”, “Tie”, or “Loss”).

 Input will consist of multiple datasets. Each dataset will consist of a single line with eight integers, as follows:     xL yL xU yU xA yA xB yB  describing the points L, U, A, and B. L and U are the lower-left corner and the upper-right corner of the city grid, respectively. A and B are the two points between which we wish to travel.  All input integers will be in the range from -1000 to 1000 (inclusive), with xL < xu and yL < yU. End of data will be signified by a line with eight zeros.

 The input consists of multiple datasets, each of which contains integers and specifies a value table and intervals for the histogram generator, in the following format.    n w v1 v2 . . . vn  n is the total number of value occurrences for the histogram, and each of the n lines following the first line contains a single value. Note that the same value may possibly occur multiple times.  w is the interval width. A value v is in the first (i.e. leftmost) interval if 0 ≤ v < w, the second one if w ≤ v < 2w, and so on. Note that the interval from 0 (inclusive) to w (exclusive) should be regarded as the leftmost even if no values occur in this interval. The last (i.e. rightmost) interval is the one that includes the largest value in the dataset.  You may assume the following.    1 ≤ n ≤ 100   10 ≤ w ≤ 50   0 ≤ vi ≤ 100 for 1 ≤ i ≤ n     You can also assume that the maximum value is no less than w. This means that the histogram has more than one interval.  The end of the input is indicated by a line containing two zeros.

 The input is a sequence of lines each of which contains three integers n, m and k in this order. They satisfy the following conditions.    1 ≤ n   2 ≤ m   0 ≤ k < nm   nm × mn < 100000000 (10  8)     The end of the input is indicated by a line containing three zeros.

 The input consists of multiple datasets, each of which is formatted as follows.    n s1 t1 u1 s2 t2 u2 . . . sn tn un  The first line contains a single integer n (2 ≤ n ≤ 10), representing the number of the watches. The three numbers si, ti, ui in each line are integers such that 0 ≤ si, ti, ui ≤ 59 and they specify the positions of the three hands by the number of ticks relative to an arbitrarily chosen position.  Note that the positions of the hands of a watch can be expressed in many different ways. For example, if a watch was stopped at the time 11:55:03, the positions of hands can be expressed differently by rotating the watch arbitrarily (e.g. 59 55 3, 0 56 4, 1 57 5, etc.) and as well by permuting the hour, minute, and second hands arbitrarily (e.g. 55 59 3, 55 3 59, 3 55 59, etc.).  The end of the input is indicated by a line containing a single zero.

 The input consists of a number of datasets. Each dataset is formatted as follows.    n x1a y1a x1b y1b x2a y2a x2b y2b . . . xna yna xnb xnb  In the first line, n represents the number of bars in the dataset. For the rest of the lines, one line represents one bar. Four integers xa, ya, xb, yb, delimited by single spaces, are given in each line. xa and ya are the x- and y-coordinates of one end of the bar, respectively. xb and yb are those of the other end. The coordinate system is as shown in Figure 5. You can assume 1 ≤ n ≤ 1000 and 0 ≤ xa, ya, xb, yb ≤ 1000.  The end of the input is indicated by a line containing one zero.        You can also assume the following conditions.    More than two bars do not overlap at one point. Every bar is used as a part of a digit. Non-digit forms do not exist on the floor. A bar that makes up one digit does not touch nor cross any bar that makes up another digit. There is no bar whose length is zero. 

 The input consists of multiple datasets, each in the following format.    N u v w x1 y1 z1 r1 . . . xN yN zN rN  The first line of a dataset contains a positive integer N which is the number of spheres. The next line contains three integers u, v and w separated by single spaces, where (u, v, w) is the direction of the laser ray initially emitted from the origin.  Each of the following N lines contains four integers separated by single spaces. The i-th line corresponds to the i-th sphere, and the numbers represent the center position (xi, yi, zi) and the radius ri.  N, u, v, w, xi, yi, zi and ri satisfy the following conditions.    1 ≤ N ≤ 100   -100 ≤ u, v, w ≤ 100   -100 ≤ xi, yi, zi ≤ 100   5 ≤ ri ≤ 30   u  2 + v  2 + w  2 > 0     You can assume that the distance between the surfaces of any two spheres is no less than 0.1. You can also assume that the origin (0, 0, 0) is located outside of any sphere, and is at least 0.1 distant from the surface of any sphere.  The ray is known to be reflected by the sphere surfaces at least once, and at most five times. You can assume that the angle between the ray and the line connecting the sphere center and the reflection point, which is known as the angle of reflection (i.e.   in Figure 6), is less than 85 degrees for each point of reflection.  The last dataset is followed by a line containing a single zero.

 The input is a sequence of datasets. A dataset is formatted as follows:    w d c11 . . . cw1 . . . c1d . . . cwd v1v2v3v4v5v6  The first line is a pair of positive integers w and d separated by a space. The next d lines are w-character-long strings c 11 ... c w1,... , c 1d ... c wd with no spaces. Each character c ij is one of the letters r, g, b, c, m, y, w and k, which stands for red, green, blue, cyan, magenta, yellow, white and black respectively, or a sign #. Each of r, g, b, c, m, y and # occurs once and only once in a dataset. The last line is a six-character-long string v 1v 2v 3v 4v 5v 6 which is a permutation of “rgbcmy”.  The integers w and d denote the width (the length from the east end to the west end) and the depth (the length from the north end to the south end) of a bed. The unit is the length of a side of a square. You can assume that neither w nor d is greater than 30.  Each character c ij shows the color of a square in the bed. The characters c 11, c w1, c 1d and c wd correspond to the north-west corner, the north-east corner, the south-west corner and the south-east corner of the bed respectively. If c ij is a letter, it indicates the color of the corresponding square. If c ij is a #, the corresponding square is colored white and is the initial position of the cube.  The string v 1v 2v 3v 4v 5v 6 shows the order of colors of squares to visit. The cube should visit the squares colored v 1, v 2, v 3, v 4, v 5 and v 6 in this order.  The end of the input is indicated by a line containing two zeros separated by a space.

 The input consists of a number of datasets, each giving a set of element strings and a text. The format of a dataset is as follows.    n m e1 e2 . . . en t1 t2 . . . tm  The first line contains two integers separated by a space. n is the number of element strings. m is the number of lines used to represent the text. n is between 1 and 12, inclusive.  Each of the following n lines gives an element string. The length (number of characters) of an element string is between 1 and 20, inclusive.  The last m lines as a whole give the text. Since it is not desirable to have a very long line, the text is separated into m lines by newlines, but these newlines should be ignored. They are not parts of the text. The length of each of these lines (not including the newline) is between 1 and 100, inclusive. The length of the text is between 1 and 5000, inclusive.  The element strings and the text do not contain characters other than lowercase letters.  The end of the input is indicated by a line containing two zeros separated by a space.  

 The input consists of multiple datasets, each of which describes a counterclockwise path on a cardboard to cut out a top. A path is indicated by a sequence of command lines, each of which specifies a line segment or an arc.  In the description of commands below, the current position is the position to start the next cut, if any. After executing the cut specified by a command, the current position is moved to the end position of the cut made.  The commands given are one of those listed below. The command name starts from the first column of a line and the command and its arguments are separated by a space. All the command arguments are integers.   start x y   Specifies the start position of a path. This command itself does not specify any cutting; it only sets the current position to be (x, y).   line x y   Specifies a linear cut along a straight line from the current position to the position (x, y), which is not identical to the current position.   arc x y r   Specifies a round cut along a circular arc. The arc starts from the current position and ends at (x, y), which is not identical to the current position. The arc has a radius of |r|. When r is negative, the center of the circle is to the left side of the direction of this round cut; when it is positive, it is to the right side (Figure 7). The absolute value of r is greater than the half distance of the two ends of the arc. Among two arcs connecting the start and the end positions with the specified radius, the arc specified is one with its central angle less than 180 degrees.   close   Closes a path by making a linear cut to the initial start position and terminates a dataset. If the current position is already at the start position, this command simply indicates the end of a dataset.  The figure below gives an example of a command sequence and its corresponding path. Note that, in this case, the given radius -r is negative and thus the center of the arc is to the left of the arc. The arc command should be interpreted as shown in this figure and, not the other way around on the same circle.        A dataset starts with a  start command and ends with a  close command.  The end of the input is specified by a line with a command  end.  There are at most 100 commands in a dataset and at most 100 datasets are in the input. Absolute values of all the coordinates and radii are less than or equal to 100.  You may assume that the path does not cross nor touch itself. You may also assume that paths will never expand beyond edges of the cardboard, or, in other words, the cardboard is virtually infinitely large.

 输入包含多行数据   每行数据包含3个整数A0, A1, A2 (0 <= A0, A1, A2 <= 32767)  数据以EOF结束

 The input consists of multiple datasets. Each dataset constitutes a pair of input lines, each representing a polynomial as an expression defined below.    A primary is a variable x, a sequence of digits 0 - 9, or an expression enclosed within ( ... ). Examples: x, 99, (x+1). A factor is a primary by itself or a primary followed by an exponent. An exponent consists of a symbol ^ followed by a sequence of digits 0 - 9. Examples: x^05, 1^15, (x+1)^3. A term consists of one or more adjoining factors. Examples: 4x, (x+1)(x-2), 3(x+1)^2. An expression is one or more terms connected by either + or -. Additionally, the first term of an expression may optionally be preceded with a minus sign -. Examples: -x+1, 3(x+1)^2-x(x-1)^2.  Integer constants, exponents, multiplications (adjoining), additions (+) and subtractions/negations (-) have their ordinary meanings. A sequence of digits is always interpreted as an integer constant. For example, 99 means 99, not 9 × 9.  Any subexpressions of the input, when fully expanded normalized, have coefficients less than 100 and degrees of x less than 10. Digit sequences in exponents represent non-zero values.  All the datasets are designed so that a standard algorithm with 32-bit two’s complement integers can solve the problem without overflows.  The end of the input is indicated by a line containing a period.

 The input consists of multiple datasets, followed by a line containing one zero. Each dataset has the following format.    n x1 y1 . . . xn yn  Every input item in a dataset is a non-negative integer. Items in a line are separated by a single space.  n is the number of the given points. xk and yk (k = 1, ..., n) indicate the position of the k-th point. The order of the points is meaningless. You can assume that 2 ≤ n ≤ 10, 0 ≤ xk ≤ 10, and 0 ≤ yk ≤ 10.

 The input file contains one or more lines of the code up to the end of file. All lines (including the last one) are terminated by a standard end-of-line sequence in the file. Each line contains at least one word, each word is 1 to 80 characters long (inclusive). Words are separated by one or more spaces. Lines of the code can have both leading and trailing spaces. Each line in the input file is at most 180 characters long. There are at most 1000 lines in the input file.

 The first ten lines of the input file contain the description of the binary operation  . The i-th line of the input file contains a space-separated list of ten digits - the j-th digit in this list is equal to (i - 1)   (j - 1).  The first digit in the first line is always 0.  The eleventh line of the input file contains two non-negative integers a and b (0 <= a <= b <= 10 18).

 4个不大于10的正整数。输入数据保证存在唯一解。

 The first line of the input file contains three integer numbers n, m, and k (1 <= n <= 50 000, 0 <= m <= 10 000, 1 <= k <= n). Here n is the number of vertices in the graph. Vertices are numbered from 1 to n. Edges of the graph are represented by a set of edge-distinct paths, where m is the number of such paths, k is the number of districts that the city must be partitioned into, n is divisible by k.  Each of the following m lines contains a path in the graph. A path starts with an integer number s i (2 <= s i <= 1000) followed by s i integers from 1 to n. These s i integers represent vertices of a path.  Adjacent vertices in a path are distinct. Path can go through the same vertex multiple times, but every edge is traversed exactly once in the whole input file. There are no multiedges in the graph (there is at most one edge between any two vertices).  The graph in the input file is a cactus.

 The first line of the input file contains a single integer number n (1 <= n <= 10 000) — the number of points under the dome. The following n lines describe points with three floating point numbers x i, y i, and z i per line — the coordinates of i-th point. All coordinates do not exceed 1000 by their absolute value and have at most 2 digits after decimal point. All zi are positive. There is at least one point with non-zero x i or y i.

 The first line of the input file contains  n — the number of construction teams (1 <=  n <= 4000). The second line contains  n integer numbers — the locations of the teams. Each team’s location is a positive integer not exceeding 10 9, all team locations are different.  The third line of the input file contains  m — the number of shelters (1 <=  m <=  n). The fourth linecontains  m integer numbers — the locations of the shelters. Each shelter’s location is a positive integer not exceeding 10 9, all shelter locations are different.  The amount of fuel that needs to be supplied to a team at location x that goes to a shelter at location y is equal to |x-y|.

 The first line of the input file contains two integer numbers n and m (1 <= n,m <= 1000). The second line of the input file contains n integer numbers pi (1 <= pi <= 10 000) separated by spaces. The third line of the input file contains m integer numbers qi (1 <= qi <= 10 000) separated by spaces.

 The input file contains space-separated list of five distinct card descriptions. Each card is described with two characters denoting its rank and suit, respectively. The ranks are denoted by ‘2’. . . ‘9’, ‘T’, ‘J’, ‘Q’, ‘K’, and ‘A’ (listed here in the ascending order). The suits are denoted by ‘C’, ‘D’, ‘H’, and ‘S’.

 The first line of the input file contains integers  n and  m —the number of rooms and passages, respectively (2 <=  n <= 100 000, 1 <=  m <= 200 000). The following  m lines describe passages, each passage is described with three integer numbers:  ai,  bi, and  ci — the numbers of rooms it connects and its color (1 <=  ai,  bi <= n, 1 <=  ci <= 10 9). Each passage can be passed in either direction. Two rooms can be connected with more than one passage, there can be a passage from a room to itself. It is guaranteed that it is possible to reach the room number  n from the room number 1.

 The first line of the input file contains a single integer n (3 <= n <= 50 000) â€” the number of watchtowers. The next n lines of the input file contain the Cartesian coordinates of watchtowers, one pair of coordinates per line. Coordinates are integer and do not exceed 10 6 by absolute value. Towers are listed in the order of traversal of their convex hull in clockwise direction.

 The first line of the input file contains two integer numbers  n and  m, where  n is the number of vertices in the graph (3 <=  n <= 9999,  n is odd),  m is the number of edges in the graph (2 <= m <= 100 000). The following  m lines describe edges of the graph, each edge is described by two integers  ai,  bi (1 <=  ai,  bi <= n,  ai !=  bi) â€” the vertex numbers connected by this edge. Each edge is listed at most once. The graph in the input file is connected, so there is a path between any pair of vertices.

 The input consists of multiple test cases, each test case is described on a line by itself, Each line starts with an integer N (1 <= N <= 20) the number of teams in the organization followed by N space separated positive integers representing the number of employees in each of the N teams. You may assume that X will always fit in a 32 bit signed integer. The last line of input starts with 0 and shouldn't be processed.

 The input begins with an integer t, the number of test cases. Then t test cases follow. For each test case, the first line contains three integers: N L D, where N denotes the number of weights at your disposal, L is the length of the binary representation of number W, and D is the modulus (1<=L<=N<=1000000, 2<=D<=100). The second line contains the value of W, encoded in the binary system as a sequence of exactly L characters 0 or 1 without separating spaces.

 一个5 × 5的二维数组，表示一个迷宫。数据保证有唯一解。

 Input starts with the number of test cases on a line by itself. Then a number of test cases; each test case is formatted as follows.     A BF program (possibly with extra letters and/or white space characters embedded anywhere in the text).  A white space and a dollar sign – ‘$’ – indicating end of BF program.  A space, the input stream, another space and a dollar sign terminator indicating the end of the input stream.  A new line.   A test case may span on multiple lines and each two consecutive test cases are separated by a blank line.   The  embedded text could be any characters except the dollar sign terminator, you should ONLY process the 8 commands and detect the end of program/input by the dollar signs, discard any other characters when processing. In the sample input only the relevant input is underlined, however in the real test cases there will be no signs of input termination except for the dollar signs.

 The first line of input contains T <= 50 the number of test cases, T test cases follow. Each test case starts with a line containing N (1 <= N <= 100) and M (0 <= M <= 100) the total number of players and the number of available gameâ€“plays respectively. M lines follow, each line describes a single game play and starts with an integer P (1 <= P <= N) the number of participating players followed by P space separated integers representing the players numbers. Players are number from 1 to N.

 Your program will be tested on at most 30 test cases, each test case is given as a string of at most 1000000 lowercase characters on a line by itself. The input is terminated by a line that starts with the string "END" (quotes for clarity).  

 The input begins with the integer t, the number of test cases. Then t test cases follow.   For each test case, the first line of the input contains one integer n (3 <= n <= 250 000) being the number of sections of the route. The second line of the input contains a sequence of n characters N, E, S or W with no spaces in between. Each character is a description of one section of the route. Character N, E, S or W means that Mirek walks 10 meters north, east, south or west respectively. You may assume that at least one shortcut exists for the given route.

 Input starts with the number of test cases, t such that 1 ≤ t ≤ 20   Following t test cases formatted as follows:  Number of cells in the chess graph, 2 ≤ N ≤ 11.   Following N lines (each of length N) containing 0s and 1s only, representing the chess graph. (Cell i is connected to cell j iff the j’s character of the i’s string is ‘1’). Nodes are numbered from 0 to N-1.   After that come White, black and combined costs 0 ≤ (wc, bc, cc) ≤ 100   Then White start and end locations (ws, we).  Then Black start and end locations (bs, be)   There will be a blank line between each 2 test cases.

 The first line contains an integer T ( T < 20) indicating the number of test cases.  Each test case begins with a line containing four integer: fx fy tx ty(-5000<=fx,fy,tx,ty<=5000). The knight is originally placed at (fx, fy) and (tx, ty) is its destination.   The following line contains an integer m(0 < m <= 10), indicating how many kinds of moves the knight can make.   Each of the following m lines contains two integer mx my(-10<=mx,my<=10; |mx|+|my|>0), which means that if a knight stands at (x,y), it can move to (x+mx,y+my).

 There are at most 100 test cases.  The first line of each test case contains two integers, n and k. The second line of each test case contains n integers: m 1,m 2…m n. The meaning of n,k, m 1,m 2…m n are described above. (1<=n<=50,0<=k,m 1,m 2…m n<=2 31-1 )  The input is ended by “0 0”

 There are multiple test cases. The first line in the input is an integer T ( T <= 10) indicating the number of test cases.   For each test case:   The first line is a integer n( 0 < n <= 250) indicating the number of virus pattern strings.   Then n lines follows, each represents a virus pattern string. Every pattern string stands for a virus. It’s guaranteed that those n pattern strings are all different so there are n different viruses. The length of pattern string is no more than 1,000 and a pattern string at least consists of one letter.   The last line of a test case is the program. The program may be described in a compressed format. A compressed program consists of capital letters and “compressors”. A “compressor” is in the following format:   [qx]   q is a number( 0 < q <= 5,000,000)and x is a capital letter. It means q consecutive letter xs in the original uncompressed program. For example, [6K] means ‘KKKKKK’ in the original program. So, if a compressed program is like:   AB[2D]E[7K]G   It actually is ABDDEKKKKKKKG after decompressed to original format.  The length of the program is at least 1 and at most 5,100,000, no matter in the compressed format or after it is decompressed to original format.

 There are no more than 100 test cases.  The first line of each test case contains an integer N. N is the number of courses (0 < N <= 300)  Then N lines follows. Each line contains two integers A i and B i (0 <= A  i < B i <=1000), meaning that the i th course is available during the time interval (A i,B i).  The input ends by N = 0.

 Your program will be tested on one or more data sets. Each test set is described on a single line made of two positive numbers: (0 < W,H < 1,000,000) which are the width and height of each tile. The last line is made of two zeros.

 The first line of the input is an integer T( T <= 20) indicating the number of test cases.   Each test case is a line which is in the format below:   s1 s2 s3   s1, s2 and s3 are all strings which are made up of capital letters. Those capital letters only include 'A','B','C','D' and 'E', so forget about 'F' to 'Z'. The length of s1,s2 or s3 is no more than 8.   

 The input contains no more than 1000 test cases.  Each test case is a single line which contains eight float numbers, and it is formatted as below:   x 1 y 1 x 2 y 2 x 3 y 3 x 4 y 4 x i, y i are the x- and y-coordinates of the i th vertices of a quadrangle. They are float numbers and satisfy 0 ≤ x i ≤ 1000 and 0 ≤ y i ≤ 1000 (i = 1, …, 4).  The input is ended by eight -1.

 Your program will be tested on one or more data sets. Each data set is described on a single line. The line is a non-empty string of opening and closing braces and nothing else. No string has more than 2000 braces. All sequences are of even length.  The last line of the input is made of one or more ’-’ (minus signs.)

 Your program will be tested on one or more test cases. Each test case is specified on a line with two positive integers (0 < A,B < 1, 000, 000) where A * B > 1.  The last line is made of two zeros.

 Your program will be tested on one or more test cases. Each test case is made of a single positive number (0 < n 0 < 1,000,000).  The last line of the input file has a single zero (which is not part of the test cases.)

 Your program will be tested on one or more test cases. Each test case is specified on a single line that specifies string S representing the initial tile arrangement. S is a non-empty string and no longer than 100 characters and is made of the letters ’B’, ’W’, and exactly one ’F’. The last line of the input file has one or more ’-’ (minus) characters.

 Input consists of several test cases. Each test case is specified on N+2 lines. The first line contains an integer (1 ≤ N ≤ 1, 000) representing the number of missiles. The second line contains 5 real numbers X1, Y1, X2, Y2 and T: (X1, Y1) is the coordinates of the first tower, (X2, Y2) is the coordinates of the second tower and (0 ≤ T) is the total amount of energy generated from the power plants (the total area of the two magnetic disks). Each line of the remaining N lines contains two real numbers representing the landing coordinates of a missile.  The absolute value of all the given real numbers is less than or equal to 100 and may include a decimal point followed by up to 3 digits. Any two consecutive numbers on the same line are separated by one or more white-space characters. Zero or more blank lines may appear between test cases.  The last line of the input file is made of a single zero.

 Your program will be tested on one or more test cases. Each test case is specified on T + 1 lines. The first line specifies two positive numbers: (0 < N ≤ 234) is the number of companies and (0 < T ≤ 100, 000) is the number of transactions. T lines follow, each describing a buying transaction. Each transaction is specified using two numbers A and B where (0 < A,B ≤ N) indicating that company A wants to buy shares in company B.  The last line of the input file has two zeros.

 Your program will be tested on one or more test cases. Each test case is described on N +1 lines. The first line of each test case specifies two positive integers: (N ≤ 100, 000) and (K ≤ 10) where N is the number of cities and K is number of children. Note that K ≤ N.  N lines follows, each describing the coordinates of a city by specifying two integers (x, y) where 0 ≤ x, y ≤ 100, 000. Since coordinates are rounded to the nearest integer, more than one city could have the exact same coordinate on the map. You may assume that the map of the kingdom is any rectangle that contains all of the given points (although such information is not needed by the program.) Note also that while all cities lie on integer coordinates, the dividing lines need not be.  The last line of the input file contains two zeros.

 Input consists of several test cases. Each case is specified on H + 1 lines. The first line specifies three non negative integers specifying the width W, the height H of the blurred image and the blurring distance D respectively where (1 ≤ W,H ≤ 10) and (D ≤ min(W/2,H/2)). The remaining H lines specify the gray-level of each pixel in the blurred image. Each line specifies W non-negative real numbers given up to the 2nd decimal place. The value of all the given real numbers will be less than 100.  Zero or more lines (made entirely of white spaces) may appear between cases. The last line of the input file consists of three zeros.

 The first line contains an integer t meaning that there are t test cases(t <= 10).  For each test case :  The first line is an integer n meaning that there are n moles. (n <= 600000).  The second line contains n integers representing the mole line. Each integer is a moleâ€™s number and the first integer is the number of the first mole in the line.  The third line is the harmony string. The string length is not large than 7000.  

 Your program will be tested on one or more test cases. Each test case is specified using R+1 lines. The first line specifies two integers (1 ≤ R,C ≤ 50) which are the dimensions of the museum hall. The next R lines contain C integers separated by one or more spaces. The j-th integer of the i-th row is -1 if cell (i, j) already contains one of the museum’s guards, otherwise it contains an integer (0 ≤ T < 2 12) representing the type of the artifact in that cell.  The last line of the input file has two zeros.  

 The input contains no more than 40 test cases. For each test case, the first line contains three integers representing the number of red pieces N (2<=N<=7) and the position of the black general. The following n lines contain details of N red pieces. For each line, there are a char and two integers representing the type and position of the piece (type char ‘G’ for general, ‘R’ for chariot, ‘H’ for horse and ‘C’ for cannon). We guarantee that the situation is legal and the red side has delivered the check.  There is a blank line between two test cases. The input ends by 0 0 0.  

 The input contains no more than 10 test cases.  For each test case:  The first line includes two integers N and M. N is the total number of orders. M is the number of hours the shop opens.  The next N lines describe all the orders. Each line is in the following format:   month date year H R   It means that on a certain date, a customer orders R mooncakes at H o’clock. “month” is in the format of abbreviation, so it could be "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov" or "Dec". H and R are all integers.  All the orders are sorted by the time in increasing order.  The next line contains T and S meaning that the storage life of a mooncake is T hours and the cost to store a mooncake for an hour is S.  Finally, M lines follow. Among those M lines, the ith line( i starts from 1) contains a integer indicating the cost to make a mooncake during the ith hour . The cost is no more than 10000. Jan 1st 2000 0 o'clock belongs to the 1st hour, Jan 1st 2000 1 o'clock belongs to the 2nd hour, …… and so on.   (0<N <= 2500; 0 < M,T <=100000; 0<=S <= 200; R<=10000 ; 0<=H<24)   The input ends with N = 0 and M = 0.  

 There are several test cases.  The first line of each test case contains two integers N and M. N is the number of houses, M is the number of queries.  The following N-1 lines, each contains three integers, x, y and z, indicating that there is a road of length z connecting house x and house y.  The following M lines are the queries. Each line contains an integer Q, asking that at most how many people can take part in Bob’s race according to the above mentioned rules and under the condition that the“race difference”is no more than Q.   The input ends with N = 0 and M = 0.   (N<=50000 M<=500 1<=x,y<=N 0<=z<=5000 Q<=10000000)  

 The input begins with a line containing an integer T (1 <= T <= 30), the number of test cases.   Each test case contains 10 lines. Each line contains three integers t, s and p (0 <= t <= 3, 1 <= s <= 10, 0 <= p <= 9) indicating a single card's information - t is the type (0 for foul, 1 for offense, 2 for defense, and 3 for attack), s is the speed, and p is the power of the card. The first five cards belong to Alice (first four are on the field and the fifth is off the field), and the last five cards belong to Bob (also first four are on the field and the fifth is off the field initially).  

 There are no more than 20 test cases in the input.  For each test case, the first line contains two integers N and M (1<=N<=3000, 0<=M<=NÃ—N), demonstrating the number of cities and roads in Pushtuar. Cities are numbered from 0 to N-1. In the each of the following M lines, there are three integers x i, y i and c i(c i<=10 7), showing that there is a bidirectional road between x i and y i, while the cost of setting up guarders on this road is c i. We guarantee that the graph is connected. The total cost of the graph is less or equal to 10 9.   The next line contains an integer Q (1<=Q<=10000) representing the number of suspicious road cost changes. In the following Q lines, each line contains three integers Xi, Yi and Ci showing that the cost of road (Xi, Yi) may change to Ci (Ci<=107). We guarantee that the road always exists and Ci is larger than the original cost (we guarantee that there is at most one road connecting two cities directly). Please note that the probability of each suspicious road cost change is the same.  

 The input contains no more than 20 test cases. For each test case, the first line contains a single integer N (2<=N<=8) indicating the size of game board.   The following N lines show an N×N matrix (a i,j)n×n representing the game board. a i,j is in the range of 0 to 5 representing the color of the corresponding grid.   The input ends with N = 0.  

 The input begins with a line containing an integer, indicating the number of test cases. There are no more than 100 test cases.   For each case, the first line begins with four integers --- the above mentioned n, d, L and W. Then n lines follow, each representing a member. Each line contains two integers s and t, meaning that the member spend s seconds to run one meter when he/she is in a bad mood, and spend t seconds to run one meter when he/she is in a good mood.  

 The input will consist of multiply test cases. For each case, The first line contains five positive integers --- above mentioned N, M, MIN_K,MAX_K and P( N <= 1000,M <= 10000, MIN_K < MAX_K) . P means that if the area of a province is A, then there are A×P porcelains in that province. P is guaranteed to be even so that the amount of porcelains in each province will be a positive integer.   The next N lines, each gives two integer x, y, representing the coordinate of a vertex(Vertexes have distinct coordinates). The vertexes are numbered from 0 to N-1 and the coordinates are given in the order of vertex No.   The next M lines, each gives three integers u,v, and w. It means that there is an edge connecting vertex u and vertex v. The edge is also a boundary between two provinces. w means that the boundary can’t let more than w porcelains to pass through. (w for the boundary of China is 0, and boundaries don't overlap). The number of province is less than 2000.   The input ends with 0 0 0 0 0.  

 The input consists of multiply test cases.  For each case, the first line contains five integers: N, M, Dx, Dy and Dz. N is the number of fighters. M points in/on the battle-cruiser will be given later. The convex hull of these M points is the shape of the battle-cruiser. (Dx, Dy, Dz) is the direction vector of the radiation. Dz is negative.   Each of the next N lines contains four integers Xi, Yi, Zi and Pi , representing a fighter. (Xi, Yi, Zi) is the coordinate of the fighter (also the center of the sphere shield made by the fighter). Pi is the radius of the shield.   Each of the next M lines contains three integers Xi, Yi and Zi. (Xi, Yi Zi) is a point in/on the battle-cruiser.   All the Xi, Yi are in the range of [0, 100]; all the Zi are in the range of [20,100];  0< Pi <= 20; N+M<=500, and the ground is the plane Z=0.   Please note that several fighters may stay at the same position, and a fighter can stay inside or on the cruiser.   The input ends with 0 0 0 0 0.  

 The first line of the input file consists of an integer number n (1 ≤ n ≤ 100). The following n lines contain a description of the functions. The i-th line describes function fi. It consists of the number ci (1 ≤ ci ≤ 100) — the number of commands for function fi, followed by a description of each command.

 The first line of the input file contains four integer numbers n1, n2, m, and r; n1 and n2 (1 <= n1, n2 <= 10) represent the number of permanently open lanes for left-to-right and right-to-left traffic respectively; m (1 <= m <= 100 000) is the number of time intervals in a day; r (1 <= r <= m) is the number of time intervals that the central lane is closed for new traffic on reversal.   The following m lines contains traffic data on the typical day. Each line describes time interval from 1 to m with two integer numbers â€” the number of cars arriving at the bridge on the left and on the right. There are at most 100 arriving cars at each time interval on each side.

The first line contains one integer N â‰¤ 3000, the number of binary digits in the binary string. The second line contains N integers, the binary digits in the last column from top to bottom.

